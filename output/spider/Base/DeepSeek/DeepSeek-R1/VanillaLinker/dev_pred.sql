  SELECT COUNT(*) FROM singer;
  SELECT COUNT(*) FROM singer;
  SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
  SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
  SELECT AVG(Age) AS Average, MIN(Age) AS Minimum, MAX(Age) AS Maximum FROM singer WHERE Country = 'France';
  SELECT AVG(Age) AS Average, MIN(Age) AS Minimum, MAX(Age) AS Maximum FROM singer WHERE Country = 'France';
  SELECT Song_Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);
  SELECT s.Song_Name, s.Song_release_year  FROM singer s  WHERE s.Age = (SELECT MIN(Age) FROM singer);
  SELECT DISTINCT s.Country  FROM singer s  WHERE s.Age > 20;
  SELECT DISTINCT Country FROM singer WHERE Age > 20;
  SELECT Country, COUNT(Singer_ID) AS NumberOfSingers FROM singer GROUP BY Country;
  SELECT Country, COUNT(*) AS NumberOfSingers FROM singer GROUP BY Country;
  SELECT s.Song_Name  FROM singer s  WHERE s.Age > (SELECT AVG(Age) FROM singer);
  SELECT s1.Song_Name  FROM singer s1  WHERE s1.Age > (SELECT AVG(s2.Age) FROM singer s2);
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000; 
  SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
  SELECT MAX(Capacity), AVG(Capacity) FROM stadium;
  SELECT AVG(Capacity), MAX(Capacity) FROM stadium;
  SELECT Name, Capacity  FROM stadium  WHERE Average = (SELECT MAX(Average) FROM stadium);
  SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium);
  SELECT COUNT(*) FROM concert WHERE Year IN ('2014', '2015');
  SELECT COUNT(*) FROM concert WHERE Year IN ('2014', '2015');
  SELECT s.Name, COUNT(c.concert_ID) AS NumberOfConcerts  FROM stadium s  LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID  GROUP BY s.Stadium_ID, s.Name;
  SELECT stadium.Stadium_ID, COUNT(concert.concert_ID) AS NumberOfConcerts  FROM stadium  LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID  GROUP BY stadium.Stadium_ID;
  SELECT s.Name, s.Capacity  FROM stadium s  JOIN concert c ON s.Stadium_ID = CAST(c.Stadium_ID AS INTEGER)  WHERE c.Year >= '2014'  GROUP BY s.Stadium_ID  ORDER BY COUNT(*) DESC  LIMIT 1;
  SELECT s.Name, s.Capacity  FROM stadium s  JOIN concert c ON s.Stadium_ID = CAST(c.Stadium_ID AS INTEGER)  WHERE c.Year > '2013'  GROUP BY s.Stadium_ID  ORDER BY COUNT(*) DESC  LIMIT 1;
  SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT Year  FROM concert  GROUP BY Year  ORDER BY COUNT(*) DESC  LIMIT 1;
  SELECT s.Name  FROM stadium s  LEFT JOIN concert c ON s.Stadium_ID = CAST(c.Stadium_ID AS INTEGER)  WHERE c.concert_ID IS NULL;
  SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT CAST(Stadium_ID AS INT) FROM concert);
  SELECT Country  FROM singer  GROUP BY Country  HAVING SUM(Age > 40) > 0 AND SUM(Age < 30) > 0;
  SELECT Name  FROM stadium  WHERE Stadium_ID NOT IN (     SELECT CAST(Stadium_ID AS UNSIGNED)      FROM concert      WHERE Year = '2014' );
  SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT CAST(Stadium_ID AS INTEGER) FROM concert WHERE Year = '2014');
  SELECT c.concert_Name, c.Theme, COUNT(sic.Singer_ID) AS NumberOfSingers  FROM concert c  LEFT JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID  GROUP BY c.concert_ID, c.concert_Name, c.Theme;
  SELECT c.concert_Name, c.Theme, COUNT(sic.Singer_ID) AS NumberOfSingers FROM concert c LEFT JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID GROUP BY c.concert_ID, c.concert_Name, c.Theme;
  SELECT s.Name, COUNT(sic.concert_ID) AS NumberOfConcerts FROM singer s LEFT JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID GROUP BY s.Singer_ID;
  SELECT s.Name, COUNT(sic.concert_ID) AS NumberOfConcerts FROM singer s LEFT JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID GROUP BY s.Singer_ID;
  SELECT DISTINCT s.Name  FROM singer s  JOIN singer_in_concert sc ON s.Singer_ID = CAST(sc.Singer_ID AS INTEGER)  JOIN concert c ON sc.concert_ID = c.concert_ID  WHERE c.Year = '2014';
  SELECT DISTINCT s.Name  FROM singer s  JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID  JOIN concert c ON sic.concert_ID = c.concert_ID  WHERE c.Year = '2014';
  SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%';
  SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%';
  SELECT s.Name, s.Location  FROM stadium s  JOIN concert c ON s.Stadium_ID = CAST(c.Stadium_ID AS UNSIGNED)  WHERE c.Year IN ('2014', '2015')  GROUP BY s.Stadium_ID  HAVING COUNT(DISTINCT c.Year) = 2;
  SELECT s.Name, s.Location  FROM stadium s  WHERE s.Stadium_ID IN (     SELECT CAST(c.Stadium_ID AS INTEGER)      FROM concert c      WHERE c.Year IN ('2014', '2015')      GROUP BY c.Stadium_ID      HAVING COUNT(DISTINCT c.Year) = 2 );
  SELECT COUNT(*)  FROM concert  WHERE Stadium_ID = (     SELECT CAST(Stadium_ID AS TEXT)      FROM stadium      WHERE Capacity = (SELECT MAX(Capacity) FROM stadium) );
  SELECT COUNT(*)  FROM concert  WHERE CAST(Stadium_ID AS INTEGER) = (     SELECT Stadium_ID      FROM stadium      ORDER BY Capacity DESC      LIMIT 1 );
  SELECT COUNT(*) FROM Pets WHERE weight > 10;
  SELECT COUNT(*) FROM Pets WHERE weight > 10;
  SELECT weight FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog');
  SELECT weight FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog');
  SELECT PetType, MAX(weight) AS MaxWeight  FROM Pets  GROUP BY PetType;
  SELECT PetType, MAX(weight) FROM Pets GROUP BY PetType;
  SELECT COUNT(*) AS num_pets FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID WHERE s.Age > 20;
  SELECT COUNT(*)  FROM Student s  JOIN Has_Pet hp ON s.StuID = hp.StuID  WHERE s.Age > 20;
  SELECT COUNT(*)  FROM Student s  JOIN Has_Pet hp ON s.StuID = hp.StuID  JOIN Pets p ON hp.PetID = p.PetID  WHERE s.Sex = 'F' AND p.PetType = 'dog';
  SELECT COUNT(*) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Sex = 'F' AND Pets.PetType = 'dog';
  SELECT COUNT(DISTINCT PetType) FROM Pets;
  SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT DISTINCT S.Fname  FROM Student S  JOIN Has_Pet HP ON S.StuID = HP.StuID  JOIN Pets P ON HP.PetID = P.PetID  WHERE P.PetType IN ('cat', 'dog'); 
  SELECT DISTINCT Student.Fname  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType IN ('cat', 'dog');
  SELECT Fname FROM Student WHERE StuID IN (SELECT HP.StuID FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' INTERSECT SELECT HP.StuID FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'dog');
  SELECT S.Fname  FROM Student S  JOIN Has_Pet HP ON S.StuID = HP.StuID  JOIN Pets P ON HP.PetID = P.PetID  WHERE P.PetType IN ('cat', 'dog')  GROUP BY S.StuID  HAVING COUNT(DISTINCT P.PetType) = 2;
  SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN (     SELECT Has_Pet.StuID     FROM Has_Pet     JOIN Pets ON Has_Pet.PetID = Pets.PetID     WHERE Pets.PetType = 'cat' );
  SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat');
SELECT s.StuID FROM Student s WHERE s.StuID NOT IN (     SELECT hp.StuID FROM Has_Pet hp     JOIN Pets p ON hp.PetID = p.PetID     WHERE p.PetType = 'cat' ); 
  SELECT Student.StuID FROM Student WHERE Student.StuID NOT IN (   SELECT Has_Pet.StuID FROM Has_Pet   INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Pets.PetType = 'cat' );
  SELECT S.Fname, S.Age FROM Student S WHERE EXISTS (     SELECT 1     FROM Has_Pet HP     JOIN Pets P ON HP.PetID = P.PetID     WHERE HP.StuID = S.StuID AND P.PetType = 'dog' ) AND NOT EXISTS (     SELECT 1     FROM Has_Pet HP     JOIN Pets P ON HP.PetID = P.PetID     WHERE HP.StuID = S.StuID AND P.PetType = 'cat' );
  SELECT S.Fname  FROM Student S  WHERE EXISTS (     SELECT 1      FROM Has_Pet HP      JOIN Pets P ON HP.PetID = P.PetID      WHERE HP.StuID = S.StuID AND P.PetType = 'dog' )  AND NOT EXISTS (     SELECT 1      FROM Has_Pet HP      JOIN Pets P ON HP.PetID = P.PetID      WHERE HP.StuID = S.StuID AND P.PetType = 'cat' );
SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets); 
  SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);
  SELECT PetID, weight  FROM Pets  WHERE pet_age > 1;
  SELECT PetID, weight FROM Pets WHERE pet_age > 1;
  SELECT PetType, AVG(pet_age) AS AverageAge, MAX(pet_age) AS MaxAge FROM Pets GROUP BY PetType;
  SELECT PetType, AVG(pet_age) AS average_age, MAX(pet_age) AS maximum_age FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) AS AverageWeight FROM Pets GROUP BY PetType; 
  SELECT PetType, AVG(weight) AS AvgWeight FROM Pets GROUP BY PetType;
  SELECT DISTINCT Student.Fname, Student.Age  FROM Student  INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID;
  SELECT DISTINCT S.Fname, S.Age  FROM Student S  JOIN Has_Pet HP ON S.StuID = HP.StuID;
  SELECT p.PetID  FROM Student s  JOIN Has_Pet hp ON s.StuID = hp.StuID  WHERE s.LName = 'Smith';
  SELECT h.PetID FROM Student s JOIN Has_Pet h ON s.StuID = h.StuID WHERE s.LName = 'Smith';
  SELECT Student.StuID, COUNT(Has_Pet.PetID) AS NumberOfPets  FROM Student  INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  GROUP BY Student.StuID;
  SELECT Has_Pet.StuID, COUNT(PetID)  FROM Has_Pet  GROUP BY Has_Pet.StuID;
  SELECT s.Fname, s.Sex FROM Student s JOIN (     SELECT StuID     FROM Has_Pet     GROUP BY StuID     HAVING COUNT(PetID) > 1 ) hp ON s.StuID = hp.StuID;
  SELECT s.Fname, s.Sex  FROM Student s  WHERE s.StuID IN (     SELECT hp.StuID      FROM Has_Pet hp      GROUP BY hp.StuID      HAVING COUNT(*) > 1 );
  SELECT Student.LName  FROM Student  INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3;
  SELECT S.LName  FROM Student S  JOIN Has_Pet HP ON S.StuID = HP.StuID  JOIN Pets P ON HP.PetID = P.PetID  WHERE P.PetType = 'cat' AND P.pet_age = 3;
  SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);
  SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);
  SELECT COUNT(*) FROM continents;
  SELECT COUNT(*) FROM continents;
  SELECT c.ContId, c.Continent, COUNT(co.CountryId) AS NumberOfCountries FROM continents c LEFT JOIN countries co ON c.ContId = co.Continent GROUP BY c.ContId, c.Continent;
  SELECT c.ContId, c.Continent, COUNT(co.CountryId) AS NumberOfCountries  FROM continents c  LEFT JOIN countries co ON c.ContId = co.Continent  GROUP BY c.ContId, c.Continent;
  SELECT COUNT(CountryId) FROM countries;
  SELECT COUNT(*) FROM countries;
  SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.ModelId) AS NumberOfModels FROM car_makers LEFT JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName;
  SELECT cm.Id, cm.FullName, COUNT(ml.ModelId) AS NumberOfModels  FROM car_makers cm  LEFT JOIN model_list ml ON cm.Id = ml.Maker  GROUP BY cm.Id, cm.FullName;
  SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE CAST(cars_data.Horsepower AS INTEGER) = (SELECT MIN(CAST(Horsepower AS INTEGER)) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model);
  SELECT c.Model  FROM cars_data d  JOIN car_names c ON d.Id = c.MakeId  WHERE CAST(d.Horsepower AS INTEGER) = (SELECT MIN(CAST(Horsepower AS INTEGER)) FROM cars_data);
  SELECT cn.Model  FROM cars_data cd  JOIN car_names cn ON cd.Id = cn.MakeId  WHERE cd.Weight < (SELECT AVG(Weight) FROM cars_data);
  SELECT cn.Model  FROM cars_data cd  JOIN car_names cn ON cd.Id = cn.MakeId  WHERE cd.Weight < (SELECT AVG(Weight) FROM cars_data);
  SELECT DISTINCT cm.Maker  FROM car_makers cm  JOIN model_list ml ON cm.Id = ml.Maker  JOIN car_names cn ON ml.Model = cn.Model  JOIN cars_data cd ON cn.MakeId = cd.Id  WHERE cd.Year = 1970;
  SELECT DISTINCT cm.Maker  FROM car_makers cm  JOIN model_list ml ON cm.Id = ml.Maker  JOIN car_names cn ON ml.Model = cn.Model  JOIN cars_data cd ON cn.MakeId = cd.Id  WHERE cd.Year = 1970;
  SELECT cn.Make, cd.Year  FROM cars_data cd  JOIN car_names cn ON cd.Id = cn.MakeId  WHERE cd.Year = (SELECT MIN(Year) FROM cars_data);
  SELECT cm.Maker, cd.Year FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id WHERE cd.Year = (SELECT MIN(Year) FROM cars_data) LIMIT 1;
  SELECT DISTINCT ml.Model  FROM cars_data cd  JOIN car_names cn ON cd.Id = cn.MakeId  JOIN model_list ml ON cn.Model = ml.Model  WHERE cd.Year > 1980;
  SELECT DISTINCT model_list.Model  FROM model_list  JOIN car_names ON model_list.Model = car_names.Model  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE cars_data.Year > 1980;
  SELECT c.Continent, COUNT(cm.Id) AS Count FROM continents c LEFT JOIN countries cnt ON c.ContId = cnt.Continent LEFT JOIN car_makers cm ON cnt.CountryId = cm.Country GROUP BY c.Continent;
  SELECT c.Continent, COUNT(cm.Id) AS NumberOfCarMakers FROM continents c LEFT JOIN countries cnt ON c.ContId = cnt.Continent LEFT JOIN car_makers cm ON cnt.CountryId = cm.Country GROUP BY c.Continent;
  SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT c.CountryName  FROM car_makers cm  JOIN countries c ON cm.Country = c.CountryId  GROUP BY cm.Country  ORDER BY COUNT(*) DESC  LIMIT 1;
  SELECT cm.FullName, COUNT(ml.ModelId) AS Count  FROM car_makers cm  JOIN model_list ml ON cm.Id = ml.Maker  GROUP BY cm.FullName;
  SELECT cm.Id, cm.FullName, COUNT(ml.ModelId) AS NumberOfModels FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.FullName;
  SELECT c.Accelerate  FROM cars_data c  JOIN car_names cn ON c.Id = cn.MakeId  WHERE cn.Make = 'amc hornet sportabout (sw)';
  SELECT cars_data.Accelerate  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  WHERE car_names.Make = 'amc hornet sportabout (sw)';
  SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'france';
  SELECT COUNT(DISTINCT cm.Id)  FROM car_makers cm  JOIN countries c ON cm.Country = c.CountryId  WHERE c.CountryName = 'france';
  SELECT COUNT(*)  FROM model_list  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_makers.Country = '1';
  SELECT COUNT(*) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'usa';
  SELECT AVG(CAST(MPG AS REAL)) FROM cars_data WHERE Cylinders = 4;
  SELECT AVG(CAST(MPG AS REAL)) FROM cars_data WHERE Cylinders = 4;
  SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974;
  SELECT MIN(cd.Weight) FROM cars_data cd WHERE cd.Cylinders = 8 AND cd.Year = 1974;
  SELECT cm.Maker, ml.Model  FROM car_makers cm  JOIN model_list ml ON cm.Id = ml.Maker;
  SELECT cm.Maker, ml.Model  FROM car_makers cm  JOIN model_list ml ON cm.Id = ml.Maker;
  SELECT DISTINCT c.CountryId, c.CountryName  FROM countries c  JOIN car_makers cm ON c.CountryId = cm.Country;
  SELECT DISTINCT c.CountryId, c.CountryName  FROM countries c  JOIN car_makers cm ON c.CountryId = cm.Country;
  SELECT COUNT(*) FROM cars_data WHERE CAST(Horsepower AS INTEGER) > 150;
  SELECT COUNT(*) FROM cars_data WHERE CAST(Horsepower AS INTEGER) > 150;
  SELECT `Year`, AVG(`Weight`) AS AverageWeight FROM `cars_data` GROUP BY `Year`;
  SELECT `Year`, AVG(`Weight`) AS AvgWeight, AVG(`Year`) AS AvgYear FROM `cars_data` GROUP BY `Year`;
  SELECT c.CountryName  FROM countries c  JOIN car_makers cm ON c.CountryId = CAST(cm.Country AS INTEGER)  WHERE c.Continent = 2  GROUP BY c.CountryId  HAVING COUNT(cm.Id) >= 3;
  SELECT c.CountryName  FROM countries c  JOIN continents cont ON c.Continent = cont.ContId  JOIN car_makers cm ON c.CountryId = cm.Country  WHERE cont.Continent = 'europe'  GROUP BY c.CountryId  HAVING COUNT(cm.Id) >= 3;
  SELECT CAST(cd.Horsepower AS INTEGER) AS MaxHorsepower, cn.Make  FROM cars_data cd  JOIN car_names cn ON cd.Id = cn.MakeId  WHERE cd.Cylinders = 3  AND CAST(cd.Horsepower AS INTEGER) = (SELECT MAX(CAST(Horsepower AS INTEGER)) FROM cars_data WHERE Cylinders = 3);
  SELECT CAST(cd.Horsepower AS INTEGER) AS Horsepower, cm.Maker  FROM cars_data cd  JOIN car_names cn ON cd.Id = cn.MakeId  JOIN model_list ml ON cn.Model = ml.Model  JOIN car_makers cm ON ml.Maker = cm.Id  WHERE cd.Cylinders = 3  ORDER BY Horsepower DESC  LIMIT 1;
  SELECT model_list.Model  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  WHERE CAST(cars_data.MPG AS REAL) = (SELECT MAX(CAST(MPG AS REAL)) FROM cars_data);
  SELECT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE CAST(cars_data.MPG AS REAL) = (SELECT MAX(CAST(MPG AS REAL)) FROM cars_data);
  SELECT AVG(CAST(Horsepower AS INTEGER)) FROM cars_data WHERE Year < 1980;
  SELECT AVG(CAST(cd.Horsepower AS REAL))  FROM cars_data cd  WHERE cd.Year < 1980;
  SELECT AVG(cd.Edispl)  FROM cars_data cd  JOIN car_names cn ON cd.Id = cn.MakeId  JOIN model_list ml ON cn.Model = ml.Model  WHERE ml.Model = 'volvo';
  SELECT AVG(cd.Edispl)  FROM cars_data cd  JOIN car_names cn ON cd.Id = cn.MakeId  JOIN model_list ml ON cn.Model = ml.Model  JOIN car_makers cm ON ml.Maker = cm.Id  WHERE cm.Maker = 'volvo';
  SELECT Cylinders, MAX(Accelerate) AS MaxAccelerate FROM cars_data GROUP BY Cylinders;
  SELECT `Cylinders`, MAX(`Accelerate`) FROM `cars_data` GROUP BY `Cylinders`;
  SELECT cn.Model  FROM car_names cn  GROUP BY cn.Model  ORDER BY COUNT(cn.MakeId) DESC  LIMIT 1;
  SELECT ml.Model  FROM model_list ml  JOIN car_names cn ON ml.Model = cn.Model  GROUP BY ml.Model  ORDER BY COUNT(*) DESC  LIMIT 1;
  SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
  SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
  SELECT COUNT(*) FROM cars_data WHERE Year = 1980;
  SELECT COUNT(*) FROM cars_data WHERE Year = 1980;
  SELECT COUNT(*)  FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker WHERE cm.FullName = 'American Motor Company';
  SELECT COUNT(*) FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'amc');
  SELECT cm.FullName, cm.Id  FROM car_makers cm  JOIN model_list ml ON cm.Id = ml.Maker  GROUP BY cm.Id  HAVING COUNT(ml.ModelId) > 3;
  SELECT car_makers.Id, car_makers.Maker  FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker  GROUP BY car_makers.Id  HAVING COUNT(model_list.ModelId) > 3;
  SELECT DISTINCT model_list.Model  FROM model_list  JOIN car_makers ON model_list.Maker = car_makers.Id  LEFT JOIN car_names ON model_list.Model = car_names.Model  LEFT JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE car_makers.FullName = 'General Motors' OR cars_data.Weight > 3500;
  SELECT DISTINCT model_list.Model  FROM model_list  LEFT JOIN car_names ON model_list.Model = car_names.Model  LEFT JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE model_list.Maker = (SELECT Id FROM car_makers WHERE FullName = 'General Motors') OR cars_data.Weight > 3500;
  SELECT DISTINCT `Year` FROM `cars_data` WHERE `Weight` >= 3000 AND `Weight` <= 4000;
  SELECT DISTINCT c1.Year  FROM cars_data c1  INNER JOIN cars_data c2 ON c1.Year = c2.Year  WHERE c1.Weight < 4000 AND c2.Weight > 3000;
  SELECT c.Horsepower  FROM cars_data c  WHERE c.Accelerate = (SELECT MAX(Accelerate) FROM cars_data);
  SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Accelerate = (SELECT MAX(cars_data.Accelerate) FROM cars_data);
  SELECT cars_data.Cylinders FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Model = 'volvo' ORDER BY cars_data.Accelerate ASC LIMIT 1;
  SELECT c.Cylinders  FROM cars_data c  JOIN car_names cn ON c.Id = cn.MakeId  JOIN model_list ml ON cn.Model = ml.Model  WHERE ml.Model = 'volvo'  ORDER BY c.Accelerate ASC  LIMIT 1;
  SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Accelerate) FROM cars_data WHERE CAST(Horsepower AS INTEGER) = (SELECT MAX(CAST(Horsepower AS INTEGER)) FROM cars_data));
  SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT Accelerate FROM cars_data WHERE CAST(Horsepower AS INTEGER) = (SELECT MAX(CAST(Horsepower AS INTEGER)) FROM cars_data));
  SELECT COUNT(*) FROM (     SELECT c.CountryId      FROM countries c      JOIN car_makers cm ON c.CountryId = CAST(cm.Country AS INTEGER)      GROUP BY c.CountryId      HAVING COUNT(cm.Id) > 2 ) AS sub;
  SELECT COUNT(*) FROM (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(*) > 2);
  SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
  SELECT COUNT(cars_data.Id) FROM cars_data WHERE cars_data.Cylinders > 6;
  SELECT model_list.Model  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  WHERE cars_data.Cylinders = 4  AND CAST(cars_data.Horsepower AS INTEGER) = (      SELECT MAX(CAST(Horsepower AS INTEGER))      FROM cars_data      WHERE Cylinders = 4  );
  SELECT car_names.Model  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  WHERE cars_data.Cylinders = 4  AND CAST(cars_data.Horsepower AS INTEGER) = (      SELECT MAX(CAST(Horsepower AS INTEGER))      FROM cars_data      WHERE Cylinders = 4  );
  SELECT c.Id, cn.Make  FROM cars_data c  JOIN car_names cn ON c.Id = cn.MakeId  WHERE CAST(c.Horsepower AS INTEGER) > (SELECT MIN(CAST(Horsepower AS INTEGER)) FROM cars_data)  AND c.Cylinders <= 3;
  SELECT cars_data.Id, car_names.Make  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  WHERE CAST(cars_data.Horsepower AS INTEGER) != (SELECT MIN(CAST(Horsepower AS INTEGER)) FROM cars_data)  AND cars_data.Cylinders < 4;
  SELECT MAX(CAST(MPG AS REAL)) FROM cars_data WHERE Cylinders = 8 OR Year < 1980;
  SELECT MAX(CAST(MPG AS REAL)) FROM cars_data WHERE Cylinders = 8 OR Year < 1980;
  SELECT DISTINCT ml.Model  FROM model_list ml  JOIN car_makers cm ON ml.Maker = cm.Id  JOIN car_names cn ON ml.Model = cn.Model  JOIN cars_data cd ON cn.MakeId = cd.Id  WHERE cd.Weight < 3500 AND cm.FullName != 'Ford Motor Company';
  SELECT DISTINCT ml.Model  FROM cars_data cd  JOIN car_names cn ON cd.Id = cn.MakeId  JOIN model_list ml ON cn.Model = ml.Model  JOIN car_makers cm ON ml.Maker = cm.Id  WHERE cd.Weight < 3500  AND cm.FullName != 'Ford Motor Company';
  SELECT c.CountryName FROM countries c LEFT JOIN car_makers cm ON c.CountryId = CAST(cm.Country AS INTEGER) WHERE cm.Id IS NULL;
  SELECT c.CountryName  FROM countries c  LEFT JOIN car_makers cm ON c.CountryId = CAST(cm.Country AS INTEGER)  WHERE cm.Id IS NULL;
  SELECT cm.Id, cm.Maker  FROM car_makers cm  JOIN model_list ml ON cm.Id = ml.Maker  GROUP BY cm.Id  HAVING COUNT(DISTINCT ml.ModelId) >= 2  AND cm.Country IN (     SELECT Country      FROM car_makers      GROUP BY Country      HAVING COUNT(*) > 3 );
  SELECT cm.Id, cm.Maker  FROM car_makers cm  JOIN model_list ml ON cm.Id = ml.Maker  JOIN car_names cn ON ml.Model = cn.Model  GROUP BY cm.Id  HAVING COUNT(DISTINCT ml.ModelId) >= 2 AND COUNT(cn.MakeId) > 3;
  SELECT c.CountryId, c.CountryName  FROM countries c  JOIN car_makers cm ON c.CountryId = cm.Country  GROUP BY c.CountryId  HAVING COUNT(cm.Id) > 3  UNION  SELECT DISTINCT c.CountryId, c.CountryName  FROM model_list ml  JOIN car_makers cm ON ml.Maker = cm.Id  JOIN countries c ON cm.Country = c.CountryId  WHERE ml.Model = 'fiat';
  SELECT c.CountryId, c.CountryName  FROM countries c  WHERE c.CountryId IN (     SELECT CAST(cm.Country AS INTEGER)      FROM car_makers cm      GROUP BY cm.Country      HAVING COUNT(*) > 3 )  OR c.CountryId IN (     SELECT CAST(cm.Country AS INTEGER)      FROM car_makers cm      JOIN model_list ml ON cm.Id = ml.Maker      WHERE ml.Model = 'fiat' );
  SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways';
  SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways';
  SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways';
  SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways';
  SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
  SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
  SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';
  SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';
  SELECT COUNT(*) FROM airlines;
  SELECT COUNT(*) FROM airlines;
  SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM airports; 
  SELECT COUNT(*) FROM flights;
  SELECT COUNT(*) FROM flights;
  SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
  SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
  SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
  SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
  SELECT City, Country FROM airports WHERE AirportName = 'Alton';
  SELECT City, Country FROM airports WHERE AirportName = 'Alton';
  SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
  SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
  SELECT AirportName FROM airports WHERE TRIM(City) = 'Aberdeen';
  SELECT AirportName FROM airports WHERE TRIM(City) = 'Aberdeen';
  SELECT COUNT(*) FROM flights WHERE TRIM(SourceAirport) = 'APG';
  SELECT COUNT(*) FROM flights WHERE TRIM(SourceAirport) = 'APG';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'; 
  SELECT COUNT(*) FROM flights WHERE TRIM(DestAirport) = 'ATO';
  SELECT COUNT(*) FROM flights INNER JOIN airports ON TRIM(flights.SourceAirport) = airports.AirportCode WHERE TRIM(airports.City) = 'Aberdeen';
  SELECT COUNT(*)  FROM flights  JOIN airports ON TRIM(flights.SourceAirport) = airports.AirportCode  WHERE TRIM(airports.City) = 'Aberdeen';
  SELECT COUNT(*) FROM flights JOIN airports ON TRIM(flights.DestAirport) = airports.AirportCode WHERE airports.City = 'Aberdeen ';
  SELECT COUNT(*)  FROM flights  JOIN airports ON TRIM(flights.DestAirport) = airports.AirportCode  WHERE TRIM(airports.City) = 'Aberdeen';
  SELECT COUNT(*) FROM flights JOIN airports AS src ON TRIM(flights.SourceAirport) = src.AirportCode JOIN airports AS dest ON TRIM(flights.DestAirport) = dest.AirportCode WHERE TRIM(src.City) = 'Aberdeen' AND TRIM(dest.City) = 'Ashley';
  SELECT COUNT(*) FROM flights JOIN airports AS src ON TRIM(flights.SourceAirport) = src.AirportCode JOIN airports AS dest ON TRIM(flights.DestAirport) = dest.AirportCode WHERE TRIM(src.City) = 'Aberdeen' AND TRIM(dest.City) = 'Ashley';   However, upon reviewing the provided data, there's no airport with city 'Ashley', making the result zero. But since the flight data includes 'ASY' as DestAirport (possibly representing Ashley despite missing in airports), the corrected SQL is:  SELECT COUNT(*) FROM flights JOIN airports AS src ON TRIM(flights.SourceAirport) = src.AirportCode WHERE TRIM(src.City) = 'Aberdeen' AND TRIM(flights.DestAirport) = 'ASY';   This counts the flight from Aberdeen (APG) to ASY.   Final answer:  SELECT COUNT(*) FROM flights JOIN airports AS src ON TRIM(flights.SourceAirport) = src.AirportCode WHERE TRIM(src.City) = 'Aberdeen' AND TRIM(flights.DestAirport) = 'ASY';
  SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE airlines.Airline = 'JetBlue Airways';
  SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'Jetblue Airways';
  SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE airlines.Airline = 'United Airlines' AND flights.DestAirport = ' ASY';
  SELECT COUNT(*)  FROM flights  JOIN airlines ON flights.Airline = airlines.uid  WHERE airlines.Airline = 'United Airlines'    AND flights.DestAirport = ' ASY';
  SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines' AND TRIM(flights.SourceAirport) = 'AHD';
  SELECT COUNT(*) FROM flights WHERE Airline = 1 AND SourceAirport = ' AHD';
  SELECT COUNT(*)  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE flights.Airline = 1  AND TRIM(airports.City) = 'Aberdeen';
  SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON TRIM(flights.DestAirport) = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND TRIM(airports.City) = 'Aberdeen';
  SELECT a.City  FROM flights f  JOIN airports a ON TRIM(f.DestAirport) = a.AirportCode  GROUP BY a.City  ORDER BY COUNT(*) DESC  LIMIT 1;
  SELECT a.City  FROM flights f  JOIN airports a ON f.DestAirport = a.AirportCode  GROUP BY a.City  ORDER BY COUNT(*) DESC  LIMIT 1;
  SELECT a.City FROM flights f JOIN airports a ON TRIM(f.SourceAirport) = a.AirportCode GROUP BY a.City ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT a.City FROM flights f JOIN airports a ON TRIM(f.SourceAirport) = a.AirportCode GROUP BY TRIM(f.SourceAirport) ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT AirportCode FROM (     SELECT AirportCode, COUNT(*) AS Total FROM (         SELECT SourceAirport AS AirportCode FROM flights         UNION ALL         SELECT DestAirport FROM flights     ) GROUP BY AirportCode ORDER BY Total DESC LIMIT 1 );
  SELECT airport_code FROM (     SELECT SourceAirport AS airport_code, COUNT(*) AS cnt FROM flights GROUP BY SourceAirport     UNION ALL     SELECT DestAirport, COUNT(*) FROM flights GROUP BY DestAirport ) AS combined GROUP BY airport_code ORDER BY SUM(cnt) DESC LIMIT 1;
  SELECT AirportCode  FROM (     SELECT AirportCode, COUNT(*) AS num_flights      FROM (         SELECT SourceAirport AS AirportCode FROM flights          UNION ALL          SELECT DestAirport FROM flights     )      GROUP BY AirportCode )  WHERE num_flights = (     SELECT MIN(num_flights)      FROM (         SELECT COUNT(*) AS num_flights          FROM (             SELECT SourceAirport AS AirportCode FROM flights              UNION ALL              SELECT DestAirport FROM flights         )          GROUP BY AirportCode     ) );
  WITH all_flights AS (     SELECT SourceAirport AS Airport FROM flights     UNION ALL     SELECT DestAirport AS Airport FROM flights ) SELECT Airport FROM all_flights GROUP BY Airport ORDER BY COUNT(*) ASC LIMIT 1;
  SELECT a.Airline  FROM airlines a  JOIN flights f ON a.uid = f.Airline  GROUP BY a.uid  ORDER BY COUNT(*) DESC  LIMIT 1;
  SELECT a.Airline FROM flights f JOIN airlines a ON f.Airline = a.uid GROUP BY a.uid ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT a.Abbreviation, a.Country FROM airlines a LEFT JOIN flights f ON a.uid = f.Airline GROUP BY a.uid HAVING COUNT(f.FlightNo) = (SELECT MIN(flight_count) FROM (SELECT COUNT(f2.FlightNo) AS flight_count FROM airlines a2 LEFT JOIN flights f2 ON a2.uid = f2.Airline GROUP BY a2.uid) AS counts);
  SELECT a.Abbreviation, a.Country  FROM airlines a  LEFT JOIN flights f ON a.uid = f.Airline  GROUP BY a.uid  ORDER BY COUNT(f.FlightNo) ASC  LIMIT 1;
  SELECT DISTINCT a.Airline  FROM airlines a  JOIN flights f ON a.uid = f.Airline  WHERE TRIM(f.SourceAirport) = 'AHD';
  SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE TRIM(flights.SourceAirport) = 'AHD';
  SELECT DISTINCT a.Airline  FROM airlines a  JOIN flights f ON a.uid = f.Airline  WHERE TRIM(f.DestAirport) = 'AHD';
  SELECT DISTINCT a.Airline  FROM airlines a  JOIN flights f ON a.uid = f.Airline  WHERE TRIM(f.DestAirport) = 'AHD';
  SELECT a.Airline  FROM airlines a  WHERE EXISTS (     SELECT 1      FROM flights f      WHERE f.Airline = a.uid AND TRIM(f.SourceAirport) = 'APG' )  AND EXISTS (     SELECT 1      FROM flights f      WHERE f.Airline = a.uid AND TRIM(f.SourceAirport) = 'CVO' );
  SELECT a.Airline  FROM airlines a  JOIN flights f1 ON a.uid = f1.Airline AND TRIM(f1.SourceAirport) = 'APG'  JOIN flights f2 ON a.uid = f2.Airline AND TRIM(f2.SourceAirport) = 'CVO';
  SELECT a.Airline  FROM airlines a  WHERE EXISTS (     SELECT 1      FROM flights f      WHERE f.Airline = a.uid      AND f.SourceAirport = ' CVO' )  AND NOT EXISTS (     SELECT 1      FROM flights f2      WHERE f2.Airline = a.uid      AND f2.SourceAirport = ' APG' );
  SELECT a.Airline  FROM airlines a  WHERE EXISTS (     SELECT 1      FROM flights f      WHERE f.Airline = a.uid      AND TRIM(f.SourceAirport) = 'CVO' )  AND NOT EXISTS (     SELECT 1      FROM flights f      WHERE f.Airline = a.uid      AND TRIM(f.SourceAirport) = 'APG' );
  SELECT a.Airline  FROM airlines a  JOIN flights f ON a.uid = f.Airline  GROUP BY a.uid  HAVING COUNT(*) >= 10;
  SELECT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  GROUP BY airlines.uid  HAVING COUNT(*) >= 10;
  SELECT a.Airline  FROM airlines a  LEFT JOIN flights f ON a.uid = f.Airline  GROUP BY a.uid  HAVING COUNT(f.FlightNo) < 200;
  SELECT a.Airline  FROM airlines a  LEFT JOIN flights f ON a.uid = f.Airline  GROUP BY a.uid  HAVING COUNT(f.FlightNo) < 200;
  SELECT f.FlightNo FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines';
  SELECT f.FlightNo FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines';
  SELECT FlightNo FROM flights WHERE TRIM(SourceAirport) = 'APG';
  SELECT FlightNo FROM flights WHERE SourceAirport = ' APG';
  SELECT FlightNo FROM flights WHERE TRIM(DestAirport) = 'APG';
  SELECT FlightNo FROM flights WHERE DestAirport = ' APG';
  SELECT f.FlightNo FROM flights f JOIN airports a ON TRIM(f.SourceAirport) = a.AirportCode WHERE a.City = 'Aberdeen ';
  SELECT f.FlightNo FROM flights f JOIN airports a ON TRIM(f.SourceAirport) = a.AirportCode WHERE a.City = 'Aberdeen ';
  SELECT f.FlightNo FROM flights f JOIN airports a ON TRIM(f.DestAirport) = a.AirportCode WHERE TRIM(a.City) = 'Aberdeen';
  SELECT FlightNo FROM flights WHERE TRIM(DestAirport) IN ('APG', 'ABR');
  SELECT COUNT(*)  FROM flights  JOIN airports ON TRIM(flights.DestAirport) = airports.AirportCode  WHERE TRIM(airports.City) IN ('Aberdeen', 'Abilene');
  SELECT COUNT(*) FROM flights JOIN airports ON TRIM(flights.DestAirport) = airports.AirportCode WHERE airports.City IN ('Aberdeen ', 'Abilene ');
  SELECT a.AirportName  FROM airports a  WHERE a.AirportCode NOT IN (     SELECT TRIM(f.SourceAirport) FROM flights f      UNION      SELECT TRIM(f.DestAirport) FROM flights f );
  SELECT a.AirportCode FROM airports a WHERE a.AirportCode NOT IN (     SELECT f.SourceAirport FROM flights f     UNION     SELECT f.DestAirport FROM flights f );
SELECT COUNT(*) FROM employee; 
  SELECT COUNT(*) AS NumberOfEmployees FROM employee;
  SELECT Name FROM employee ORDER BY Age ASC;
  SELECT Name FROM employee ORDER BY Age;
  SELECT City, COUNT(*) AS Number_of_Employees FROM employee GROUP BY City;
  SELECT City, COUNT(Employee_ID) AS NumberOfEmployees FROM employee GROUP BY City;
  SELECT City  FROM employee  WHERE Age < 30  GROUP BY City  HAVING COUNT(*) > 1;
  SELECT City  FROM employee  WHERE Age < 30  GROUP BY City  HAVING COUNT(*) > 1;
  SELECT Location, COUNT(Shop_ID) AS Number_of_shops FROM shop GROUP BY Location;
  SELECT `Location`, COUNT(*) AS `Number_of_shops` FROM `shop` GROUP BY `Location`;
  SELECT Manager_name, District FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop);
  SELECT Manager_name, District FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop);
  SELECT MIN(Number_products) AS min_products, MAX(Number_products) AS max_products FROM shop;
  SELECT MIN(Number_products) AS Min_Products, MAX(Number_products) AS Max_Products FROM shop;
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC; 
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC; 
  SELECT Name  FROM shop  WHERE Number_products > (SELECT AVG(Number_products) FROM shop);
  SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);
  SELECT e.Name  FROM employee e  JOIN (     SELECT Employee_ID, COUNT(*) AS cnt      FROM evaluation      GROUP BY Employee_ID      ORDER BY cnt DESC      LIMIT 1 ) t ON e.Employee_ID = CAST(t.Employee_ID AS INTEGER);
  SELECT e.Name  FROM employee e  WHERE e.Employee_ID = (     SELECT CAST(ev.Employee_ID AS INTEGER)      FROM evaluation ev      GROUP BY ev.Employee_ID      ORDER BY COUNT(*) DESC      LIMIT 1 );
  SELECT e.Name  FROM employee e  JOIN evaluation ev ON e.Employee_ID = CAST(ev.Employee_ID AS INTEGER)  WHERE ev.Bonus = (SELECT MAX(Bonus) FROM evaluation);
  SELECT e.Name  FROM employee e JOIN evaluation ev ON e.Employee_ID = CAST(ev.Employee_ID AS INTEGER) WHERE ev.Bonus = (SELECT MAX(Bonus) FROM evaluation);
  SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);
  SELECT e.Name  FROM employee e LEFT JOIN evaluation ev ON e.Employee_ID = CAST(ev.Employee_ID AS INTEGER) WHERE ev.Employee_ID IS NULL;
  SELECT s.Name  FROM shop s  JOIN hiring h ON s.Shop_ID = h.Shop_ID  GROUP BY s.Shop_ID  ORDER BY COUNT(*) DESC  LIMIT 1;
  SELECT s.Name  FROM shop s  JOIN hiring h ON s.Shop_ID = h.Shop_ID  GROUP BY s.Shop_ID  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT s.Name  FROM shop s  LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID  WHERE h.Shop_ID IS NULL; 
  SELECT s.Name  FROM shop s  LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID  WHERE h.Employee_ID IS NULL;
  SELECT s.Name AS Shop_Name, COUNT(h.Employee_ID) AS Number_of_Employees  FROM shop s  LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID  GROUP BY s.Shop_ID;
  SELECT s.Name, COUNT(h.Employee_ID) AS NumberOfEmployees FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID, s.Name;
SELECT SUM(Bonus) FROM evaluation; 
  SELECT SUM(Bonus) AS Total_Bonus FROM evaluation;
  SELECT * FROM hiring;
  SELECT * FROM hiring;
  SELECT s.District  FROM shop s  GROUP BY s.District  HAVING      SUM(CASE WHEN s.Number_products < 3000 THEN 1 ELSE 0 END) >= 1      AND SUM(CASE WHEN s.Number_products > 10000 THEN 1 ELSE 0 END) >= 1;
  SELECT s.District FROM shop s GROUP BY s.District HAVING SUM(s.Number_products < 3000) > 0 AND SUM(s.Number_products > 10000) > 0;
  SELECT COUNT(DISTINCT Location) FROM shop;
  SELECT COUNT(DISTINCT Location) FROM shop;
  SELECT COUNT(Document_ID) FROM Documents;
  SELECT COUNT(Document_ID) FROM Documents;
  SELECT Document_ID, Document_Name, Document_Description FROM Documents;
  SELECT Document_ID, Document_Name, Document_Description FROM Documents;
  SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%';
  SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%';
  SELECT Document_ID, Template_ID, Document_Description  FROM Documents  WHERE Document_Name = 'Robbin CV';
  SELECT `Document_ID`, `Template_ID`, `Document_Description` FROM `Documents` WHERE `Document_Name` = 'Robbin CV';
  SELECT COUNT(DISTINCT Template_ID) FROM Documents WHERE Template_ID IS NOT NULL;
  SELECT COUNT(DISTINCT d.Template_ID) FROM Documents d;
  SELECT COUNT(Documents.Document_ID)  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  WHERE Templates.Template_Type_Code = 'PPT';
  SELECT COUNT(Documents.Document_ID) FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'PPT';
  SELECT Templates.Template_ID, COUNT(Documents.Document_ID) AS NumberOfDocuments FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID;
  SELECT Template_ID, COUNT(*) AS Usage_Count FROM Documents WHERE Template_ID IS NOT NULL GROUP BY Template_ID;
  SELECT t.Template_ID, t.Template_Type_Code FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID, t.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT t.Template_ID, t.Template_Type_Code FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID, t.Template_Type_Code HAVING COUNT(*) = (     SELECT MAX(cnt)     FROM (         SELECT COUNT(*) AS cnt         FROM Templates t2         JOIN Documents d2 ON t2.Template_ID = d2.Template_ID         GROUP BY t2.Template_ID     ) AS sub );
  SELECT Template_ID FROM Documents WHERE Template_ID IS NOT NULL GROUP BY Template_ID HAVING COUNT(*) > 1;
  SELECT Template_ID FROM Documents WHERE Template_ID IS NOT NULL GROUP BY Template_ID HAVING COUNT(*) > 1;
  SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_ID IS NULL;
  SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Template_ID IS NULL;
  SELECT COUNT(*) FROM Templates;
  SELECT COUNT(*) FROM Templates;
  SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;
  SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;
  SELECT DISTINCT Template_Type_Code FROM Templates;
  SELECT Template_Type_Code FROM Ref_Template_Types;
  SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT');
  SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT');
  SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV';
  SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV';
  SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;
  SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;
  SELECT r.Template_Type_Code, COUNT(t.Template_ID) AS Number_of_Templates FROM Ref_Template_Types r LEFT JOIN Templates t ON r.Template_Type_Code = t.Template_Type_Code GROUP BY r.Template_Type_Code;
  SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) AS NumberOfTemplates FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code;
  SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) = (SELECT COUNT(*) FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1);
  SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Templates GROUP BY Template_Type_Code) AS tmp);
  SELECT r.Template_Type_Code FROM Ref_Template_Types r LEFT JOIN Templates t ON r.Template_Type_Code = t.Template_Type_Code GROUP BY r.Template_Type_Code HAVING COUNT(t.Template_ID) < 3;
  SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code HAVING COUNT(Templates.Template_ID) < 3;
  SELECT MIN(t.Version_Number) AS Smallest_Version, t.Template_Type_Code FROM Templates t;
  SELECT MIN(t.Version_Number), t.Template_Type_Code FROM Templates t WHERE t.Version_Number = (SELECT MIN(Version_Number) FROM Templates);
  SELECT Ref_Template_Types.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Documents.Document_Name = 'Data base';
  SELECT rtt.Template_Type_Code  FROM Documents d  JOIN Templates t ON d.Template_ID = t.Template_ID  JOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code  WHERE d.Document_Name = 'Data base';
  SELECT d.Document_Name FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'BK';
  SELECT d.Document_Name  FROM Documents d  JOIN Templates t ON d.Template_ID = t.Template_ID  WHERE t.Template_Type_Code = 'BK';
  SELECT r.Template_Type_Code, COUNT(d.Document_ID) AS NumberOfDocuments  FROM Ref_Template_Types r  LEFT JOIN Templates t ON r.Template_Type_Code = t.Template_Type_Code  LEFT JOIN Documents d ON t.Template_ID = d.Template_ID  GROUP BY r.Template_Type_Code;
  SELECT Ref_Template_Types.Template_Type_Code, COUNT(Documents.Document_ID) AS Document_Count FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code;
  SELECT Templates.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1;
  SELECT Ref_Template_Types.Template_Type_Code  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  GROUP BY Ref_Template_Types.Template_Type_Code  ORDER BY COUNT(Documents.Document_ID) DESC  LIMIT 1;
  SELECT Template_Type_Code FROM Ref_Template_Types WHERE NOT EXISTS (SELECT 1 FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code);
  SELECT R.Template_Type_Code  FROM Ref_Template_Types R  WHERE NOT EXISTS (     SELECT 1      FROM Templates T      JOIN Documents D ON T.Template_ID = D.Template_ID      WHERE T.Template_Type_Code = R.Template_Type_Code );
  SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
  SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
  SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
  SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
  SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';
  SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';
  SELECT DISTINCT Ref_Template_Types.Template_Type_Description  FROM Documents  INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID  INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code;
  SELECT DISTINCT r.Template_Type_Description FROM Ref_Template_Types r JOIN Templates t ON r.Template_Type_Code = t.Template_Type_Code JOIN Documents d ON t.Template_ID = d.Template_ID;
  SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation';
  SELECT t.Template_ID FROM Templates t JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE r.Template_Type_Description = 'Presentation';
  SELECT COUNT(*) FROM Paragraphs;
  SELECT COUNT(*) FROM Paragraphs;
  SELECT COUNT(p.Paragraph_ID)  FROM Documents d  JOIN Paragraphs p ON d.Document_ID = p.Document_ID  WHERE d.Document_Name = 'Summer Show';
  SELECT COUNT(*) FROM Paragraphs INNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Summer Show';
  SELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea ';
  SELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea';
  SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs p INNER JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Welcome to NY';
  SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Welcome to NY';
  SELECT Paragraphs.Paragraph_Text   FROM Paragraphs   JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID   WHERE Documents.Document_Name = 'Customer reviews';
  SELECT Paragraphs.Paragraph_Text  FROM Paragraphs  JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID  WHERE Documents.Document_Name = 'Customer reviews';
  SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS NumberOfParagraphs FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY d.Document_ID;
  SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID)  FROM Documents  LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  GROUP BY Documents.Document_ID  ORDER BY Documents.Document_ID;
  SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS Number_of_Paragraphs FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name;
  SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS NumberOfParagraphs   FROM Documents d   LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID   GROUP BY d.Document_ID, d.Document_Name;
  SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(Paragraphs.Paragraph_ID) >= 2;
  SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) >= 2;
  SELECT d.Document_ID, d.Document_Name  FROM Documents d  INNER JOIN (     SELECT Document_ID, COUNT(*) AS ParagraphCount      FROM Paragraphs      GROUP BY Document_ID ) p ON d.Document_ID = p.Document_ID  WHERE p.ParagraphCount = (     SELECT MAX(ParagraphCount)      FROM (         SELECT COUNT(*) AS ParagraphCount          FROM Paragraphs          GROUP BY Document_ID     ) AS counts );
  SELECT d.Document_ID, d.Document_Name FROM Documents d JOIN (     SELECT Document_ID, COUNT(*) AS cnt     FROM Paragraphs     GROUP BY Document_ID     ORDER BY cnt DESC     LIMIT 1 ) p_counts ON d.Document_ID = p_counts.Document_ID;
  SELECT d.Document_ID  FROM Documents d  LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID  GROUP BY d.Document_ID  HAVING COUNT(p.Paragraph_ID) = (      SELECT MIN(cnt)      FROM (          SELECT COUNT(p2.Paragraph_ID) AS cnt          FROM Documents d2          LEFT JOIN Paragraphs p2 ON d2.Document_ID = p2.Document_ID          GROUP BY d2.Document_ID      ) AS tmp  );
  SELECT Document_ID FROM Documents LEFT JOIN Paragraphs USING (Document_ID) GROUP BY Document_ID HAVING COUNT(Paragraph_ID) = (     SELECT MIN(cnt)     FROM (         SELECT COUNT(Paragraph_ID) AS cnt         FROM Documents         LEFT JOIN Paragraphs USING (Document_ID)         GROUP BY Document_ID     ) AS t );
  SELECT p.Document_ID  FROM Paragraphs p  GROUP BY p.Document_ID  HAVING COUNT(p.Paragraph_ID) BETWEEN 1 AND 2;
  SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID HAVING COUNT(p.Paragraph_ID) BETWEEN 1 AND 2;
  SELECT p1.Document_ID  FROM Paragraphs p1  JOIN Paragraphs p2 ON p1.Document_ID = p2.Document_ID  WHERE p1.Paragraph_Text = 'Brazil' AND p2.Paragraph_Text = 'Ireland';
  SELECT DISTINCT p1.Document_ID  FROM Paragraphs p1  INNER JOIN Paragraphs p2 ON p1.Document_ID = p2.Document_ID  WHERE p1.Paragraph_Text = 'Brazil' AND p2.Paragraph_Text = 'Ireland';
  SELECT COUNT(*) FROM teacher;
  SELECT COUNT(Teacher_ID) FROM teacher;
  SELECT Name FROM teacher ORDER BY Age ASC;
  SELECT Name FROM teacher ORDER BY Age ASC;
  SELECT `Age`, `Hometown` FROM `teacher`;
  SELECT `Age`, `Hometown` FROM `teacher`;
  SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District';
  SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District';
  SELECT Name FROM teacher WHERE Age IN ('32', '33');
  SELECT Name FROM teacher WHERE Age IN ('32', '33');
  SELECT Hometown FROM teacher ORDER BY CAST(Age AS INTEGER) ASC LIMIT 1;
  SELECT Hometown FROM teacher ORDER BY CAST(Age AS INTEGER) ASC LIMIT 1;
  SELECT Hometown, COUNT(*) AS Number_of_Teachers  FROM teacher  GROUP BY Hometown;
  SELECT Hometown, COUNT(Teacher_ID) FROM teacher GROUP BY Hometown;
  SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM teacher GROUP BY Hometown));
  SELECT Hometown, COUNT(*) AS Count FROM teacher GROUP BY Hometown HAVING COUNT(*) = (     SELECT MAX(cnt)     FROM (         SELECT COUNT(*) AS cnt         FROM teacher         GROUP BY Hometown     ) AS t );
  SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2;
  SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2;
  SELECT t.Name, c.Course FROM course_arrange ca JOIN teacher t ON ca.Teacher_ID = t.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID;
  SELECT t.Name, c.Course FROM teacher t LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID LEFT JOIN course c ON ca.Course_ID = c.Course_ID;
  SELECT teacher.Name, course.Course  FROM teacher  INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  INNER JOIN course ON course_arrange.Course_ID = course.Course_ID  ORDER BY teacher.Name ASC;
  SELECT t.Name, c.Course  FROM teacher t  JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID  JOIN course c ON ca.Course_ID = c.Course_ID  ORDER BY t.Name;
  SELECT t.Name  FROM teacher t  JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID  JOIN course c ON ca.Course_ID = c.Course_ID  WHERE c.Course = 'Math';
  SELECT t.Name  FROM teacher t  JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID  JOIN course c ON ca.Course_ID = c.Course_ID  WHERE c.Course = 'Math';
  SELECT t.Name, COUNT(DISTINCT ca.Course_ID) AS NumberOfCourses FROM teacher t LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Teacher_ID, t.Name;
  SELECT t.Name, COUNT(DISTINCT ca.Course_ID) AS NumberOfCourses FROM teacher t LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Teacher_ID;
  SELECT t.Name  FROM teacher t  JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID  GROUP BY t.Teacher_ID  HAVING COUNT(DISTINCT ca.Course_ID) >= 2;
  SELECT t.Name  FROM teacher t  JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID  GROUP BY t.Teacher_ID  HAVING COUNT(DISTINCT ca.Course_ID) >= 2;
  SELECT t.Name  FROM teacher t  LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID  WHERE ca.Teacher_ID IS NULL;
  SELECT t.Name  FROM teacher t  LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID  WHERE ca.Teacher_ID IS NULL;
  SELECT COUNT(*) FROM visitor WHERE Age < 30;
SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC; 
  SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4;
  SELECT Name, Level_of_membership  FROM visitor  WHERE Level_of_membership > 4  ORDER BY Age DESC;
  SELECT Museum_ID, Name  FROM museum  ORDER BY Num_of_Staff DESC  LIMIT 1;
  SELECT AVG(Num_of_Staff) FROM museum WHERE CAST(Open_Year AS INTEGER) < 2009;
  SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum';
  SELECT Name FROM museum WHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > '2010');
  SELECT v.ID, v.Name, v.Age FROM visitor v WHERE v.ID IN (     SELECT visitor_ID     FROM visit     GROUP BY visitor_ID, Museum_ID     HAVING COUNT(*) > 1 );
  SELECT v.ID, v.Name, v.Level_of_membership FROM visitor v JOIN (     SELECT visitor_ID, SUM(Total_spent) AS total_spent     FROM visit     GROUP BY visitor_ID ) t ON v.ID = CAST(t.visitor_ID AS INTEGER) WHERE t.total_spent = (     SELECT MAX(total_spent)     FROM (         SELECT SUM(Total_spent) AS total_spent         FROM visit         GROUP BY visitor_ID     ) );
  SELECT m.Museum_ID, m.Name  FROM museum m  JOIN (     SELECT Museum_ID, COUNT(*) AS visit_count      FROM visit      GROUP BY Museum_ID ) sub ON m.Museum_ID = sub.Museum_ID  WHERE sub.visit_count = (     SELECT MAX(visit_count)      FROM (         SELECT COUNT(*) AS visit_count          FROM visit          GROUP BY Museum_ID     ) );
  SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit);
  SELECT v.Name, v.Age  FROM visitor v  JOIN visit ON v.ID = CAST(visit.visitor_ID AS INTEGER)  WHERE visit.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit);
  SELECT AVG(Num_of_Ticket) AS Average_Tickets, MAX(Num_of_Ticket) AS Max_Tickets FROM visit;
  SELECT SUM(visit.Total_spent)  FROM visit  JOIN visitor ON visitor.ID = visit.visitor_ID  WHERE visitor.Level_of_membership = 1;
  SELECT v.Name  FROM visitor v  WHERE EXISTS (     SELECT 1      FROM visit vt      JOIN museum m ON vt.Museum_ID = m.Museum_ID      WHERE CAST(vt.visitor_ID AS INTEGER) = v.ID      AND CAST(m.Open_Year AS INTEGER) < 2009 )  AND EXISTS (     SELECT 1      FROM visit vt      JOIN museum m ON vt.Museum_ID = m.Museum_ID      WHERE CAST(vt.visitor_ID AS INTEGER) = v.ID      AND CAST(m.Open_Year AS INTEGER) > 2011 );
  SELECT COUNT(*) FROM visitor WHERE ID NOT IN (SELECT CAST(visitor_ID AS INTEGER) FROM visit WHERE Museum_ID IN (SELECT Museum_ID FROM museum WHERE Open_Year > '2010'));
  SELECT COUNT(*) FROM museum WHERE CAST(Open_Year AS INTEGER) > 2013 OR CAST(Open_Year AS INTEGER) < 2008;
  SELECT COUNT(*) FROM players;
  SELECT COUNT(player_id) FROM players;
SELECT COUNT(*) FROM matches; 
  SELECT COUNT(*) FROM matches;
  SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
  SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
  SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches;
  SELECT AVG(winner_age) AS avg_winner_age, AVG(loser_age) AS avg_loser_age FROM matches;
  SELECT AVG(winner_rank) FROM matches;
  SELECT AVG(winner_rank) AS average_winner_rank FROM matches;
SELECT MIN(loser_rank) AS highest_rank FROM matches; 
  SELECT MIN(loser_rank) AS best_rank FROM matches;
  SELECT COUNT(DISTINCT country_code) FROM players;
  SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT loser_name) FROM matches; 
  SELECT COUNT(DISTINCT loser_name) FROM matches;
  SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
  SELECT tourney_name  FROM matches  GROUP BY tourney_name  HAVING COUNT(*) > 10;
  SELECT p.first_name, p.last_name FROM players p WHERE EXISTS (     SELECT 1 FROM matches m1 WHERE m1.winner_id = p.player_id AND m1.year = 2013 ) AND EXISTS (     SELECT 1 FROM matches m2 WHERE m2.winner_id = p.player_id AND m2.year = 2016 );
  SELECT p.first_name, p.last_name FROM players p WHERE p.player_id IN (     SELECT winner_id FROM matches WHERE year = 2013     INTERSECT     SELECT winner_id FROM matches WHERE year = 2016 );
  SELECT COUNT(*) AS number_of_matches FROM matches WHERE year IN (2013, 2016);
  SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);
  SELECT p.country_code, p.first_name  FROM players p  WHERE EXISTS (     SELECT 1      FROM matches m      WHERE m.winner_id = p.player_id      AND m.tourney_name = 'WTA Championships' )  AND EXISTS (     SELECT 1      FROM matches m      WHERE m.winner_id = p.player_id      AND m.tourney_name = 'Australian Open' );
  SELECT p.first_name, p.country_code FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name IN ('WTA Championships', 'Australian Open') GROUP BY p.player_id HAVING COUNT(DISTINCT m.tourney_name) = 2;
  SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;
  SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;
  SELECT first_name, last_name FROM players ORDER BY birth_date;
  SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY birth_date;
  SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;
  SELECT first_name || ' ' || last_name AS full_name FROM players WHERE hand = 'L' ORDER BY birth_date;
SELECT p.first_name, p.country_code  FROM players p  JOIN rankings r ON p.player_id = r.player_id  GROUP BY p.player_id  ORDER BY SUM(r.tours) DESC  LIMIT 1; 
  SELECT p.first_name, p.country_code  FROM players p  JOIN rankings r ON p.player_id = r.player_id  ORDER BY r.tours DESC  LIMIT 1;
  SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT year, COUNT(*) AS match_count  FROM matches  GROUP BY year  ORDER BY match_count DESC  LIMIT 1;
  SELECT p.first_name, p.last_name, r.ranking_points FROM (     SELECT winner_id, COUNT(*) AS num_wins     FROM matches     GROUP BY winner_id     ORDER BY num_wins DESC     LIMIT 1 ) AS mw JOIN players p ON mw.winner_id = p.player_id JOIN (     SELECT player_id, ranking_points     FROM rankings     WHERE (player_id, ranking_date) IN (         SELECT player_id, MAX(ranking_date)         FROM rankings         GROUP BY player_id     ) ) AS r ON p.player_id = r.player_id;
  SELECT p.first_name || ' ' || p.last_name AS winner_name, r.ranking_points FROM (SELECT winner_id, COUNT(*) AS total_wins FROM matches GROUP BY winner_id ORDER BY total_wins DESC LIMIT 1) AS top_winner JOIN players p ON top_winner.winner_id = p.player_id JOIN (SELECT player_id, ranking_points FROM (SELECT player_id, ranking_points, ROW_NUMBER() OVER (PARTITION BY player_id ORDER BY ranking_date DESC) AS rn FROM rankings) WHERE rn = 1) r ON p.player_id = r.player_id;
  SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;
  SELECT p.first_name, p.last_name FROM players p WHERE p.player_id = (SELECT r.player_id FROM rankings r WHERE r.player_id IN (SELECT DISTINCT m.winner_id FROM matches m WHERE m.tourney_name = 'Australian Open') ORDER BY r.ranking_points DESC LIMIT 1);
  SELECT      CONCAT(p1.first_name, ' ', p1.last_name) AS winner_name,     CONCAT(p2.first_name, ' ', p2.last_name) AS loser_name FROM matches m JOIN players p1 ON m.winner_id = p1.player_id JOIN players p2 ON m.loser_id = p2.player_id WHERE m.minutes = (SELECT MAX(minutes) FROM matches);
  SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches);
  SELECT p.first_name, AVG(r.ranking) AS average_ranking  FROM players p  LEFT JOIN rankings r ON p.player_id = r.player_id  GROUP BY p.player_id, p.first_name;
  SELECT p.first_name, AVG(r.ranking) AS average_ranking FROM players p LEFT JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name;
  SELECT p.player_id, p.first_name, COALESCE(SUM(r.ranking_points), 0) AS total_ranking_points  FROM players p  LEFT JOIN rankings r ON p.player_id = r.player_id  GROUP BY p.player_id, p.first_name;
  SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p LEFT JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name;
  SELECT country_code, COUNT(player_id) AS number_of_players FROM players GROUP BY country_code;
  SELECT country_code, COUNT(player_id) AS num_players FROM players GROUP BY country_code;
  SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1;
  SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1;
  SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;
  SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;
  SELECT ranking_date, SUM(tours) AS total_tours  FROM rankings  GROUP BY ranking_date;
  SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date;
  SELECT year, COUNT(*) AS number_of_matches FROM matches GROUP BY year ORDER BY year;
  SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year ORDER BY year;
  SELECT winner_name, winner_rank  FROM matches  ORDER BY winner_age  LIMIT 3;
SELECT winner_name, winner_rank  FROM matches  ORDER BY winner_age  LIMIT 3; 
  SELECT COUNT(DISTINCT m.winner_id)  FROM matches m  JOIN players p ON m.winner_id = p.player_id  WHERE p.hand = 'L'  AND EXISTS (     SELECT 1      FROM matches      WHERE (winner_id = p.player_id OR loser_id = p.player_id)      AND tourney_name = 'WTA Championships' );
  SELECT COUNT(DISTINCT m.winner_id)  FROM matches m  JOIN players p ON m.winner_id = p.player_id  WHERE m.tourney_name = 'WTA Championships' AND p.hand = 'L';
  SELECT p.first_name, p.country_code, p.birth_date  FROM players p  JOIN matches m ON p.player_id = m.winner_id  WHERE m.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches);
  SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN (     SELECT winner_id, SUM(winner_rank_points) total_points     FROM matches     GROUP BY winner_id     ORDER BY total_points DESC     LIMIT 1 ) t ON p.player_id = t.winner_id;
  SELECT hand, COUNT(*) AS number_of_players FROM players GROUP BY hand;
  SELECT hand, COUNT(*) AS count FROM players GROUP BY hand;
  SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';
  SELECT name, tonnage FROM ship ORDER BY name DESC;
  SELECT name, date, result FROM battle;
  SELECT MAX(killed) AS max_death_toll, MIN(killed) AS min_death_toll FROM death;
  SELECT AVG(injured) FROM death;
  SELECT SUM(d.killed) AS total_killed, SUM(d.injured) AS total_injured FROM death d JOIN ship s ON d.caused_by_ship_id = s.id WHERE s.tonnage = 't';
  SELECT name, result FROM battle WHERE COALESCE(bulgarian_commander, '') != 'Boril';
  SELECT DISTINCT battle.id, battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'Brig';
  SELECT battle.id, battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle JOIN death ON ship.id = death.caused_by_ship_id GROUP BY battle.id, battle.name HAVING SUM(death.killed) > 10;
  SELECT s.id, s.name FROM ship s JOIN death d ON s.id = d.caused_by_ship_id GROUP BY s.id, s.name ORDER BY SUM(d.injured) DESC LIMIT 1;
  SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';
  SELECT COUNT(DISTINCT result) FROM battle;
  SELECT COUNT(*)  FROM battle  WHERE NOT EXISTS (     SELECT 1      FROM ship      WHERE ship.lost_in_battle = battle.id      AND ship.tonnage = '225' );
  SELECT b.name, b.date  FROM battle b  JOIN ship s1 ON b.id = s1.lost_in_battle  JOIN ship s2 ON b.id = s2.lost_in_battle  WHERE s1.name = 'Lettice' AND s2.name = 'HMS Atalanta';
  SELECT b.name, b.result, b.bulgarian_commander FROM battle b WHERE b.id NOT IN (     SELECT lost_in_battle     FROM ship     WHERE location = 'English Channel' );
  SELECT note FROM death WHERE note LIKE '%East%';
  SELECT line_1, line_2 FROM Addresses;
  SELECT line_1, line_2 FROM Addresses;
  SELECT COUNT(*) FROM Courses;
  SELECT COUNT(course_id) FROM Courses;
  SELECT course_description FROM Courses WHERE course_name = 'math';
  SELECT course_description FROM Courses WHERE course_name = 'math';
  SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
  SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
  SELECT d.department_id, d.department_name FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id GROUP BY d.department_id, d.department_name ORDER BY COUNT(dp.degree_program_id) DESC LIMIT 1;
  SELECT d.department_id, d.department_name  FROM Departments d  JOIN Degree_Programs dp ON d.department_id = dp.department_id  GROUP BY d.department_id  ORDER BY COUNT(*) DESC  LIMIT 1;
  SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;
  SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;
  SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs;
  SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs;
  SELECT COUNT(*) FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id WHERE d.department_name = 'engineering';
  SELECT COUNT(*)  FROM Departments d  JOIN Degree_Programs dp ON d.department_id = dp.department_id  WHERE d.department_name = 'engineering';
  SELECT section_name, section_description FROM Sections;
  SELECT section_name, section_description FROM Sections;
  SELECT c.course_id, c.course_name FROM Courses c LEFT JOIN Sections s ON c.course_id = s.course_id GROUP BY c.course_id, c.course_name HAVING COUNT(s.section_id) <= 2;
  SELECT c.course_id, c.course_name FROM Courses c LEFT JOIN Sections s ON c.course_id = s.course_id GROUP BY c.course_id HAVING COUNT(s.section_id) < 2;
  SELECT section_name FROM Sections ORDER BY section_name DESC;
  SELECT section_name  FROM Sections  ORDER BY section_name DESC;
  SELECT s.semester_id, s.semester_name FROM Student_Enrolment se JOIN Semesters s ON se.semester_id = s.semester_id GROUP BY se.semester_id ORDER BY COUNT(*) DESC LIMIT 1;
  WITH SemesterStudentCount AS (     SELECT semester_id, COUNT(DISTINCT student_id) AS num_students     FROM Student_Enrolment     GROUP BY semester_id ) SELECT s.semester_id, s.semester_name FROM Semesters s JOIN SemesterStudentCount ssc ON s.semester_id = ssc.semester_id WHERE ssc.num_students = (SELECT MAX(num_students) FROM SemesterStudentCount);
  SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';
  SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';
  SELECT s.first_name, s.middle_name, s.last_name, s.student_id  FROM Students s  WHERE s.student_id IN (     SELECT se.student_id      FROM Student_Enrolment se      GROUP BY se.student_id, se.semester_id      HAVING COUNT(DISTINCT se.degree_program_id) >= 2 );
  SELECT s.first_name, s.middle_name, s.last_name, s.student_id  FROM Students s  WHERE s.student_id IN (     SELECT se.student_id      FROM Student_Enrolment se      GROUP BY se.student_id, se.semester_id      HAVING COUNT(DISTINCT se.degree_program_id) = 2 );
  SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = 'Bachelor';
  SELECT s.first_name, s.middle_name, s.last_name  FROM Students s  JOIN Student_Enrolment se ON s.student_id = se.student_id  JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id  WHERE dp.degree_summary_name = 'Bachelor';
  SELECT dp.degree_summary_name  FROM Student_Enrolment se  JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id  GROUP BY dp.degree_summary_name  ORDER BY COUNT(DISTINCT se.student_id) DESC  LIMIT 1;
  SELECT dp.degree_summary_name FROM Degree_Programs dp JOIN (     SELECT degree_program_id, COUNT(DISTINCT student_id) AS student_count     FROM Student_Enrolment     GROUP BY degree_program_id ) se ON dp.degree_program_id = se.degree_program_id ORDER BY se.student_count DESC LIMIT 1;
  SELECT dp.degree_program_id, dp.degree_summary_name  FROM Degree_Programs dp  JOIN (     SELECT degree_program_id, COUNT(DISTINCT student_id) AS student_count      FROM Student_Enrolment      GROUP BY degree_program_id ) ec ON dp.degree_program_id = ec.degree_program_id  WHERE ec.student_count = (     SELECT MAX(student_count)      FROM (         SELECT COUNT(DISTINCT student_id) AS student_count          FROM Student_Enrolment          GROUP BY degree_program_id     ) max_ec );
  SELECT dp.degree_program_id, dp.degree_summary_name, dp.degree_summary_description FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id ORDER BY COUNT(DISTINCT se.student_id) DESC LIMIT 1;
  SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.student_enrolment_id) AS num_enrollments  FROM Students s  JOIN Student_Enrolment se ON s.student_id = se.student_id  GROUP BY s.student_id  HAVING num_enrollments = (SELECT MAX(count_enrollments) FROM (SELECT COUNT(student_enrolment_id) AS count_enrollments FROM Student_Enrolment GROUP BY student_id) AS subquery)  ORDER BY num_enrollments DESC;
  SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(*) AS num_enrollments  FROM Students s  JOIN Student_Enrolment se ON s.student_id = se.student_id  GROUP BY s.student_id  ORDER BY num_enrollments DESC  LIMIT 1;
  SELECT s.semester_name FROM Semesters s LEFT JOIN Student_Enrolment se ON s.semester_id = se.semester_id WHERE se.semester_id IS NULL;
  SELECT s.semester_name  FROM Semesters s  LEFT JOIN Student_Enrolment se ON s.semester_id = se.semester_id  WHERE se.semester_id IS NULL;
  SELECT DISTINCT c.course_name  FROM Courses c  INNER JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id;
  SELECT DISTINCT c.course_name  FROM Courses c  JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id;
  SELECT c.course_name  FROM Student_Enrolment_Courses sec  JOIN Courses c ON sec.course_id = c.course_id  GROUP BY sec.course_id  ORDER BY COUNT(*) DESC  LIMIT 1;
  SELECT c.course_name  FROM Courses c  INNER JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id  INNER JOIN Student_Enrolment se ON sec.student_enrolment_id = se.student_enrolment_id  GROUP BY c.course_id  ORDER BY COUNT(DISTINCT se.student_id) DESC  LIMIT 1;
  SELECT s.last_name  FROM Students s  JOIN Addresses a ON s.current_address_id = a.address_id  LEFT JOIN Student_Enrolment se ON s.student_id = se.student_id  WHERE a.state_province_county = 'North Carolina'  AND se.student_id IS NULL;
  SELECT s.last_name  FROM Students s  JOIN Addresses a ON s.current_address_id = a.address_id  LEFT JOIN Student_Enrolment se ON s.student_id = se.student_id  WHERE a.state_province_county = 'North Carolina'  AND se.student_id IS NULL;
  SELECT t.transcript_id, t.transcript_date FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id HAVING COUNT(tc.student_course_id) >= 2;
  SELECT t.transcript_id, t.transcript_date  FROM Transcripts t  JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id  GROUP BY t.transcript_id  HAVING COUNT(tc.student_course_id) >= 2;
  SELECT s.cell_mobile_number  FROM Students s  WHERE s.first_name = 'Timmothy' AND s.last_name = 'Ward';
  SELECT s.cell_mobile_number  FROM Students s  WHERE s.first_name = 'Timmothy' AND s.last_name = 'Ward';
  SELECT first_name, middle_name, last_name  FROM Students  ORDER BY date_first_registered ASC  LIMIT 1;
  SELECT first_name, middle_name, last_name  FROM Students  ORDER BY date_first_registered  LIMIT 1;
  SELECT s.first_name, s.middle_name, s.last_name  FROM Students s  WHERE s.date_left IS NOT NULL  ORDER BY s.date_left ASC  LIMIT 1;
  SELECT s.first_name, s.middle_name, s.last_name FROM Students s WHERE s.date_left = (SELECT MIN(date_left) FROM Students) LIMIT 1;
  SELECT s.first_name  FROM Students s  WHERE s.current_address_id != s.permanent_address_id;
  SELECT s.first_name  FROM Students s  WHERE s.current_address_id <> s.permanent_address_id;
  SELECT a.address_id, a.line_1, a.line_2, a.line_3 FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id GROUP BY s.current_address_id ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT a.address_id, a.line_1, a.line_2 FROM Addresses a JOIN (     SELECT address_id, COUNT(*) AS cnt     FROM (         SELECT current_address_id AS address_id FROM Students         UNION ALL         SELECT permanent_address_id AS address_id FROM Students     ) combined     GROUP BY address_id     ORDER BY cnt DESC     LIMIT 1 ) max_addr ON a.address_id = max_addr.address_id;
  SELECT DATE(AVG(JULIANDAY(transcript_date))) AS average_date FROM Transcripts;
  SELECT AVG(UNIX_TIMESTAMP(transcript_date)) FROM Transcripts;
  SELECT transcript_date, other_details  FROM Transcripts  ORDER BY transcript_date ASC  LIMIT 1;
  SELECT MIN(transcript_date) AS earliest_date, transcript_id, other_details FROM Transcripts;
  SELECT COUNT(*) FROM Transcripts;
  SELECT COUNT(*) FROM Transcripts;
  SELECT MAX(transcript_date) AS last_transcript_date FROM Transcripts;
  SELECT MAX(transcript_date) FROM Transcripts;
WITH CourseCounts AS (     SELECT student_course_id, COUNT(*) AS transcript_count     FROM Transcript_Contents     GROUP BY student_course_id ) SELECT student_course_id, transcript_count FROM CourseCounts WHERE transcript_count = (SELECT MAX(transcript_count) FROM CourseCounts); 
  SELECT COUNT(*) AS max_count, sec.student_enrolment_id  FROM Transcript_Contents tc  JOIN Student_Enrolment_Courses sec ON tc.student_course_id = sec.student_course_id  GROUP BY sec.course_id, sec.student_enrolment_id  ORDER BY max_count DESC  LIMIT 1;
  SELECT t.transcript_id, t.transcript_date FROM Transcripts t LEFT JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id, t.transcript_date HAVING COUNT(tc.student_course_id) = (     SELECT MIN(cnt)     FROM (         SELECT COUNT(tc2.student_course_id) AS cnt         FROM Transcripts t2         LEFT JOIN Transcript_Contents tc2 ON t2.transcript_id = tc2.transcript_id         GROUP BY t2.transcript_id     ) AS sub );
  SELECT t.transcript_id, t.transcript_date FROM Transcripts t LEFT JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id ORDER BY COUNT(tc.student_course_id) ASC LIMIT 1;
  SELECT s.semester_name  FROM Semesters s  WHERE EXISTS (     SELECT 1      FROM Student_Enrolment se      JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id      WHERE se.semester_id = s.semester_id AND dp.degree_summary_name = 'Master' )  AND EXISTS (     SELECT 1      FROM Student_Enrolment se      JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id      WHERE se.semester_id = s.semester_id AND dp.degree_summary_name = 'Bachelor' );
  SELECT se.semester_id  FROM Student_Enrolment se  JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id  GROUP BY se.semester_id  HAVING COUNT(DISTINCT CASE WHEN dp.degree_summary_name = 'Master' THEN 1 END) > 0     AND COUNT(DISTINCT CASE WHEN dp.degree_summary_name = 'Bachelor' THEN 1 END) > 0;
  SELECT COUNT(DISTINCT current_address_id) FROM Students;
  SELECT DISTINCT a.*  FROM Addresses a  JOIN Students s  ON a.address_id = s.current_address_id OR a.address_id = s.permanent_address_id;
  SELECT * FROM Students ORDER BY last_name DESC, first_name DESC, middle_name DESC;
  SELECT * FROM Students ORDER BY last_name DESC;
  SELECT * FROM Sections WHERE section_name = 'h';
  SELECT section_description FROM Sections WHERE section_name = 'h';
  SELECT Students.first_name  FROM Students  JOIN Addresses ON Students.permanent_address_id = Addresses.address_id  WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582';
  SELECT Students.first_name  FROM Students  JOIN Addresses ON Students.permanent_address_id = Addresses.address_id  WHERE Addresses.country = 'Haiti'  OR Students.cell_mobile_number = '09700166582';
  SELECT Title FROM Cartoon ORDER BY Title;
  SELECT Title FROM Cartoon ORDER BY Title ASC;
  SELECT * FROM Cartoon WHERE Directed_by = 'Ben Jones';
  SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';
  SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
  SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
  SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;
  SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;
  SELECT Title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti');
  SELECT Title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti');
  SELECT Country, COUNT(id) AS num_channels  FROM TV_Channel  GROUP BY Country  ORDER BY num_channels DESC  LIMIT 1;
  SELECT Country, COUNT(id) AS num_channels FROM TV_Channel GROUP BY Country ORDER BY num_channels DESC LIMIT 1;
  SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel;
  SELECT COUNT(DISTINCT series_name) AS different_series, COUNT(DISTINCT Content) AS different_contents FROM TV_Channel;
  SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
  SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
  SELECT `Package_Option` FROM `TV_Channel` WHERE `series_name` = 'Sky Radio';
  SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';
  SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
  SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
  SELECT Language, COUNT(*) AS num_channels  FROM TV_Channel  GROUP BY Language  HAVING COUNT(*) = (      SELECT MIN(cnt)      FROM (          SELECT COUNT(*) AS cnt          FROM TV_Channel          GROUP BY Language      )  );
  WITH LanguageCounts AS (     SELECT Language, COUNT(*) AS num_channels     FROM TV_Channel     WHERE Language IS NOT NULL     GROUP BY Language ) SELECT Language, num_channels FROM LanguageCounts WHERE num_channels = (SELECT MIN(num_channels) FROM LanguageCounts);
  SELECT Language, COUNT(*) AS NumberOfChannels  FROM TV_Channel  GROUP BY Language;
  SELECT Language, COUNT(id) AS Number_of_Channels  FROM TV_Channel  GROUP BY Language;
  SELECT TV_Channel.series_name  FROM TV_Channel  JOIN Cartoon ON TV_Channel.id = Cartoon.Channel  WHERE Cartoon.Title = 'The Rise of the Blue Beetle!';
  SELECT TV_Channel.series_name  FROM TV_Channel  JOIN Cartoon ON TV_Channel.id = Cartoon.Channel  WHERE Cartoon.Title = 'The Rise of the Blue Beetle';
  SELECT c.Title  FROM Cartoon c  INNER JOIN TV_Channel tvc ON c.Channel = tvc.id  WHERE tvc.series_name = 'Sky Radio';
  SELECT Cartoon.Title  FROM Cartoon  JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  WHERE TV_Channel.series_name = 'Sky Radio';
  SELECT Episode FROM TV_series ORDER BY CAST(Rating AS REAL) DESC;
  SELECT Episode  FROM TV_series  ORDER BY CAST(Rating AS REAL) DESC;
  SELECT Episode, Rating FROM TV_series ORDER BY CAST(Rating AS REAL) DESC LIMIT 3;
  SELECT Episode, Rating FROM TV_series ORDER BY CAST(Rating AS REAL) DESC LIMIT 3;
  SELECT MIN(Share) AS min_share, MAX(Share) AS max_share FROM TV_series;
  SELECT MAX(Share), MIN(Share) FROM TV_series;
  SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';
  SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';
  SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';
  SELECT TV_series.Weekly_Rank  FROM TV_series  WHERE TV_series.Episode = 'A Love of a Lifetime';
  SELECT TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = 'A Love of a Lifetime';
  SELECT TV_Channel.series_name  FROM TV_Channel  JOIN TV_series ON TV_Channel.id = TV_series.Channel  WHERE TV_series.Episode = 'A Love of a Lifetime';
  SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
  SELECT tvs.Episode  FROM TV_series tvs  JOIN TV_Channel tc ON tvs.Channel = tc.id  WHERE tc.series_name = 'Sky Radio';
  SELECT Directed_by, COUNT(*) AS Number_of_Cartoons FROM Cartoon WHERE Directed_by IS NOT NULL GROUP BY Directed_by;
  SELECT Directed_by, COUNT(id) AS count FROM Cartoon GROUP BY Directed_by;
  SELECT Production_code, Channel FROM Cartoon WHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon);
  SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1;
  SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'Yes';
  SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'Yes';
  SELECT DISTINCT TV_Channel.Country  FROM TV_Channel  JOIN Cartoon ON TV_Channel.id = Cartoon.Channel  WHERE Cartoon.Written_by LIKE '%Todd Casey%';
  SELECT DISTINCT TV_Channel.Country  FROM TV_Channel  JOIN Cartoon ON TV_Channel.id = Cartoon.Channel  WHERE Cartoon.Written_by = 'Todd Casey';
  SELECT DISTINCT t1.Country  FROM TV_Channel t1  WHERE NOT EXISTS (     SELECT 1      FROM Cartoon c      JOIN TV_Channel t2 ON c.Channel = t2.id      WHERE t2.Country = t1.Country AND c.Written_by = 'Todd Casey' );
SELECT DISTINCT Country  FROM TV_Channel  WHERE Country NOT IN (     SELECT DISTINCT TV_Channel.Country      FROM Cartoon      JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id      WHERE Cartoon.Written_by = 'Todd Casey' ); 
  SELECT DISTINCT TV_Channel.series_name, TV_Channel.Country  FROM TV_Channel  JOIN Cartoon ON TV_Channel.id = Cartoon.Channel  WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang')  GROUP BY TV_Channel.id  HAVING COUNT(DISTINCT Cartoon.Directed_by) = 2;
  SELECT DISTINCT TV_Channel.series_name, TV_Channel.Country  FROM TV_Channel  JOIN Cartoon AS c1 ON TV_Channel.id = c1.Channel AND c1.Directed_by = 'Ben Jones'  JOIN Cartoon AS c2 ON TV_Channel.id = c2.Channel AND c2.Directed_by = 'Michael Chang';
  SELECT Pixel_aspect_ratio_PAR, Country  FROM TV_Channel  WHERE Language != 'English';
  SELECT Pixel_aspect_ratio_PAR, Country  FROM TV_Channel  WHERE Language != 'English';
  SELECT id  FROM TV_Channel  WHERE Country IN (     SELECT Country      FROM TV_Channel      GROUP BY Country      HAVING COUNT(*) > 2 );
  SELECT TV_Channel.id  FROM TV_Channel  JOIN TV_series ON TV_Channel.id = TV_series.Channel  GROUP BY TV_Channel.id  HAVING COUNT(TV_series.id) > 2;
  SELECT TV_Channel.id  FROM TV_Channel  WHERE TV_Channel.id NOT IN (     SELECT Cartoon.Channel      FROM Cartoon      WHERE Cartoon.Directed_by = 'Ben Jones' );
  SELECT TV_Channel.id  FROM TV_Channel  WHERE TV_Channel.id NOT IN (     SELECT DISTINCT Cartoon.Channel      FROM Cartoon      WHERE Cartoon.Directed_by = 'Ben Jones' );
  SELECT DISTINCT c.Package_Option  FROM TV_Channel c  WHERE c.id NOT IN (     SELECT Channel      FROM Cartoon      WHERE Directed_by = 'Ben Jones' );
  SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT DISTINCT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones');
SELECT COUNT(Poker_Player_ID) FROM poker_player; 
  SELECT COUNT(*) FROM poker_player;
  SELECT p.Name, pp.Earnings  FROM poker_player pp  JOIN people p ON pp.People_ID = p.People_ID  ORDER BY pp.Earnings DESC;
  SELECT people.Name, poker_player.Earnings  FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  ORDER BY poker_player.Earnings DESC;
  SELECT pp.Final_Table_Made, pp.Best_Finish FROM poker_player pp;
  SELECT p.Name, pp.Final_Table_Made, pp.Best_Finish FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID;
  SELECT AVG(Earnings) FROM poker_player;
  SELECT AVG(Earnings) FROM poker_player;
SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player); 
  SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player);
  SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;
  SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;
  SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID;
  SELECT p.Name  FROM poker_player pp  JOIN people p ON pp.People_ID = p.People_ID;
  SELECT p.Name  FROM poker_player pp  JOIN people p ON pp.People_ID = p.People_ID  WHERE pp.Earnings > 300000;
  SELECT p.Name  FROM people p  JOIN poker_player pp ON p.People_ID = pp.People_ID  WHERE pp.Earnings > 300000;
  SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Final_Table_Made ASC;
  SELECT p.Name  FROM poker_player pp  JOIN people p ON pp.People_ID = p.People_ID  ORDER BY pp.Final_Table_Made ASC;
  SELECT p.Birth_Date FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.Earnings = (SELECT MIN(Earnings) FROM poker_player);
  SELECT p.Birth_Date  FROM people p  JOIN poker_player pp ON p.People_ID = pp.People_ID  WHERE pp.Earnings = (SELECT MIN(Earnings) FROM poker_player);
  SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height = (SELECT MAX(Height) FROM people);
  SELECT pp.Money_Rank  FROM poker_player pp  JOIN people p ON pp.People_ID = p.People_ID  WHERE p.Height = (SELECT MAX(Height) FROM people);
  SELECT AVG(poker_player.Earnings)  FROM poker_player  INNER JOIN people ON poker_player.People_ID = people.People_ID  WHERE people.Height > 200;
  SELECT AVG(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200;
  SELECT people.Name  FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  ORDER BY poker_player.Earnings DESC;
  SELECT p.Name  FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC;
  SELECT Nationality, COUNT(*) AS NumberOfPeople  FROM people  GROUP BY Nationality;
SELECT Nationality, COUNT(*) AS Number_of_People FROM people GROUP BY Nationality; 
  SELECT Nationality  FROM people  GROUP BY Nationality  ORDER BY COUNT(*) DESC  LIMIT 1;
  SELECT Nationality  FROM people  GROUP BY Nationality  ORDER BY COUNT(*) DESC  LIMIT 1;
  SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(People_ID) >= 2;
  SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;
  SELECT Name, Birth_Date FROM people ORDER BY Name ASC;
  SELECT Name, Birth_Date FROM people ORDER BY Name ASC;
  SELECT Name FROM people WHERE Nationality != 'Russia';
  SELECT Name FROM people WHERE Nationality != 'Russia';
SELECT p.Name  FROM people p  LEFT JOIN poker_player pp ON p.People_ID = pp.People_ID  WHERE pp.People_ID IS NULL; 
  SELECT p.Name  FROM people p LEFT JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.People_ID IS NULL;
  SELECT COUNT(DISTINCT Nationality) FROM people;
  SELECT COUNT(DISTINCT Nationality) FROM people;
  SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE;
  SELECT contestant_number, contestant_name  FROM CONTESTANTS  ORDER BY contestant_name DESC;
  SELECT vote_id, phone_number, state FROM VOTES;
  SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE;
  SELECT MAX(created) FROM VOTES WHERE state = 'CA';
  SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway';
  SELECT DISTINCT state, created FROM VOTES;
  SELECT c.contestant_number, c.contestant_name  FROM CONTESTANTS c  INNER JOIN (     SELECT contestant_number      FROM VOTES      GROUP BY contestant_number      HAVING COUNT(*) >= 2 ) v ON c.contestant_number = v.contestant_number;
  SELECT c.contestant_number, c.contestant_name  FROM CONTESTANTS c  JOIN (     SELECT contestant_number, COUNT(*) AS votes      FROM VOTES      GROUP BY contestant_number      HAVING COUNT(*) = (         SELECT COUNT(*)          FROM VOTES          GROUP BY contestant_number          ORDER BY 1          LIMIT 1     ) ) v ON c.contestant_number = v.contestant_number;
  SELECT COUNT(*) AS num_votes FROM VOTES WHERE state IN ('NY', 'CA');
  SELECT COUNT(*) AS count FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES);
  SELECT SUBSTR(CAST(phone_number AS TEXT), 1, 3) AS area_code FROM VOTES GROUP BY area_code ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT v.created, v.state, v.phone_number  FROM VOTES v  JOIN CONTESTANTS c ON v.contestant_number = c.contestant_number  WHERE c.contestant_name = 'Tabatha Gehling';
  SELECT DISTINCT SUBSTR(CAST(phone_number AS VARCHAR), 1, 3) AS area_code FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling' INTERSECT SELECT DISTINCT SUBSTR(CAST(phone_number AS VARCHAR), 1, 3) AS area_code FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Kelly Clauss';
  SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%';
SELECT Name FROM country WHERE IndepYear > 1950; 
  SELECT Name FROM country WHERE IndepYear > 1950;
  SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';
  SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean'; 
  SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean';
  SELECT Continent FROM country WHERE Name = 'Anguilla';
  SELECT country.Continent FROM country WHERE country.Name = 'Anguilla';
  SELECT country.Region FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Name = 'Kabul';
  SELECT country.Region  FROM city  JOIN country ON city.CountryCode = country.Code  WHERE city.Name = 'Kabul';
  SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.Name = 'Aruba' ORDER BY cl.Percentage DESC LIMIT 1;
  SELECT cl.Language  FROM countrylanguage cl  JOIN country c ON cl.CountryCode = c.Code  WHERE c.Name = 'Aruba'  ORDER BY cl.Percentage DESC  LIMIT 1;
  SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
  SELECT `Population`, `LifeExpectancy` FROM `country` WHERE `Name` = 'Brazil';
  SELECT `Region`, `Population` FROM `country` WHERE `Name` = 'Angola';
  SELECT Region, Population FROM country WHERE Name = 'Angola';
  SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa';
  SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa';
  SELECT Name FROM country WHERE Continent = 'Asia' AND LifeExpectancy IS NOT NULL ORDER BY LifeExpectancy ASC LIMIT 1;
  SELECT Name FROM country WHERE Continent = 'Asia' AND LifeExpectancy IS NOT NULL ORDER BY LifeExpectancy ASC LIMIT 1;
  SELECT SUM(country.Population) AS TotalPopulation, MAX(country.GNP) AS MaxGNP FROM country WHERE country.Continent = 'Asia';
  SELECT SUM(c.Population) AS TotalPopulation, MAX(co.GNP) AS LargestGNP FROM country co JOIN city c ON co.Code = c.CountryCode WHERE co.Continent = 'Asia';
  SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic';
  SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic';
  SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe');
  SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe');
  SELECT SUM(Population) FROM city WHERE District = 'Gelderland';
  SELECT SUM(Population) FROM city WHERE District = 'Gelderland';
  SELECT AVG(GNP) AS AverageGNP, SUM(Population) AS TotalPopulation FROM country WHERE GovernmentForm = 'US territory';
  SELECT AVG(GNP), SUM(Population) FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T') AND GovernmentForm = 'US Territory';
  SELECT COUNT(DISTINCT Language) FROM countrylanguage;
  SELECT COUNT(DISTINCT Language) FROM countrylanguage;
  SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
  SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
  SELECT COUNT(*) FROM countrylanguage JOIN country ON country.Code = countrylanguage.CountryCode WHERE country.Name = 'Aruba';
  SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba');
  SELECT COUNT(*) FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.Name = 'Afghanistan' AND cl.IsOfficial = 'T';
  SELECT COUNT(*)  FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code  WHERE country.Name = 'Afghanistan' AND countrylanguage.IsOfficial = 'T';
  SELECT c.Name  FROM country c  JOIN (     SELECT CountryCode, COUNT(*) AS num_languages      FROM countrylanguage      GROUP BY CountryCode      ORDER BY num_languages DESC      LIMIT 1 ) AS cl  ON c.Code = cl.CountryCode;
  SELECT c.Name  FROM country c  JOIN (     SELECT CountryCode, COUNT(*) AS lang_count      FROM countrylanguage      GROUP BY CountryCode      ORDER BY lang_count DESC      LIMIT 1 ) AS lc ON c.Code = lc.CountryCode;
  SELECT c.Continent  FROM country c  JOIN countrylanguage cl ON c.Code = cl.CountryCode  GROUP BY c.Continent  ORDER BY COUNT(DISTINCT cl.Language) DESC  LIMIT 1;
  SELECT c.Continent  FROM country c  JOIN countrylanguage cl ON c.Code = cl.CountryCode  GROUP BY c.Continent  ORDER BY COUNT(DISTINCT cl.Language) DESC  LIMIT 1;
  SELECT COUNT(*) FROM (     SELECT CountryCode FROM countrylanguage      WHERE Language IN ('Dutch','English')      GROUP BY CountryCode      HAVING COUNT(DISTINCT Language)=2 ) AS t;
  SELECT COUNT(*) FROM (SELECT CountryCode FROM countrylanguage WHERE Language IN ('Dutch','English') GROUP BY CountryCode HAVING COUNT(DISTINCT Language)=2);
  SELECT c.Name  FROM country c  WHERE c.Code IN (     SELECT cl1.CountryCode      FROM countrylanguage cl1      WHERE cl1.Language = 'English' )  AND c.Code IN (     SELECT cl2.CountryCode      FROM countrylanguage cl2      WHERE cl2.Language = 'French' );
  SELECT c.Name  FROM country c  JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English'  JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French';
  SELECT c.Name  FROM country c  JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' AND cl1.IsOfficial = 'T'  JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' AND cl2.IsOfficial = 'T';
  SELECT c.Name  FROM country c  JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' AND cl1.IsOfficial = 'T'  JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' AND cl2.IsOfficial = 'T';
  SELECT COUNT(DISTINCT country.Continent) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = 'Chinese';
  SELECT COUNT(DISTINCT c.Continent)  FROM countrylanguage cl  JOIN country c ON cl.CountryCode = c.Code  WHERE cl.Language = 'Chinese';
  SELECT DISTINCT c.Region  FROM country c  JOIN countrylanguage cl ON c.Code = cl.CountryCode  WHERE cl.Language IN ('English', 'Dutch');
  SELECT DISTINCT c.Region  FROM country c  JOIN countrylanguage cl ON c.Code = cl.CountryCode  WHERE cl.Language IN ('Dutch', 'English');
  SELECT DISTINCT c.Name  FROM country c  JOIN countrylanguage cl ON c.Code = cl.CountryCode  WHERE cl.Language IN ('English', 'Dutch')  AND cl.IsOfficial = 'T';
  SELECT DISTINCT c.Name  FROM country c  JOIN countrylanguage cl ON c.Code = cl.CountryCode  WHERE cl.Language IN ('English', 'Dutch') AND cl.IsOfficial = 'T';
  SELECT cl.Language  FROM countrylanguage cl  JOIN country c ON cl.CountryCode = c.Code  WHERE c.Continent = 'Asia'  GROUP BY cl.Language  ORDER BY SUM((cl.Percentage / 100) * c.Population) DESC  LIMIT 1;
  SELECT cl.Language  FROM countrylanguage cl  JOIN country c ON cl.CountryCode = c.Code  WHERE c.Continent = 'Asia'  GROUP BY cl.Language  ORDER BY COUNT(DISTINCT cl.CountryCode) DESC  LIMIT 1;
  SELECT cl.Language  FROM countrylanguage cl  JOIN country c ON cl.CountryCode = c.Code  WHERE c.GovernmentForm = 'Republic'  GROUP BY cl.Language  HAVING COUNT(DISTINCT cl.CountryCode) = 1;
  SELECT cl.Language  FROM countrylanguage cl  JOIN country c ON cl.CountryCode = c.Code  WHERE c.GovernmentForm = 'Republic'  AND cl.Language IN (     SELECT Language      FROM countrylanguage      GROUP BY Language      HAVING COUNT(DISTINCT CountryCode) = 1 );
  SELECT city.Name  FROM city  JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode  WHERE countrylanguage.Language = 'English'  ORDER BY city.Population DESC  LIMIT 1;
  SELECT `city`.`Name`  FROM `city`  JOIN `countrylanguage` ON `city`.`CountryCode` = `countrylanguage`.`CountryCode`  WHERE `countrylanguage`.`Language` = 'English'  ORDER BY `city`.`Population` DESC  LIMIT 1;
  SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1;
  SELECT `Name`, `Population`, `LifeExpectancy` FROM `country` WHERE `Continent` = 'Asia' ORDER BY `SurfaceArea` DESC LIMIT 1;
  SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T');
  SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T');
  SELECT SUM(c.Population) FROM country c WHERE c.Code NOT IN (SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'English');
  SELECT SUM(country.Population)  FROM country  WHERE country.Code NOT IN (     SELECT CountryCode      FROM countrylanguage      WHERE Language = 'English' );
  SELECT cl.Language  FROM countrylanguage cl  JOIN country c ON cl.CountryCode = c.Code  WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T';
  SELECT cl.Language  FROM country c  JOIN countrylanguage cl ON c.Code = cl.CountryCode  WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T';
  SELECT COUNT(DISTINCT cl.Language)  FROM country c  JOIN countrylanguage cl ON c.Code = cl.CountryCode  WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T';
  SELECT COUNT(DISTINCT cl.Language)  FROM country c  JOIN countrylanguage cl ON c.Code = cl.CountryCode  WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T';
  SELECT Name  FROM country  WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe');
  SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe');
  SELECT c1.Name  FROM country c1  WHERE c1.Continent = 'Africa'  AND c1.Population < ANY (SELECT c2.Population FROM country c2 WHERE c2.Continent = 'Asia');
  SELECT c1.Name  FROM country c1  WHERE c1.Continent = 'Africa'  AND c1.Population < (SELECT MIN(c2.Population) FROM country c2 WHERE c2.Continent = 'Asia');
  SELECT c1.Name  FROM country c1  WHERE c1.Continent = 'Asia'  AND c1.Population > ALL (     SELECT c2.Population      FROM country c2      WHERE c2.Continent = 'Africa' );
  SELECT c1.Name  FROM country c1  WHERE c1.Continent = 'Asia'  AND c1.Population > (SELECT MAX(c2.Population) FROM country c2 WHERE c2.Continent = 'Africa');
  SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');
  SELECT Code  FROM country  WHERE Code NOT IN (     SELECT CountryCode      FROM countrylanguage      WHERE Language = 'English' );
  SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language <> 'English';
  SELECT DISTINCT CountryCode  FROM countrylanguage  WHERE Language <> 'English';
  SELECT country.Code  FROM country  WHERE country.GovernmentForm <> 'Republic'  AND country.Code NOT IN (     SELECT CountryCode      FROM countrylanguage      WHERE Language = 'English' );
SELECT Code FROM country  WHERE GovernmentForm != 'Republic'  AND Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English'); 
  SELECT city.Name  FROM city  JOIN country ON city.CountryCode = country.Code  WHERE country.Continent = 'Europe'  AND country.Code NOT IN (     SELECT CountryCode      FROM countrylanguage      WHERE Language = 'English' AND IsOfficial = 'T' );
  SELECT c.Name  FROM city c  JOIN country co ON c.CountryCode = co.Code  WHERE co.Continent = 'Europe'  AND NOT EXISTS (     SELECT 1      FROM countrylanguage cl      WHERE cl.CountryCode = co.Code      AND cl.Language = 'English'      AND cl.IsOfficial = 'T' );
  SELECT DISTINCT city.Name  FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.Continent = 'Asia'    AND countrylanguage.Language = 'Chinese'    AND countrylanguage.IsOfficial = 'T';
  SELECT DISTINCT c.Name  FROM city c  JOIN country co ON c.CountryCode = co.Code  JOIN countrylanguage cl ON co.Code = cl.CountryCode  WHERE co.Continent = 'Asia'    AND cl.Language = 'Chinese'    AND cl.IsOfficial = 'T';
  SELECT Name, IndepYear, SurfaceArea  FROM country  WHERE Population = (SELECT MIN(Population) FROM country);
  SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country);
  SELECT Name, Population, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);
  SELECT Name, Population, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);
  SELECT c.Name, COUNT(cl.Language) AS NumberOfLanguages  FROM country c  JOIN countrylanguage cl ON c.Code = cl.CountryCode  GROUP BY c.Code  HAVING NumberOfLanguages >= 3;
  SELECT c.Name, COUNT(*) AS NumberOfLanguages FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code GROUP BY cl.CountryCode HAVING COUNT(*) > 2;
  SELECT District, COUNT(*) AS NumberOfCities  FROM city  WHERE Population > (SELECT AVG(Population) FROM city)  GROUP BY District;
  SELECT District, COUNT(*)  FROM city  WHERE Population > (SELECT AVG(Population) FROM city)  GROUP BY District;
  SELECT GovernmentForm, SUM(Population) AS TotalPopulation  FROM country  GROUP BY GovernmentForm  HAVING AVG(LifeExpectancy) > 72;
  SELECT `GovernmentForm`, SUM(`Population`) AS `TotalPopulation`  FROM `country`  GROUP BY `GovernmentForm`  HAVING AVG(`LifeExpectancy`) > 72;
  SELECT Continent, AVG(LifeExpectancy) AS AverageLifeExpectancy, SUM(Population) AS TotalPopulation FROM country GROUP BY Continent HAVING AverageLifeExpectancy < 72;
  SELECT Continent, SUM(Population) AS TotalPopulation, AVG(LifeExpectancy) AS AvgLifeExpectancy FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72;
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5; 
  SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
  SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
  SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population ASC LIMIT 3; 
  SELECT Name FROM country ORDER BY Population ASC LIMIT 3;
  SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
  SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
  SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;
  SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;
  SELECT SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AverageArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;
  SELECT SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AverageSurfaceArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;
  SELECT * FROM city WHERE Population BETWEEN 160000 AND 900000;
  SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
  SELECT Language  FROM countrylanguage  GROUP BY Language  HAVING COUNT(CountryCode) = (     SELECT MAX(cnt)      FROM (         SELECT COUNT(CountryCode) AS cnt          FROM countrylanguage          GROUP BY Language     ) );
  SELECT Language  FROM countrylanguage  GROUP BY Language  HAVING COUNT(CountryCode) = (     SELECT MAX(CountryCount)      FROM (         SELECT COUNT(CountryCode) AS CountryCount          FROM countrylanguage          GROUP BY Language     ) );
  SELECT cl.CountryCode, cl.Language, cl.Percentage  FROM countrylanguage cl  WHERE cl.Percentage = (     SELECT MAX(cl2.Percentage)      FROM countrylanguage cl2      WHERE cl2.CountryCode = cl.CountryCode );
  SELECT cl.CountryCode, cl.Language  FROM countrylanguage cl  INNER JOIN (     SELECT CountryCode, MAX(Percentage) AS MaxPercentage      FROM countrylanguage      GROUP BY CountryCode ) sub  ON cl.CountryCode = sub.CountryCode AND cl.Percentage = sub.MaxPercentage;
  SELECT COUNT(*) FROM countrylanguage AS cl INNER JOIN (SELECT CountryCode, MAX(Percentage) AS max_pct FROM countrylanguage GROUP BY CountryCode) AS sub ON cl.CountryCode = sub.CountryCode AND cl.Percentage = sub.max_pct WHERE cl.Language = 'Spanish';
  SELECT COUNT(*) FROM countrylanguage AS cl WHERE cl.Language = 'Spanish' AND cl.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = cl.CountryCode);
  SELECT CountryCode  FROM countrylanguage  WHERE Language = 'Spanish'  AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish');
  SELECT cl.CountryCode  FROM countrylanguage cl  WHERE cl.Language = 'Spanish'  AND cl.Percentage = (     SELECT MAX(cl2.Percentage)      FROM countrylanguage cl2      WHERE cl2.CountryCode = cl.CountryCode );
  SELECT COUNT(*) FROM conductor;
  SELECT COUNT(*) FROM conductor;
  SELECT Name FROM conductor ORDER BY Age ASC;
  SELECT Name FROM conductor ORDER BY Age;
  SELECT Name FROM conductor WHERE Nationality != 'USA';
  SELECT Name  FROM conductor  WHERE Nationality != 'USA';
  SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC; 
  SELECT AVG(Attendance) AS Average_Attendance FROM `show`;
  SELECT AVG(Attendance) FROM `show`;
  SELECT MAX(CAST(REPLACE(Share, '%', '') AS REAL)) AS Max_Share, MIN(CAST(REPLACE(Share, '%', '') AS REAL)) AS Min_Share FROM performance WHERE Type != 'Live final';
  SELECT MAX(Share), MIN(Share) FROM performance WHERE Type != 'Live final';
  SELECT COUNT(DISTINCT Nationality) FROM conductor;
  SELECT COUNT(DISTINCT Nationality) FROM conductor;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC; 
  SELECT Name FROM conductor ORDER BY Year_of_Work DESC;
  SELECT Name FROM conductor WHERE Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor);
  SELECT Name FROM conductor WHERE Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor);
  SELECT c.Name, o.Orchestra  FROM conductor c  JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID;
  SELECT c.Name, o.Orchestra FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID;
  SELECT c.Name  FROM conductor c  JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID  GROUP BY c.Conductor_ID  HAVING COUNT(*) > 1;
  SELECT c.Name  FROM conductor c  JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID  GROUP BY c.Conductor_ID  HAVING COUNT(*) > 1;
  SELECT c.Name  FROM conductor c  JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID  GROUP BY c.Conductor_ID  ORDER BY COUNT(*) DESC  LIMIT 1;
  SELECT c.Name  FROM conductor c  JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID  GROUP BY c.Conductor_ID  ORDER BY COUNT(o.Orchestra_ID) DESC  LIMIT 1;
  SELECT DISTINCT c.Name  FROM conductor c  JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID  WHERE o.Year_of_Founded > 2008;
  SELECT DISTINCT c.Name  FROM conductor c  JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID  WHERE o.Year_of_Founded > 2008;
  SELECT Record_Company, COUNT(Orchestra_ID) AS Number_of_Orchestras FROM orchestra GROUP BY Record_Company;
  SELECT Record_Company, COUNT(*) AS Number_of_Orchestras FROM orchestra GROUP BY Record_Company;
  SELECT Major_Record_Format, COUNT(*) AS Count  FROM orchestra  GROUP BY Major_Record_Format  ORDER BY Count ASC;
  SELECT Major_Record_Format, COUNT(*) AS Frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY Frequency DESC;
  SELECT Record_Company  FROM orchestra  GROUP BY Record_Company  ORDER BY COUNT(*) DESC  LIMIT 1;
  SELECT Record_Company  FROM orchestra  GROUP BY Record_Company  ORDER BY COUNT(*) DESC  LIMIT 1;
  SELECT o.Orchestra FROM orchestra o LEFT JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID WHERE p.Orchestra_ID IS NULL;
  SELECT o.Orchestra  FROM orchestra o  LEFT JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID  WHERE p.Performance_ID IS NULL;
  SELECT o1.Record_Company FROM orchestra o1 JOIN orchestra o2 ON o1.Record_Company = o2.Record_Company WHERE o1.Year_of_Founded < 2003 AND o2.Year_of_Founded > 2003 GROUP BY o1.Record_Company;
  SELECT o1.Record_Company  FROM orchestra o1  JOIN orchestra o2 ON o1.Record_Company = o2.Record_Company  WHERE o1.Year_of_Founded < 2003 AND o2.Year_of_Founded > 2003  GROUP BY o1.Record_Company;
  SELECT COUNT(*)  FROM orchestra  WHERE Major_Record_Format IN ('CD', 'DVD');
  SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');
  SELECT o.Year_of_Founded FROM orchestra o WHERE o.Orchestra_ID IN (     SELECT p.Orchestra_ID     FROM performance p     GROUP BY p.Orchestra_ID     HAVING COUNT(*) > 1 );
  SELECT o.Year_of_Founded FROM orchestra o JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID GROUP BY o.Orchestra_ID HAVING COUNT(p.Performance_ID) > 1;
  SELECT COUNT(*) FROM Highschooler;
  SELECT COUNT(*) FROM Highschooler;
  SELECT name, grade FROM Highschooler;
  SELECT name, grade FROM Highschooler;
  SELECT grade FROM Highschooler;
  SELECT name, grade FROM Highschooler;
  SELECT grade FROM Highschooler WHERE name = 'Kyle';
  SELECT grade FROM Highschooler WHERE name = 'Kyle';
  SELECT name FROM Highschooler WHERE grade = 10;
  SELECT name FROM Highschooler WHERE grade = 10;
  SELECT ID FROM Highschooler WHERE name = 'Kyle';
  SELECT ID FROM Highschooler WHERE name = 'Kyle';
  SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
  SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
  SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade;
  SELECT grade, COUNT(ID) AS count FROM Highschooler GROUP BY grade;
  SELECT grade  FROM Highschooler  GROUP BY grade  ORDER BY COUNT(*) DESC  LIMIT 1;
  SELECT grade  FROM Highschooler  GROUP BY grade  HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Highschooler GROUP BY grade) AS sub);
  SELECT grade  FROM Highschooler  GROUP BY grade  HAVING COUNT(*) >= 4;
  SELECT grade  FROM Highschooler  GROUP BY grade  HAVING COUNT(ID) >= 4;
  SELECT Highschooler.ID, COUNT(Friend.friend_id) AS num_friends  FROM Highschooler  LEFT JOIN Friend ON Highschooler.ID = Friend.student_id  GROUP BY Highschooler.ID;
  SELECT h.ID, COUNT(f.friend_id) AS friend_count FROM Highschooler h LEFT JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID;
  SELECT h.name, COUNT(f.friend_id) AS num_friends FROM Highschooler h LEFT JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID, h.name;
  SELECT H.name, COUNT(F.friend_id) AS num_friends FROM Highschooler H LEFT JOIN Friend F ON H.ID = F.student_id GROUP BY H.ID, H.name;
  SELECT h.name FROM Highschooler h JOIN (     SELECT student_id, COUNT(*) AS cnt     FROM Friend     GROUP BY student_id ) f ON h.ID = f.student_id WHERE f.cnt = (     SELECT MAX(cnt)     FROM (         SELECT COUNT(*) AS cnt         FROM Friend         GROUP BY student_id     ) AS max_count );
  SELECT h.name FROM Highschooler h JOIN (     SELECT student_id, COUNT(*) AS cnt     FROM Friend     GROUP BY student_id ) AS friend_counts ON h.ID = friend_counts.student_id WHERE friend_counts.cnt = (     SELECT MAX(cnt)     FROM (         SELECT COUNT(*) AS cnt         FROM Friend         GROUP BY student_id     ) AS max_counts );
  SELECT h.name FROM Highschooler h JOIN (     SELECT student_id     FROM Friend     GROUP BY student_id     HAVING COUNT(*) >= 3 ) f ON h.ID = f.student_id;
  SELECT H.name FROM Highschooler H JOIN (     SELECT student_id, COUNT(*) AS friend_count     FROM Friend     GROUP BY student_id     HAVING friend_count >= 3 ) F ON H.ID = F.student_id;
  SELECT h2.name  FROM Highschooler h1  JOIN Friend f ON h1.ID = f.student_id  JOIN Highschooler h2 ON f.friend_id = h2.ID  WHERE h1.name = 'Kyle';
  SELECT h2.name  FROM Highschooler h1  JOIN Friend f ON h1.ID = f.student_id  JOIN Highschooler h2 ON f.friend_id = h2.ID  WHERE h1.name = 'Kyle';
  SELECT COUNT(*)  FROM Friend  WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
  SELECT COUNT(*)  FROM Friend  WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
  SELECT ID  FROM Highschooler  WHERE ID NOT IN (SELECT student_id FROM Friend);
  SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);
  SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);
  SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);
  SELECT DISTINCT F.student_id FROM Friend F JOIN Likes L ON F.student_id = L.liked_id;
  SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes;
  SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend) AND ID IN (SELECT liked_id FROM Likes);
  SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend) AND ID IN (SELECT liked_id FROM Likes);
  SELECT H.ID AS student_id, COUNT(L.liked_id) AS like_count FROM Highschooler H LEFT JOIN Likes L ON H.ID = L.liked_id GROUP BY H.ID;
  SELECT student_id, COUNT(*) AS num_likes FROM Likes GROUP BY student_id;
  SELECT H.name, COUNT(*) AS num_likes FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.ID, H.name;
  SELECT h.name, COUNT(l.liked_id) AS num_likes FROM Highschooler h JOIN Likes l ON h.ID = l.liked_id GROUP BY h.ID, h.name;
  SELECT H.name  FROM Highschooler H JOIN Likes L ON H.ID = L.liked_id GROUP BY H.ID ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT H.name FROM Highschooler H JOIN (     SELECT liked_id, COUNT(*) AS cnt     FROM Likes     GROUP BY liked_id ) L ON H.ID = L.liked_id ORDER BY L.cnt DESC LIMIT 1;
  SELECT h.name FROM Highschooler h JOIN (     SELECT liked_id     FROM Likes     GROUP BY liked_id     HAVING COUNT(*) >= 2 ) l ON h.ID = l.liked_id;
  SELECT H.name FROM Highschooler H JOIN (     SELECT liked_id     FROM Likes     GROUP BY liked_id     HAVING COUNT(*) >= 2 ) L ON H.ID = L.liked_id;
  SELECT H.name  FROM Highschooler H  JOIN (     SELECT student_id      FROM Friend      GROUP BY student_id      HAVING COUNT(*) >= 2 ) F ON H.ID = F.student_id  WHERE H.grade > 5;
  SELECT H.name  FROM Highschooler H  JOIN Friend F ON H.ID = F.student_id  WHERE H.grade > 5  GROUP BY H.ID  HAVING COUNT(F.friend_id) >= 2;
  SELECT COUNT(*) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id WHERE Highschooler.name = 'Kyle';
  SELECT COUNT(*)  FROM Likes  WHERE liked_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
  SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend);
  SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend);
  SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);
  SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);
  SELECT DISTINCT o.state  FROM Owners o  INNER JOIN Professionals p ON o.state = p.state;
  SELECT DISTINCT o.state  FROM Owners o  INNER JOIN Professionals p ON o.state = p.state;
  SELECT AVG(CAST(age AS DECIMAL)) AS average_age FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments);
  SELECT AVG(CAST(d.age AS DECIMAL)) AS average_age FROM Dogs d WHERE d.dog_id IN (SELECT DISTINCT dog_id FROM Treatments);
  SELECT p.professional_id, p.last_name, p.cell_number FROM Professionals p WHERE p.state = 'Indiana' OR p.professional_id IN (     SELECT t.professional_id     FROM Treatments t     GROUP BY t.professional_id     HAVING COUNT(*) > 2 );
  SELECT p.professional_id, p.last_name, p.cell_number  FROM Professionals p  WHERE p.state = 'Indiana'  UNION  SELECT p.professional_id, p.last_name, p.cell_number  FROM Professionals p  JOIN (      SELECT professional_id      FROM Treatments      GROUP BY professional_id      HAVING COUNT(*) > 2  ) t ON p.professional_id = t.professional_id;
  SELECT d.name FROM Dogs d LEFT JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY d.dog_id, d.name HAVING COALESCE(SUM(t.cost_of_treatment), 0) <= 1000;
  SELECT Dogs.name  FROM Dogs  LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id  GROUP BY Dogs.dog_id  HAVING COALESCE(SUM(Treatments.cost_of_treatment), 0) <= 1000;
  SELECT first_name  FROM (     SELECT first_name FROM Owners      UNION      SELECT first_name FROM Professionals ) AS combined_names  WHERE first_name NOT IN (SELECT name FROM Dogs);
  SELECT first_name FROM (     SELECT first_name FROM Professionals      UNION      SELECT first_name FROM Owners ) AS combined_names WHERE first_name NOT IN (SELECT name FROM Dogs);
  SELECT p.professional_id, p.role_code, p.email_address FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.professional_id IS NULL;
  SELECT p.professional_id, p.role_code, p.email_address FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.professional_id IS NULL;
  SELECT o.owner_id, o.first_name, o.last_name FROM Owners o WHERE o.owner_id IN (     SELECT d.owner_id     FROM Dogs d     GROUP BY d.owner_id     HAVING COUNT(*) = (         SELECT MAX(cnt)         FROM (             SELECT COUNT(*) as cnt             FROM Dogs             GROUP BY owner_id         ) t     ) );
  SELECT o.owner_id, o.first_name, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id, o.first_name, o.last_name ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT p.professional_id, p.role_code AS role, p.first_name  FROM Professionals p  JOIN Treatments t ON p.professional_id = t.professional_id  GROUP BY p.professional_id, p.role_code, p.first_name  HAVING COUNT(t.treatment_id) >= 2;
  SELECT p.professional_id, p.role_code, p.first_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.role_code, p.first_name HAVING COUNT(t.treatment_id) >= 2;
  SELECT b.breed_name  FROM Dogs d  JOIN Breeds b ON d.breed_code = b.breed_code  GROUP BY d.breed_code  ORDER BY COUNT(*) DESC  LIMIT 1;
  SELECT Breeds.breed_name  FROM Dogs  JOIN Breeds ON Dogs.breed_code = Breeds.breed_code  GROUP BY Dogs.breed_code  ORDER BY COUNT(*) DESC  LIMIT 1;
  SELECT o.owner_id, o.last_name FROM Treatments t JOIN Dogs d ON t.dog_id = d.dog_id JOIN Owners o ON d.owner_id = o.owner_id GROUP BY o.owner_id, o.last_name ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT o.owner_id, o.last_name  FROM Owners o  JOIN Dogs d ON o.owner_id = d.owner_id  JOIN Treatments t ON d.dog_id = t.dog_id  GROUP BY o.owner_id, o.last_name  ORDER BY SUM(t.cost_of_treatment) DESC  LIMIT 1;
  SELECT tt.treatment_type_description  FROM Treatments t  JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code  GROUP BY t.treatment_type_code  ORDER BY SUM(t.cost_of_treatment)  LIMIT 1;
  SELECT Treatment_Types.treatment_type_description  FROM Treatments  JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code  GROUP BY Treatments.treatment_type_code  ORDER BY SUM(Treatments.cost_of_treatment) ASC  LIMIT 1;
  SELECT o.owner_id, o.zip_code FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.zip_code ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;
  SELECT o.owner_id, o.zip_code FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.zip_code ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;
  SELECT p.professional_id, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id HAVING COUNT(DISTINCT t.treatment_type_code) >= 2;
  SELECT p.professional_id, p.cell_number FROM Professionals p INNER JOIN (     SELECT professional_id     FROM Treatments     GROUP BY professional_id     HAVING COUNT(DISTINCT treatment_type_code) >= 2 ) t ON p.professional_id = t.professional_id;
  SELECT DISTINCT p.first_name, p.last_name  FROM Professionals p  JOIN Treatments t ON p.professional_id = t.professional_id  WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments);
  SELECT p.first_name, p.last_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments);
  SELECT t.date_of_treatment, p.first_name  FROM Treatments t  JOIN Professionals p ON t.professional_id = p.professional_id;
  SELECT Treatments.date_of_treatment, Professionals.first_name  FROM Treatments  JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
  SELECT t.cost_of_treatment, tt.treatment_type_description  FROM Treatments t  JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;
  SELECT t.cost_of_treatment, tt.treatment_type_description  FROM Treatments t  JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;
  SELECT o.first_name, o.last_name, s.size_description FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Sizes s ON d.size_code = s.size_code;
  SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;
  SELECT o.first_name, d.name  FROM Owners o  INNER JOIN Dogs d ON o.owner_id = d.owner_id;
  SELECT o.first_name, d.name  FROM Owners o  JOIN Dogs d ON o.owner_id = d.owner_id;
  SELECT Dogs.name AS dog_name, Treatments.date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.breed_code = (     SELECT breed_code     FROM Dogs     GROUP BY breed_code     ORDER BY COUNT(*) ASC     LIMIT 1 );
  SELECT Dogs.name, Treatments.date_of_treatment  FROM Dogs  JOIN Treatments ON Dogs.dog_id = Treatments.dog_id  WHERE Dogs.breed_code = (     SELECT breed_code      FROM Dogs      GROUP BY breed_code      ORDER BY COUNT(*)      LIMIT 1 );
  SELECT o.first_name, d.name  FROM Owners o  JOIN Dogs d ON o.owner_id = d.owner_id  WHERE o.state = 'Virginia';
  SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia';
  SELECT DISTINCT d.date_arrived, d.date_departed  FROM Dogs d  INNER JOIN Treatments t ON d.dog_id = t.dog_id;
  SELECT DISTINCT d.date_arrived, d.date_departed  FROM Dogs d  JOIN Treatments t ON d.dog_id = t.dog_id;
  SELECT o.last_name  FROM Owners o  JOIN Dogs d ON o.owner_id = d.owner_id  WHERE d.date_of_birth = (SELECT MAX(date_of_birth) FROM Dogs);
  SELECT o.last_name  FROM Owners o  JOIN Dogs d ON o.owner_id = d.owner_id  WHERE d.date_of_birth = (SELECT MAX(date_of_birth) FROM Dogs);
  SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin');
  SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin');
  SELECT date_arrived, date_departed FROM Dogs;
  SELECT date_arrived, date_departed FROM Dogs;
  SELECT COUNT(DISTINCT dog_id) FROM Treatments;
  SELECT COUNT(DISTINCT dog_id) FROM Treatments;
  SELECT COUNT(DISTINCT professional_id) FROM Treatments;
SELECT COUNT(DISTINCT professional_id) FROM Treatments; 
  SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%';
  SELECT role_code, street, city, state  FROM Professionals  WHERE city LIKE '%West%';
  SELECT first_name, last_name, email_address  FROM Owners  WHERE state LIKE '%North%';
  SELECT first_name, last_name, email_address  FROM Owners  WHERE state LIKE '%North%';
  SELECT COUNT(*) FROM Dogs WHERE CAST(age AS DECIMAL) < (SELECT AVG(CAST(age AS DECIMAL)) FROM Dogs);
  SELECT COUNT(*)  FROM Dogs  WHERE CAST(age AS DECIMAL) < (SELECT AVG(CAST(age AS DECIMAL)) FROM Dogs);
  SELECT cost_of_treatment  FROM Treatments  ORDER BY date_of_treatment DESC  LIMIT 1;
  SELECT cost_of_treatment FROM Treatments WHERE date_of_treatment = (SELECT MAX(date_of_treatment) FROM Treatments);
  SELECT COUNT(*)  FROM Dogs d LEFT JOIN Treatments t ON d.dog_id = t.dog_id WHERE t.treatment_id IS NULL;
  SELECT COUNT(*)  FROM Dogs  WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);
  SELECT COUNT(*) FROM Owners o WHERE NOT EXISTS (SELECT 1 FROM Dogs d WHERE d.owner_id = o.owner_id AND d.date_departed IS NULL);
  SELECT COUNT(*)  FROM Owners  WHERE owner_id NOT IN (SELECT owner_id FROM Dogs);
  SELECT COUNT(*)  FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.professional_id IS NULL;
SELECT COUNT(*)  FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.professional_id IS NULL; 
  SELECT name, age, weight  FROM Dogs  WHERE abandoned_yn = 'Y';
  SELECT name, age, weight  FROM Dogs  WHERE abandoned_yn = '1';
  SELECT AVG(CAST(age AS DECIMAL)) AS average_age FROM Dogs;
  SELECT AVG(CAST(age AS DECIMAL(10, 2))) AS average_age FROM Dogs;
  SELECT MAX(CAST(age AS UNSIGNED)) AS oldest_age FROM Dogs;
  SELECT MAX(CAST(age AS UNSIGNED)) AS oldest_age FROM Dogs;
  SELECT charge_type, charge_amount FROM Charges;
  SELECT charge_type, charge_amount FROM Charges;
  SELECT MAX(charge_amount) FROM Charges;
  SELECT MAX(charge_amount) FROM Charges;
  SELECT email_address, cell_number, home_phone FROM Professionals;
  SELECT email_address, cell_number, home_phone FROM Professionals;
  SELECT B.breed_name, S.size_description FROM Breeds B CROSS JOIN Sizes S;
  SELECT DISTINCT Breeds.breed_name, Sizes.size_description  FROM Dogs  JOIN Breeds ON Dogs.breed_code = Breeds.breed_code  JOIN Sizes ON Dogs.size_code = Sizes.size_code;
  SELECT p.first_name, tt.treatment_type_description FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;
  SELECT p.first_name, tt.treatment_type_description FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;
  SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer; 
  SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
  SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
  SELECT Birth_Year, Citizenship FROM singer;
  SELECT Birth_Year, Citizenship FROM singer;
  SELECT Name FROM singer WHERE Citizenship != 'France';
  SELECT Name FROM singer WHERE Citizenship != 'France';
  SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);
  SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);
  SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer);
  SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;
  SELECT Citizenship, COUNT(*) AS NumberOfSingers FROM singer GROUP BY Citizenship;
  SELECT Citizenship, COUNT(Singer_ID) AS NumberOfSingers FROM singer GROUP BY Citizenship;
  SELECT Citizenship  FROM singer  GROUP BY Citizenship  ORDER BY COUNT(*) DESC  LIMIT 1;
  SELECT Citizenship, COUNT(*) AS count FROM singer GROUP BY Citizenship ORDER BY count DESC LIMIT 1;
  SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship;
  SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth  FROM singer  GROUP BY Citizenship;
  SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;
  SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;
  SELECT DISTINCT s.Name FROM singer s JOIN song sg ON s.Singer_ID = sg.Singer_ID WHERE sg.Sales > 300000;
  SELECT DISTINCT s.Name  FROM singer s  JOIN song so ON s.Singer_ID = so.Singer_ID  WHERE so.Sales > 300000;
  SELECT s.Name  FROM singer s JOIN song sg ON s.Singer_ID = sg.Singer_ID GROUP BY s.Singer_ID HAVING COUNT(sg.Song_ID) > 1;
  SELECT singer.Name  FROM singer  JOIN song ON singer.Singer_ID = song.Singer_ID  GROUP BY singer.Singer_ID  HAVING COUNT(song.Song_ID) > 1;
  SELECT singer.Name, SUM(song.Sales) AS Total_Sales  FROM singer  LEFT JOIN song ON singer.Singer_ID = song.Singer_ID  GROUP BY singer.Singer_ID;
  SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer LEFT JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name;
  SELECT singer.Name  FROM singer  LEFT JOIN song ON singer.Singer_ID = song.Singer_ID  WHERE song.Song_ID IS NULL;
  SELECT Name  FROM singer  LEFT JOIN song ON singer.Singer_ID = song.Singer_ID  WHERE song.Song_ID IS NULL;
  SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955;
  SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955;
  SELECT COUNT(*) FROM Other_Available_Features;
  SELECT rft.feature_type_name  FROM Ref_Feature_Types rft  JOIN Other_Available_Features oaf ON rft.feature_type_code = oaf.feature_type_code  WHERE oaf.feature_name = 'AirCon';
  SELECT Ref_Property_Types.property_type_description  FROM Properties  JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code;
  SELECT property_name  FROM Properties  WHERE property_type_code IN ('House', 'Apartment')    AND room_count > 1;
