  SELECT COUNT(*) FROM singer;
  SELECT COUNT(*) FROM singer;
  SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
  SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
  SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'France';
  SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'France';
  SELECT Song_Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);
  SELECT Song_Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);
  SELECT DISTINCT Country FROM singer WHERE Age > 20;
  SELECT DISTINCT Country FROM singer WHERE Age > 20;
  SELECT Country, COUNT(*) FROM singer GROUP BY Country;
  SELECT Country, COUNT(Singer_ID) FROM singer GROUP BY Country;
  SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer);
  SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer);
  SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
  SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
  SELECT MAX(Capacity) AS MaxCapacity, AVG(Capacity) AS AvgCapacity FROM stadium;
  SELECT AVG(Capacity) AS AverageCapacity, MAX(Capacity) AS MaxCapacity FROM stadium;
  SELECT Name, Capacity FROM stadium ORDER BY Average DESC LIMIT 1;
  SELECT Name, Capacity FROM stadium ORDER BY Average DESC LIMIT 1;
  SELECT COUNT(*) FROM concert WHERE Year IN ('2014', '2015');
  SELECT COUNT(*) FROM concert WHERE Year IN ('2014', '2015');
  SELECT s.Name, COUNT(*) FROM stadium s JOIN concert c ON s.Stadium_ID = CAST(c.Stadium_ID AS INT) GROUP BY s.Name;
  SELECT s.Name, COUNT(*) AS num_concerts FROM concert c JOIN stadium s ON s.Stadium_ID = CAST(c.Stadium_ID AS INT) GROUP BY s.Stadium_ID, s.Name;
  SELECT s.Name, s.Capacity FROM stadium s JOIN (SELECT CAST(Stadium_ID AS INT) AS Stadium_ID COUNT(*) AS cnt FROM concert WHERE Year >= '2014' GROUP BY CAST(Stadium_ID AS INT)) AS sc ON s.Stadium_ID = sc.Stadium_ID WHERE sc.cnt = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM concert WHERE Year >= '2014' GROUP BY CAST(Stadium_ID AS INT)) AS sub)
  SELECT s.Name, s.Capacity FROM stadium s JOIN concert c ON s.Stadium_ID = CAST(c.Stadium_ID AS INT) WHERE c.Year > '2013' GROUP BY s.Stadium_ID ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT CAST(Stadium_ID AS INT) FROM concert);
  SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT CAST(Stadium_ID AS INT) FROM concert);
  SELECT Country FROM singer GROUP BY Country HAVING MAX(Age) > 40 AND MIN(Age) < 30;
  SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2014');
  SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT CAST(Stadium_ID AS INT) FROM concert WHERE Year = '2014')
  SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) AS num_singers FROM concert LEFT JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID;
  SELECT c.concert_Name, c.Theme, COUNT(sic.Singer_ID) AS num_singers FROM concert c LEFT JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID GROUP BY c.concert_ID, c.concert_Name, c.Theme;
  SELECT s.Name, COUNT(*) AS num_concerts FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = CAST(sic.Singer_ID AS INT) GROUP BY s.Singer_ID;
  SELECT singer.Name, COUNT(singer_in_concert.concert_ID) AS num_concerts FROM singer LEFT JOIN singer_in_concert ON singer.Singer_ID = CAST(singer_in_concert.Singer_ID AS INT) GROUP BY singer.Singer_ID;
  SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = CAST(singer_in_concert.Singer_ID AS INT) JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = '2014';
  SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = CAST(singer_in_concert.Singer_ID AS INT) JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = '2014';
  SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%';
  SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%';
  SELECT s.Name, s.Location FROM stadium s JOIN concert c ON s.Stadium_ID = CAST(c.Stadium_ID AS INT) WHERE c.Year IN ('2014', '2015') GROUP BY s.Stadium_ID HAVING COUNT(DISTINCT c.Year) = 2;
  SELECT s.Name, s.Location FROM stadium s JOIN concert c ON s.Stadium_ID = CAST(c.Stadium_ID AS INT) WHERE c.Year IN ('2014', '2015') GROUP BY s.Stadium_ID HAVING COUNT(DISTINCT c.Year) = 2;
  SELECT COUNT(*) FROM concert WHERE CAST(Stadium_ID AS INT) = (SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT MAX(Capacity) FROM stadium));
  SELECT COUNT(*) FROM concert WHERE CAST(Stadium_ID AS INT) = (SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT MAX(Capacity) FROM stadium));
  SELECT COUNT(*) FROM Pets WHERE weight > 10;
  SELECT COUNT(*) FROM Pets WHERE weight > 10;
  SELECT weight FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog');
  SELECT weight FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog');
  SELECT PetType, MAX(weight) FROM Pets GROUP BY PetType;
  SELECT PetType, MAX(weight) FROM Pets GROUP BY PetType;
  SELECT COUNT(*) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.Age > 20;
  SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20;
  SELECT COUNT(*) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Sex = 'F' AND Pets.PetType = 'dog';
  SELECT COUNT(*) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Sex = 'F' AND Pets.PetType = 'dog';
  SELECT COUNT(DISTINCT PetType) FROM Pets;
  SELECT COUNT(DISTINCT PetType) FROM Pets;
  SELECT DISTINCT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog')
  SELECT DISTINCT S.Fname FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType IN ('cat', 'dog');
  SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat' INTERSECT SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'dog')
  SELECT Fname FROM Student WHERE EXISTS (SELECT 1 FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Has_Pet.StuID = Student.StuID AND Pets.PetType = 'cat') AND EXISTS (SELECT 1 FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Has_Pet.StuID = Student.StuID AND Pets.PetType = 'dog')
  SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT DISTINCT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat');
  SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT DISTINCT hp.StuID FROM Has_Pet hp JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'cat')
  SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat')
  SELECT StuID FROM Student WHERE StuID NOT IN (SELECT hp.StuID FROM Has_Pet hp JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'cat')
  SELECT Fname, Age FROM Student WHERE EXISTS (SELECT 1 FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Has_Pet.StuID = Student.StuID AND Pets.PetType = 'dog') AND NOT EXISTS (SELECT 1 FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Has_Pet.StuID = Student.StuID AND Pets.PetType = 'cat')
  SELECT Fname FROM Student WHERE EXISTS (SELECT 1 FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Has_Pet.StuID = Student.StuID AND Pets.PetType = 'dog') AND NOT EXISTS (SELECT 1 FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Has_Pet.StuID = Student.StuID AND Pets.PetType = 'cat')
  SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);
  SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);
  SELECT PetID, weight FROM Pets WHERE pet_age > 1;
  SELECT PetID, weight FROM Pets WHERE pet_age > 1;
  SELECT PetType, AVG(pet_age) AS average_age, MAX(pet_age) AS max_age FROM Pets GROUP BY PetType;
  SELECT PetType, AVG(pet_age) AS average_age, MAX(pet_age) AS max_age FROM Pets GROUP BY PetType;
  SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType;
  SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType;
  SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet);
  SELECT DISTINCT `Fname`, `Age` FROM `Student` JOIN `Has_Pet` ON `Student`.`StuID` = `Has_Pet`.`StuID`;
  SELECT Has_Pet.PetID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.LName = 'Smith';
  SELECT PetID FROM Has_Pet WHERE StuID = (SELECT StuID FROM Student WHERE LName = 'Smith')
  SELECT StuID, COUNT(PetID) FROM Has_Pet GROUP BY StuID;
  SELECT StuID, COUNT(PetID) FROM Has_Pet GROUP BY StuID;
  SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(*) > 1)
  SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(PetID) > 1);
  SELECT LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat' AND pet_age = 3;
  SELECT LName FROM Student WHERE StuID = (SELECT StuID FROM Has_Pet WHERE PetID = (SELECT PetID FROM Pets WHERE PetType = 'cat' AND pet_age = 3));
  SELECT AVG(Age) FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Has_Pet.PetID IS NULL;
  SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);
  SELECT COUNT(*) FROM continents;
  SELECT COUNT(*) FROM continents;
  SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS country_count FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent;
  SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent;
  SELECT COUNT(*) FROM countries;
  SELECT COUNT(*) FROM countries;
  SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.Model) AS model_count FROM car_makers LEFT JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id;
  SELECT cm.Id, cm.FullName, COUNT(ml.ModelId) AS model_count FROM car_makers cm LEFT JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.FullName;
  SELECT car_names.Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE CAST(cars_data.Horsepower AS INTEGER) = (SELECT MIN(CAST(Horsepower AS INTEGER)) FROM cars_data)
  SELECT car_names.Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId ORDER BY CAST(cars_data.Horsepower AS INTEGER) ASC LIMIT 1;
  SELECT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data);
  SELECT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data);
  SELECT DISTINCT car_makers.Maker FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Year = 1970;
  SELECT DISTINCT car_makers.Maker FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Year = 1970;
  SELECT car_makers.FullName AS make, cars_data.Year AS production_time FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data);
  SELECT car_makers.Maker, cars_data.Year FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data)
  SELECT DISTINCT car_names.Make FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980;
  SELECT DISTINCT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980;
  SELECT continents.Continent, COUNT(car_makers.Id) AS count FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent LEFT JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent;
  SELECT continents.Continent, COUNT(car_makers.Id) AS num_makers FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent LEFT JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent;
  SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = CAST(car_makers.Country AS INTEGER) GROUP BY countries.CountryId ORDER BY COUNT(car_makers.Id) DESC LIMIT 1;
  SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId ORDER BY COUNT(car_makers.Id) DESC LIMIT 1;
  SELECT car_makers.FullName, COUNT(*) AS count FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id GROUP BY car_makers.Id;
  SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) AS num_models FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id;
  SELECT Accelerate FROM cars_data WHERE Id = (SELECT MakeId FROM car_names WHERE Model = 'amc rebel sst');
  SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Make = 'amc' AND car_names.Model = 'hornet sportabout (sw)';
  SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'france';
  SELECT COUNT(*) FROM car_makers WHERE Country = '3';
  SELECT COUNT(*) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Country = '1';
  SELECT COUNT(*) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Country = '1';
  SELECT AVG(CAST(MPG AS INTEGER)) FROM cars_data WHERE Cylinders = 4;
  SELECT AVG(CAST(MPG AS INTEGER)) FROM cars_data WHERE Cylinders = 4;
  SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974;
  SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974;
  SELECT car_makers.Maker, car_names.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.MakeId;
  SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker;
  SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = CAST(car_makers.Country AS INTEGER) GROUP BY countries.CountryId, countries.CountryName;
  SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country;
  SELECT COUNT(*) FROM cars_data WHERE CAST(Horsepower AS INTEGER) > 150;
  SELECT COUNT(*) FROM cars_data WHERE CAST(Horsepower AS INTEGER) > 150;
  SELECT Year, AVG(Weight) FROM cars_data GROUP BY Year;
  SELECT Year, AVG(Weight) FROM cars_data GROUP BY Year;
  SELECT c.CountryName FROM countries c JOIN continents cont ON c.Continent = cont.ContId JOIN car_makers cm ON c.CountryId = CAST(cm.Country AS INTEGER) WHERE cont.Continent = 'europe' GROUP BY c.CountryId HAVING COUNT(cm.Id) >= 3;
  SELECT c.CountryName FROM countries c JOIN continents cont ON c.Continent = cont.ContId JOIN car_makers m ON c.CountryId = CAST(m.Country AS INTEGER) WHERE cont.Continent = 'europe' GROUP BY c.CountryId HAVING COUNT(m.Id) >= 3;
  SELECT CAST(cars_data.Horsepower AS INTEGER) AS MaxHorsepower, car_names.Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 3 ORDER BY CAST(cars_data.Horsepower AS INTEGER) DESC LIMIT 1;
  SELECT car_names.Make, CAST(cars_data.Horsepower AS INTEGER) AS Horsepower FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 3 ORDER BY Horsepower DESC LIMIT 1;
  SELECT car_names.Model, CAST(cars_data.MPG AS INTEGER) AS mpg FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId ORDER BY mpg DESC LIMIT 1;
  SELECT car_names.Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId ORDER BY CAST(cars_data.MPG AS INTEGER) DESC LIMIT 1;
  SELECT AVG(CAST(Horsepower AS INTEGER)) FROM cars_data WHERE Year < 1980;
  SELECT AVG(CAST(Horsepower AS INTEGER)) FROM cars_data WHERE Year < 1980;
  SELECT AVG(Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = 'volvo';
  SELECT AVG(Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'volvo';
  SELECT Cylinders, MAX(Accelerate) FROM cars_data GROUP BY Cylinders;
  SELECT Cylinders, MAX(Accelerate) FROM cars_data GROUP BY Cylinders;
  SELECT model_list.Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model GROUP BY model_list.Model ORDER BY COUNT(DISTINCT car_names.MakeId) DESC LIMIT 1;
  SELECT car_names.Model, COUNT(*) AS version_count FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY car_names.Model ORDER BY version_count DESC LIMIT 1;
  SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
  SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
  SELECT COUNT(*) FROM cars_data WHERE Year = 1980;
  SELECT COUNT(*) FROM cars_data WHERE Year = 1980;
  SELECT COUNT(*) FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE FullName = 'American Motor Company');
  SELECT COUNT(*) FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'amc');
  SELECT cm.Id, cm.FullName FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id HAVING COUNT(ml.Model) > 3;
  SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3;
  SELECT DISTINCT car_names.Model FROM car_names JOIN car_makers ON car_names.MakeId = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.FullName = 'General Motors' OR cars_data.Weight > 3500;
  SELECT Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'gm' UNION SELECT Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight > 3500 ORDER BY Model;
  SELECT DISTINCT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000;
  SELECT Year FROM cars_data WHERE Weight < 4000 INTERSECT SELECT Year FROM cars_data WHERE Weight > 3000;
  SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data);
  SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data);
  SELECT c.Cylinders FROM cars_data c JOIN car_names cn ON c.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id WHERE cn.Model = 'volvo' ORDER BY c.Accelerate ASC LIMIT 1;
  SELECT Cylinders FROM cars_data WHERE Id = (SELECT Id FROM car_names WHERE Model = (SELECT Model FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'volkswagen'))) ORDER BY Accelerate ASC LIMIT 1;
  SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(CAST(Horsepower AS INTEGER)) FROM cars_data);
  SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT Accelerate FROM cars_data ORDER BY CAST(Horsepower AS INTEGER) DESC LIMIT 1)
  SELECT COUNT(*) FROM (SELECT countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = CAST(car_makers.Country AS INTEGER) GROUP BY countries.CountryId HAVING COUNT(car_makers.Id) > 2) AS subquery;
  SELECT COUNT(*) FROM (SELECT countries.CountryId FROM car_makers JOIN countries ON CAST(car_makers.Country AS INTEGER) = countries.CountryId GROUP BY countries.CountryId HAVING COUNT(*) > 2) AS subquery;
  SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
  SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
  SELECT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 4 ORDER BY CAST(cars_data.Horsepower AS INTEGER) DESC LIMIT 1;
  SELECT car_names.Make, CAST(cars_data.Horsepower AS INTEGER) AS Horsepower FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 4 ORDER BY Horsepower DESC LIMIT 1;
  SELECT cn.MakeId, cn.Make FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE CAST(cd.Horsepower AS INTEGER) > (SELECT MIN(CAST(Horsepower AS INTEGER)) FROM cars_data) AND cd.Cylinders <= 3;
  SELECT car_makers.Id AS MakeId, car_makers.Maker AS MakeName FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE CAST(cars_data.Horsepower AS INTEGER) != (SELECT MIN(CAST(Horsepower AS INTEGER)) FROM cars_data) AND cars_data.Cylinders < 4;
  SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980;
  SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980;
  SELECT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Weight < 3500 AND car_makers.FullName != 'Ford Motor Company';
  SELECT DISTINCT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < 3500 AND car_names.Make != 'ford'
  SELECT c.CountryName FROM countries c LEFT JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Country IS NULL;
  SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers);
  SELECT Id, Maker FROM car_makers WHERE Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(*) >= 2) AND (SELECT COUNT(*) FROM car_makers) > 3;
  SELECT c.Id, c.Maker FROM car_makers c WHERE (SELECT COUNT(*) FROM model_list WHERE Maker = c.Id) >= 2 AND (SELECT COUNT(*) FROM cars_data d JOIN car_names n ON d.Id = n.MakeId JOIN model_list ml ON n.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id WHERE cm.Id = c.Id) > 3;
  SELECT c.CountryId, c.CountryName FROM countries c WHERE (SELECT COUNT(*) FROM car_makers cm WHERE cm.Country = c.CountryId) > 3 OR EXISTS (SELECT 1 FROM car_names cn JOIN model_list ml ON cn.MakeId = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id WHERE cn.Model = 'fiat' AND cm.Country = c.CountryId);
  SELECT countries.CountryId, countries.CountryName FROM countries WHERE CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(*) > 3) OR CountryId IN (SELECT countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE car_names.Model = 'fiat')
  SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways';
  SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways';
  SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways';
  SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways';
  SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
  SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
  SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';
  SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';
  SELECT COUNT(*) FROM airlines;
  SELECT COUNT(*) FROM airlines;
  SELECT COUNT(*) FROM airports;
  SELECT COUNT(*) FROM airports;
  SELECT COUNT(*) FROM flights;
  SELECT COUNT(*) FROM flights;
  SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
  SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
  SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
  SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
  SELECT City, Country FROM airports WHERE AirportName = 'Alton';
  SELECT City, Country FROM airports WHERE AirportName = 'Alton' OR City = 'Alton';
  SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
  SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
  SELECT AirportName FROM airports WHERE City = 'Aberdeen';
  SELECT AirportName FROM airports WHERE City = 'Aberdeen ';
  SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
  SELECT COUNT(*) FROM flights WHERE SourceAirport = ' APG';
  SELECT COUNT(*) FROM flights WHERE DestAirport = ' ATO';
  SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
  SELECT COUNT(*) FROM flights JOIN airports ON TRIM(flights.SourceAirport) = airports.AirportCode WHERE airports.City = 'Aberdeen ';
  SELECT COUNT(*) FROM flights WHERE SourceAirport IN (' APG', ' ABR');
  SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen ';
  SELECT COUNT(*) FROM flights JOIN airports ON TRIM(flights.DestAirport) = airports.AirportCode WHERE airports.City = 'Aberdeen';
  SELECT COUNT(*) FROM flights JOIN airports AS src ON flights.SourceAirport = src.AirportCode JOIN airports AS dest ON flights.DestAirport = dest.AirportCode WHERE src.City = 'Aberdeen ' AND dest.City = 'Ashley';
  SELECT COUNT(*) FROM flights JOIN airports s ON TRIM(SourceAirport) = s.AirportCode JOIN airports d ON TRIM(DestAirport) = d.AirportCode WHERE TRIM(s.City) = 'Aberdeen' AND TRIM(d.City) = 'Ashley';
  SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'JetBlue Airways';
  SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'Jetblue Airways');
  SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines' AND flights.DestAirport = ' ASY';
  SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines' AND flights.DestAirport = ' ASY';
  SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines' AND flights.SourceAirport = ' AHD';
  SELECT COUNT(*) FROM flights WHERE Airline = 1 AND SourceAirport = ' AHD';
  SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE flights.Airline = 1 AND TRIM(airports.City) = 'Aberdeen';
  SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON TRIM(flights.DestAirport) = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen ';
  SELECT TRIM(airports.City) AS City, COUNT(*) AS NumFlights FROM flights JOIN airports ON TRIM(flights.DestAirport) = airports.AirportCode GROUP BY TRIM(airports.City) ORDER BY NumFlights DESC LIMIT 1;
  SELECT TRIM(a.City) AS City, COUNT(*) AS cnt FROM flights f JOIN airports a ON TRIM(f.DestAirport) = TRIM(a.AirportCode) GROUP BY TRIM(a.City) ORDER BY cnt DESC LIMIT 1;
  SELECT airports.City, COUNT(*) AS num_flights FROM flights JOIN airports ON TRIM(flights.SourceAirport) = airports.AirportCode GROUP BY airports.City ORDER BY num_flights DESC LIMIT 1;
  SELECT airports.City, COUNT(*) AS flight_count FROM flights JOIN airports ON TRIM(flights.SourceAirport) = airports.AirportCode GROUP BY airports.City ORDER BY flight_count DESC LIMIT 1;
  SELECT AirportCode, COUNT(*) AS cnt FROM (     SELECT SourceAirport AS AirportCode     FROM flights     UNION ALL     SELECT DestAirport AS AirportCode     FROM flights ) AS combined GROUP BY AirportCode ORDER BY cnt DESC LIMIT 1;
  SELECT TRIM(AirportCode) AS AirportCode, COUNT(*) AS TotalFlights FROM (     SELECT TRIM(SourceAirport) AS AirportCode     FROM flights     UNION ALL     SELECT TRIM(DestAirport) AS AirportCode     FROM flights ) AS CombinedFlights GROUP BY TRIM(AirportCode) ORDER BY TotalFlights DESC LIMIT 1;
  SELECT AirportCode FROM (     SELECT SourceAirport AS AirportCode FROM flights     UNION ALL     SELECT DestAirport AS AirportCode FROM flights ) AS combined GROUP BY AirportCode HAVING COUNT(*) = (     SELECT MIN(cnt)     FROM (         SELECT COUNT(*) AS cnt         FROM (             SELECT SourceAirport AS AirportCode FROM flights             UNION ALL             SELECT DestAirport AS AirportCode FROM flights         ) AS combined         GROUP BY AirportCode     ) AS counts );
  SELECT TRIM(SourceAirport) AS AirportCode FROM flights UNION ALL SELECT TRIM(DestAirport) AS AirportCode FROM flights GROUP BY AirportCode ORDER BY COUNT(*) ASC LIMIT 1;
  SELECT a.Airline, COUNT(*) AS num_flights FROM flights f JOIN airlines a ON f.Airline = a.uid GROUP BY f.Airline ORDER BY num_flights DESC LIMIT 1;
  SELECT a.Airline, COUNT(*) AS flight_count FROM flights f JOIN airlines a ON f.Airline = a.uid GROUP BY f.Airline ORDER BY flight_count DESC LIMIT 1;
  SELECT a.Abbreviation, a.Country FROM airlines a LEFT JOIN flights f ON a.uid = f.Airline GROUP BY a.uid ORDER BY COUNT(f.FlightNo) ASC LIMIT 1;
  SELECT a.Abbreviation, a.Country FROM airlines a JOIN (SELECT Airline, COUNT(*) AS flight_count FROM flights GROUP BY Airline) AS fc ON a.uid = fc.Airline WHERE fc.flight_count = (SELECT MIN(flight_count) FROM (SELECT COUNT(*) AS flight_count FROM flights GROUP BY Airline) AS counts)
  SELECT DISTINCT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.SourceAirport = 'AHD';
  SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.SourceAirport = ' AHD';
  SELECT a.Airline FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE f.DestAirport = 'AHD';
  SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.DestAirport = ' AHD';
  SELECT DISTINCT a.Airline FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE TRIM(f.SourceAirport) = 'APG' AND f.Airline IN (     SELECT Airline     FROM flights     WHERE TRIM(SourceAirport) = 'CVO' );
  SELECT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE TRIM(f.SourceAirport) IN ('APG', 'CVO') GROUP BY a.uid HAVING COUNT(DISTINCT TRIM(f.SourceAirport)) = 2;
  SELECT a.Airline FROM airlines a WHERE EXISTS (SELECT 1 FROM flights f WHERE f.Airline = a.uid AND f.SourceAirport = 'CVO') AND NOT EXISTS (SELECT 1 FROM flights f WHERE f.Airline = a.uid AND f.SourceAirport = 'APG')
  SELECT a.Airline FROM airlines a WHERE EXISTS (SELECT 1 FROM flights f WHERE f.Airline = a.uid AND TRIM(f.SourceAirport) = 'CVO') AND NOT EXISTS (SELECT 1 FROM flights f WHERE f.Airline = a.uid AND TRIM(f.SourceAirport) = 'APG')
  SELECT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY a.uid HAVING COUNT(*) >= 10;
  SELECT a.Airline FROM flights f JOIN airlines a ON f.Airline = a.uid GROUP BY f.Airline HAVING COUNT(*) >= 10;
  SELECT a.Airline FROM airlines a LEFT JOIN flights f ON a.uid = f.Airline GROUP BY a.uid HAVING COUNT(f.Airline) < 200;
  SELECT a.Airline FROM airlines a LEFT JOIN flights f ON a.uid = f.Airline GROUP BY a.uid HAVING COUNT(f.FlightNo) < 200;
  SELECT FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines';
  SELECT FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines';
  SELECT FlightNo FROM flights WHERE SourceAirport = ' APG';
  SELECT FlightNo FROM flights WHERE SourceAirport = ' APG';
  SELECT FlightNo FROM flights WHERE DestAirport = ' APG';
  SELECT FlightNo FROM flights WHERE DestAirport = ' APG';
  SELECT FlightNo FROM flights JOIN airports ON TRIM(SourceAirport) = AirportCode WHERE City = 'Aberdeen ';
  SELECT FlightNo FROM flights WHERE TRIM(SourceAirport) IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen ');
  SELECT FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen ';
  SELECT f.FlightNo FROM flights f JOIN airports a ON TRIM(f.DestAirport) = a.AirportCode WHERE a.City = 'Aberdeen ';
  SELECT COUNT(*) FROM flights JOIN airports ON TRIM(flights.DestAirport) = airports.AirportCode WHERE TRIM(airports.City) IN ('Aberdeen','Abilene')
  SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City IN ('Aberdeen ', 'Abilene ');
  SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT TRIM(SourceAirport) FROM flights UNION SELECT TRIM(DestAirport) FROM flights)
  SELECT AirportCode FROM airports WHERE NOT EXISTS (     SELECT 1     FROM flights     WHERE flights.SourceAirport = airports.AirportCode     OR flights.DestAirport = airports.AirportCode );
  SELECT COUNT(*) FROM employee;
  SELECT COUNT(*) FROM employee;
  SELECT Name FROM employee ORDER BY Age ASC;
  SELECT Name FROM employee ORDER BY Age ASC;
  SELECT City, COUNT(*) AS num_employees FROM employee GROUP BY City;
  SELECT City, COUNT(Employee_ID) FROM employee GROUP BY City;
  SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;
  SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;
  SELECT Location, COUNT(Shop_ID) FROM shop GROUP BY Location;
  SELECT Location, COUNT(*) FROM shop GROUP BY Location;
  SELECT Manager_name, District FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop);
  SELECT Manager_name, District FROM shop ORDER BY Number_products DESC LIMIT 1;
  SELECT MIN(Number_products) AS min_products, MAX(Number_products) AS max_products FROM shop;
  SELECT MIN(Number_products) AS min_products, MAX(Number_products) AS max_products FROM shop;
  SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;
  SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;
  SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);
  SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);
  SELECT e.Name FROM employee e JOIN (SELECT Employee_ID, COUNT(*) AS cnt FROM evaluation GROUP BY Employee_ID ORDER BY cnt DESC LIMIT 1) AS sub ON e.Employee_ID = CAST(sub.Employee_ID AS INT);
  SELECT e.Name FROM employee e JOIN (SELECT Employee_ID, COUNT(*) AS num_awards FROM evaluation GROUP BY Employee_ID ORDER BY num_awards DESC LIMIT 1) AS top_award ON e.Employee_ID = CAST(top_award.Employee_ID AS INT);
  SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = CAST(ev.Employee_ID AS INT) WHERE ev.Bonus = (SELECT MAX(Bonus) FROM evaluation);
  SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = CAST(ev.Employee_ID AS INT) WHERE ev.Bonus = (SELECT MAX(Bonus) FROM evaluation);
  SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT CAST(Employee_ID AS INT) FROM evaluation);
  SELECT Name FROM employee LEFT JOIN evaluation ON employee.Employee_ID = CAST(evaluation.Employee_ID AS INT) WHERE evaluation.Employee_ID IS NULL;
  SELECT s.Name FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT s.Name FROM hiring h JOIN shop s ON h.Shop_ID = s.Shop_ID GROUP BY h.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring);
  SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring);
  SELECT shop.Name, COUNT(hiring.Employee_ID) AS num_employees FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY shop.Shop_ID, shop.Name;
  SELECT s.Name, COUNT(h.Employee_ID) AS num_employees FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID, s.Name;
  SELECT SUM(Bonus) FROM evaluation;
  SELECT SUM(Bonus) FROM evaluation;
  SELECT * FROM hiring;
  SELECT * FROM hiring;
  SELECT District FROM shop WHERE District IN (SELECT District FROM shop WHERE Number_products < 3000) AND District IN (SELECT District FROM shop WHERE Number_products > 10000)
  SELECT District FROM shop GROUP BY District HAVING SUM(CASE WHEN Number_products < 3000 THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN Number_products > 10000 THEN 1 ELSE 0 END) > 0;
  SELECT COUNT(DISTINCT Location) FROM shop;
  SELECT COUNT(DISTINCT Location) FROM shop;
  SELECT COUNT(*) FROM Documents;
  SELECT COUNT(*) FROM Documents;
  SELECT Document_ID, Document_Name, Document_Description FROM Documents;
  SELECT Document_ID, Document_Name, Document_Description FROM Documents;
  SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%';
  SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%';
  SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV';
  SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV';
  SELECT COUNT(DISTINCT t.Template_Type_Code) FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID;
  SELECT COUNT(DISTINCT t.Template_Type_Code) FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID;
  SELECT COUNT(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'PPT';
  SELECT COUNT(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'PPT';
  SELECT Template_ID, COUNT(Document_ID) FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Template_ID;
  SELECT Template_ID, COUNT(*) FROM Documents GROUP BY Template_ID;
  SELECT t.Template_ID, t.Template_Type_Code FROM Templates t WHERE t.Template_ID = (SELECT d.Template_ID FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID GROUP BY d.Template_ID ORDER BY COUNT(*) DESC LIMIT 1)
  SELECT t.Template_ID, t.Template_Type_Code FROM Templates t JOIN (     SELECT Template_ID, COUNT(*) as doc_count     FROM Documents     WHERE Template_ID IS NOT NULL     GROUP BY Template_ID ) d ON t.Template_ID = d.Template_ID ORDER BY d.doc_count DESC LIMIT 1;
  SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(*) > 1;
  SELECT Template_ID FROM Documents WHERE Template_ID IS NOT NULL GROUP BY Template_ID HAVING COUNT(*) > 1;
  SELECT Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Template_ID IS NULL;
  SELECT Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Template_ID IS NULL;
  SELECT COUNT(*) FROM Templates;
  SELECT COUNT(*) FROM Templates;
  SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;
  SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;
  SELECT DISTINCT Template_Type_Code FROM Templates;
  SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types;
  SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT');
  SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT');
  SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV';
  SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV';
  SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;
  SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;
  SELECT rtt.Template_Type_Code, COUNT(t.Template_ID) FROM Ref_Template_Types rtt LEFT JOIN Templates t ON rtt.Template_Type_Code = t.Template_Type_Code GROUP BY rtt.Template_Type_Code;
  SELECT Template_Type_Code, COUNT(*) AS Template_Count FROM Templates GROUP BY Template_Type_Code;
  SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT Template_Type_Code FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Template_Type_Code HAVING COUNT(Templates.Template_ID) < 3;
  SELECT r.Template_Type_Code FROM Ref_Template_Types r LEFT JOIN Templates t ON r.Template_Type_Code = t.Template_Type_Code GROUP BY r.Template_Type_Code HAVING COUNT(t.Template_ID) < 3;
  SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number = (SELECT MIN(Version_Number) FROM Templates);
  SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number = (SELECT MIN(Version_Number) FROM Templates)
  SELECT Templates.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Data base';
  SELECT t.Template_Type_Code FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID WHERE d.Document_Name = 'Data base';
  SELECT Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK';
  SELECT Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK';
  SELECT      rtt.Template_Type_Code,     COUNT(d.Document_ID) AS Document_Count FROM      Ref_Template_Types rtt LEFT JOIN      Templates t ON rtt.Template_Type_Code = t.Template_Type_Code LEFT JOIN      Documents d ON t.Template_ID = d.Template_ID GROUP BY      rtt.Template_Type_Code;
  SELECT      t.Template_Type_Code,     COUNT(d.Document_ID) AS Document_Count FROM      Ref_Template_Types t LEFT JOIN      Templates tp ON t.Template_Type_Code = tp.Template_Type_Code LEFT JOIN      Documents d ON tp.Template_ID = d.Template_ID GROUP BY      t.Template_Type_Code;
  SELECT Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT Templates.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT t.Template_Type_Code FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID)
  SELECT Template_Type_Code FROM Ref_Template_Types WHERE NOT EXISTS (SELECT 1 FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code);
  SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
  SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
  SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
  SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
  SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';
  SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';
  SELECT DISTINCT r.Template_Type_Description FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code;
  SELECT DISTINCT r.Template_Type_Description FROM Templates t JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code JOIN Documents d ON t.Template_ID = d.Template_ID;
  SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation';
  SELECT Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation';
  SELECT COUNT(*) FROM Paragraphs;
  SELECT COUNT(*) FROM Paragraphs;
  SELECT COUNT(*) FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Summer Show';
  SELECT COUNT(*) FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show');
  SELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea ';
  SELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea ';
  SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Welcome to NY';
  SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY');
  SELECT Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Customer reviews';
  SELECT Paragraph_Text FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Customer reviews');
  SELECT Document_ID, COUNT(Paragraph_ID) AS Paragraph_Count FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Document_ID ORDER BY Document_ID;
  SELECT Document_ID, COUNT(*) AS num_paragraphs FROM Paragraphs GROUP BY Document_ID ORDER BY Document_ID;
  SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS num_paragraphs FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name;
  SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS Paragraph_Count FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name;
  SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) >= 2;
  SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) >= 2;
  SELECT d.Document_ID, d.Document_Name FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT d.Document_ID, d.Document_Name FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY COUNT(p.Paragraph_ID) DESC LIMIT 1;
  SELECT Document_ID FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Document_ID HAVING COUNT(Paragraphs.Paragraph_ID) = (SELECT MIN(cnt) FROM (SELECT COUNT(Paragraphs.Paragraph_ID) AS cnt FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID) AS sub)
  SELECT Document_ID FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(Paragraphs.Paragraph_ID) = (SELECT MIN(cnt) FROM (SELECT COUNT(Paragraphs.Paragraph_ID) AS cnt FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID) AS sub)
  SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) BETWEEN 1 AND 2;
  SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) BETWEEN 1 AND 2;
  SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text IN ('Brazil', 'Ireland') GROUP BY Document_ID HAVING COUNT(DISTINCT Paragraph_Text) = 2;
  SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text = 'Brazil' INTERSECT SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text = 'Ireland'
  SELECT COUNT(*) FROM teacher;
  SELECT COUNT(*) FROM teacher;
  SELECT Name FROM teacher ORDER BY Age ASC;
  SELECT Name FROM teacher ORDER BY Age ASC;
  SELECT Age, Hometown FROM teacher;
  SELECT Age, Hometown FROM teacher;
  SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District';
  SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District';
  SELECT Name FROM teacher WHERE Age = '32' OR Age = '33';
  SELECT Name FROM teacher WHERE Age IN ('32', '33');
  SELECT Hometown FROM teacher ORDER BY CAST(Age AS UNSIGNED) ASC LIMIT 1;
  SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher);
  SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown;
  SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown;
  SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT Hometown, COUNT(*) AS count FROM teacher GROUP BY Hometown ORDER BY count DESC LIMIT 1;
  SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Teacher_ID) >= 2;
  SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2;
  SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID;
  SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID;
  SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC;
  SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC;
  SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = 'Math';
  SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = 'Math';
  SELECT t.Name, COUNT(DISTINCT ca.Course_ID) AS num_courses FROM teacher t LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Teacher_ID;
  SELECT t.Name, COUNT(ca.Course_ID) AS num_courses FROM teacher t LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Teacher_ID;
  SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Teacher_ID HAVING COUNT(ca.Course_ID) >= 2;
  SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Teacher_ID HAVING COUNT(*) >= 2;
  SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange);
  SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange);
  SELECT COUNT(*) FROM visitor WHERE Age < 30;
  SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC;
  SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4;
  SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC;
  SELECT Museum_ID, Name FROM museum ORDER BY Num_of_Staff DESC LIMIT 1;
  SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < '2009';
  SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum';
  SELECT Name FROM museum WHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > '2010')
  SELECT v.ID, v.Name, v.Age FROM visitor v JOIN visit vis ON v.ID = vis.visitor_ID GROUP BY v.ID HAVING COUNT(*) > 1;
  SELECT      visitor.ID,     visitor.Name,     visitor.Level_of_membership FROM      visit JOIN      visitor ON CAST(visit.visitor_ID AS INT) = visitor.ID GROUP BY      visitor.ID, visitor.Name, visitor.Level_of_membership ORDER BY      SUM(visit.Total_spent) DESC LIMIT 1;
  SELECT m.Museum_ID, m.Name FROM museum m JOIN visit v ON m.Museum_ID = v.Museum_ID GROUP BY m.Museum_ID ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit);
  SELECT v.Name, v.Age FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID WHERE vi.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit);
  SELECT AVG(Num_of_Ticket) AS average_tickets, MAX(Num_of_Ticket) AS max_tickets FROM visit;
  SELECT SUM(Total_spent) FROM visit JOIN visitor ON visit.visitor_ID = CAST(visitor.ID AS TEXT) WHERE visitor.Level_of_membership = 1;
  SELECT v.Name FROM visitor v WHERE EXISTS (SELECT 1 FROM visit vis JOIN museum m ON vis.Museum_ID = m.Museum_ID WHERE CAST(vis.visitor_ID AS INT) = v.ID AND m.Open_Year < '2009') AND EXISTS (SELECT 1 FROM visit vis JOIN museum m ON vis.Museum_ID = m.Museum_ID WHERE CAST(vis.visitor_ID AS INT) = v.ID AND m.Open_Year > '2011')
  SELECT COUNT(*) FROM visitor WHERE NOT EXISTS (SELECT 1 FROM visit JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE visit.visitor_ID = visitor.ID AND museum.Open_Year > '2010')
  SELECT COUNT(*) FROM museum WHERE Open_Year < '2008' OR Open_Year > '2013';
  SELECT COUNT(*) FROM players;
  SELECT COUNT(*) FROM players;
  SELECT COUNT(*) FROM matches;
  SELECT COUNT(*) FROM matches;
  SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
  SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
  SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches;
  SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches;
  SELECT AVG(rankings.ranking) FROM matches JOIN rankings ON matches.winner_id = rankings.player_id;
  SELECT AVG(winner_rank) FROM matches;
  SELECT MAX(loser_rank) FROM matches;
  SELECT MIN(loser_rank) FROM matches;
  SELECT COUNT(DISTINCT country_code) FROM players;
  SELECT COUNT(DISTINCT country_code) FROM players;
  SELECT COUNT(DISTINCT loser_name) FROM matches;
  SELECT COUNT(DISTINCT loser_name) FROM matches;
  SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
  SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
  SELECT p.first_name, p.last_name FROM players p WHERE EXISTS (     SELECT 1     FROM matches m     WHERE m.winner_id = p.player_id     AND m.year = 2013 ) AND EXISTS (     SELECT 1     FROM matches m     WHERE m.winner_id = p.player_id     AND m.year = 2016 );
  SELECT p.first_name, p.last_name FROM players p WHERE p.player_id IN (SELECT winner_id FROM matches WHERE year = 2013 INTERSECT SELECT winner_id FROM matches WHERE year = 2016)
  SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);
  SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);
  SELECT p.country_code, p.first_name FROM players p WHERE p.player_id IN (SELECT winner_id FROM matches WHERE tourney_name IN ('WTA Championships', 'Australian Open') GROUP BY winner_id HAVING COUNT(DISTINCT tourney_name) = 2);
  SELECT p.first_name, p.country_code FROM players p WHERE p.player_id IN (     SELECT winner_id     FROM matches     WHERE tourney_name = 'WTA Championships' ) AND p.player_id IN (     SELECT winner_id     FROM matches     WHERE tourney_name = 'Australian Open' );
  SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;
  SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;
  SELECT first_name, last_name FROM players ORDER BY birth_date;
  SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players ORDER BY birth_date;
  SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;
  SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;
  SELECT p.first_name, p.country_code FROM players p JOIN (SELECT player_id, SUM(tours) AS total_tours FROM rankings GROUP BY player_id ORDER BY total_tours DESC LIMIT 1) AS r ON p.player_id = r.player_id;
  SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id WHERE r.tours = (SELECT MAX(tours) FROM rankings);
  SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT p.first_name, p.last_name, r.ranking_points FROM players p JOIN (SELECT winner_id, COUNT(*) AS num_wins FROM matches GROUP BY winner_id ORDER BY num_wins DESC LIMIT 1) AS top_winner ON p.player_id = top_winner.winner_id JOIN rankings r ON p.player_id = r.player_id;
  SELECT p.first_name, p.last_name, r.ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id WHERE p.player_id = (SELECT winner_id FROM matches GROUP BY winner_id ORDER BY COUNT(*) DESC LIMIT 1)
  SELECT p.first_name, p.last_name FROM players p JOIN matches m ON p.player_id = m.winner_id JOIN rankings r ON p.player_id = r.player_id WHERE m.tourney_name = 'Australian Open' GROUP BY p.player_id ORDER BY MAX(r.ranking_points) DESC LIMIT 1;
  SELECT p.first_name, p.last_name FROM players p JOIN (     SELECT m.winner_id, MAX(r.ranking_points) AS max_rank     FROM matches m     JOIN rankings r ON m.winner_id = r.player_id     WHERE m.tourney_name = 'Australian Open'     GROUP BY m.winner_id     ORDER BY max_rank DESC     LIMIT 1 ) sub ON p.player_id = sub.winner_id;
  SELECT loser_name, winner_name FROM matches ORDER BY minutes DESC LIMIT 1;
  SELECT p1.first_name AS winner_name, p1.last_name AS winner_last_name, p2.first_name AS loser_name, p2.last_name AS loser_last_name FROM matches JOIN players p1 ON matches.winner_id = p1.player_id JOIN players p2 ON matches.loser_id = p2.player_id ORDER BY matches.minutes DESC LIMIT 1;
  SELECT p.first_name, AVG(r.ranking) AS average_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id;
  SELECT p.first_name, AVG(r.ranking) AS average_ranking FROM players p LEFT JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id;
  SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name;
  SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p LEFT JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id;
  SELECT country_code, COUNT(*) FROM players GROUP BY country_code;
  SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code;
  SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT country_code FROM players WHERE country_code IS NOT NULL GROUP BY country_code HAVING COUNT(*) > 50;
  SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;
  SELECT ranking_date, SUM(tours) FROM rankings GROUP BY ranking_date;
  SELECT ranking_date, SUM(tours) FROM rankings GROUP BY ranking_date;
  SELECT year, COUNT(*) FROM matches GROUP BY year;
  SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year;
  SELECT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3;
  SELECT m.winner_name, r.ranking FROM matches m JOIN rankings r ON m.winner_id = r.player_id ORDER BY m.winner_age ASC LIMIT 3;
  SELECT COUNT(DISTINCT m.winner_id) FROM matches m JOIN players p ON m.winner_id = p.player_id WHERE m.tourney_name = 'WTA Championships' AND p.hand = 'L';
  SELECT COUNT(DISTINCT m.winner_id) FROM matches m JOIN players p ON m.winner_id = p.player_id WHERE m.tourney_name = 'WTA Championships' AND p.hand = 'L';
  SELECT p.first_name, p.country_code, p.birth_date FROM players p WHERE p.player_id IN (SELECT r.player_id FROM rankings r WHERE r.ranking_points = (SELECT MAX(ranking_points) FROM rankings) AND r.player_id IN (SELECT winner_id FROM matches));
  SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches);
  SELECT hand, COUNT(*) FROM players GROUP BY hand;
  SELECT hand, COUNT(*) AS count FROM players GROUP BY hand;
  SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';
  SELECT name, tonnage FROM ship ORDER BY name DESC;
  SELECT name, date, result FROM battle;
  SELECT MAX(total_deaths) AS max_death_toll, MIN(total_deaths) AS min_death_toll FROM (SELECT SUM(killed + injured) AS total_deaths FROM death JOIN ship ON death.caused_by_ship_id = ship.id JOIN battle ON ship.lost_in_battle = battle.id GROUP BY battle.id) AS aggregated_deaths;
  SELECT AVG(injured) FROM death;
  SELECT death.killed, death.injured, death.note FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't';
  SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril';
  SELECT DISTINCT battle.id, battle.name FROM ship JOIN battle ON ship.lost_in_battle = battle.id WHERE ship.ship_type LIKE '%Brig%';
  SELECT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle JOIN death d ON s.id = d.caused_by_ship_id GROUP BY b.id, b.name HAVING SUM(d.killed) > 10;
  SELECT s.id, s.name  FROM ship s  JOIN death d ON s.id = d.caused_by_ship_id  GROUP BY s.id, s.name  ORDER BY SUM(d.injured) DESC  LIMIT 1;
  SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';
  SELECT COUNT(DISTINCT result) FROM battle;
  SELECT COUNT(*) FROM battle WHERE NOT EXISTS (SELECT 1 FROM ship WHERE ship.lost_in_battle = battle.id AND ship.tonnage = '225')
  SELECT b.name, b.date FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.name = 'Lettice' AND EXISTS (SELECT 1 FROM ship s2 WHERE s2.name = 'HMS Atalanta' AND s2.lost_in_battle = b.id);
  SELECT name, result, bulgarian_commander FROM battle WHERE id NOT IN (SELECT DISTINCT lost_in_battle FROM ship WHERE location = 'English Channel')
  SELECT note FROM death WHERE note LIKE '%East%';
  SELECT * FROM Addresses;
  SELECT line_1, line_2 FROM Addresses;
  SELECT COUNT(*) FROM Courses;
  SELECT COUNT(*) FROM Courses;
  SELECT course_description FROM Courses WHERE course_name = 'math';
  SELECT course_description FROM Courses WHERE course_name = 'math';
  SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
  SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
  SELECT d.department_id, d.department_name FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id GROUP BY d.department_id ORDER BY COUNT(dp.degree_program_id) DESC LIMIT 1;
  SELECT d.department_id, d.department_name FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id GROUP BY d.department_id ORDER BY COUNT(dp.degree_program_id) DESC LIMIT 1;
  SELECT COUNT(DISTINCT dp.department_id) FROM Degree_Programs dp JOIN Departments d ON dp.department_id = d.department_id;
  SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;
  SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs;
  SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs;
  SELECT COUNT(*) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = 'engineering';
  SELECT COUNT(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering');
  SELECT section_name, section_description FROM Sections;
  SELECT section_name, section_description FROM Sections;
  SELECT course_id, course_name FROM Courses LEFT JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY course_id HAVING COUNT(Sections.section_id) <= 2;
  SELECT course_id, course_name FROM Courses LEFT JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY course_id HAVING COUNT(Sections.section_id) < 2;
  SELECT section_name FROM Sections ORDER BY section_name DESC;
  SELECT section_name FROM Sections ORDER BY section_name DESC;
  SELECT s.semester_id, s.semester_name FROM Student_Enrolment se JOIN Semesters s ON se.semester_id = s.semester_id GROUP BY s.semester_id, s.semester_name ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT s.semester_id, s.semester_name, COUNT(DISTINCT se.student_id) AS student_count FROM Semesters s JOIN Student_Enrolment se ON s.semester_id = se.semester_id GROUP BY s.semester_id ORDER BY student_count DESC LIMIT 1;
  SELECT department_description FROM Departments WHERE department_name LIKE '%the computer%';
  SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';
  SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM Students s WHERE s.student_id IN (     SELECT student_id     FROM Student_Enrolment     GROUP BY student_id, semester_id     HAVING COUNT(degree_program_id) >= 2 );
  SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM Students s WHERE s.student_id IN (     SELECT se.student_id     FROM Student_Enrolment se     GROUP BY se.student_id, se.semester_id     HAVING COUNT(DISTINCT se.degree_program_id) >= 2 );
  SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = 'Bachelor';
  SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Bachelor';
  SELECT dp.degree_summary_name, COUNT(DISTINCT se.student_id) AS student_count FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id GROUP BY dp.degree_summary_name ORDER BY student_count DESC LIMIT 1;
  SELECT dp.degree_summary_name FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id GROUP BY dp.degree_summary_name ORDER BY COUNT(DISTINCT se.student_id) DESC LIMIT 1;
  SELECT dp.degree_program_id, dp.degree_summary_name FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id ORDER BY COUNT(DISTINCT se.student_id) DESC LIMIT 1;
  SELECT dp.degree_program_id, dp.degree_summary_name FROM Degree_Programs dp JOIN (     SELECT degree_program_id, COUNT(*) AS cnt     FROM Student_Enrolment     GROUP BY degree_program_id     ORDER BY cnt DESC     LIMIT 1 ) se ON dp.degree_program_id = se.degree_program_id;
  SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(*) AS num_enrollments FROM Student_Enrolment se JOIN Students s ON se.student_id = s.student_id GROUP BY s.student_id ORDER BY num_enrollments DESC LIMIT 1;
  SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(*) AS num_enrollments FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id ORDER BY num_enrollments DESC LIMIT 1;
  SELECT semester_name FROM Semesters LEFT JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id WHERE Student_Enrolment.student_enrolment_id IS NULL;
  SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)
  SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses);
  SELECT DISTINCT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id;
  SELECT c.course_name FROM Student_Enrolment_Courses sec JOIN Courses c ON sec.course_id = c.course_id GROUP BY sec.course_id ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT c.course_name FROM Courses c JOIN (     SELECT course_id, COUNT(*) AS student_count     FROM Student_Enrolment_Courses     GROUP BY course_id ) se ON c.course_id = se.course_id ORDER BY se.student_count DESC LIMIT 1;
  SELECT last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE Addresses.state_province_county = 'North Carolina' AND Students.student_id NOT IN (SELECT student_id FROM Student_Enrolment);
  SELECT s.last_name FROM Students s WHERE (EXISTS (SELECT 1 FROM Addresses a WHERE a.address_id = s.current_address_id AND a.state_province_county = 'North Carolina') OR EXISTS (SELECT 1 FROM Addresses a WHERE a.address_id = s.permanent_address_id AND a.state_province_county = 'North Carolina')) AND NOT EXISTS (SELECT 1 FROM Student_Enrolment se WHERE se.student_id = s.student_id)
  SELECT t.transcript_id, t.transcript_date FROM Transcripts t JOIN (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id HAVING COUNT(*) >= 2) sub ON t.transcript_id = sub.transcript_id;
  SELECT t.transcript_id, t.transcript_date FROM Transcripts t JOIN (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id HAVING COUNT(*) >= 2) tc ON t.transcript_id = tc.transcript_id;
  SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
  SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
  SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;
  SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;
  SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Student_Enrolment_Courses sec ON se.student_enrolment_id = sec.student_enrolment_id JOIN Transcript_Contents tc ON sec.student_course_id = tc.student_course_id JOIN Transcripts t ON tc.transcript_id = t.transcript_id ORDER BY t.transcript_date ASC LIMIT 1;
  SELECT first_name, middle_name, last_name FROM Students WHERE date_left = (SELECT MIN(date_left) FROM Students);
  SELECT first_name FROM Students WHERE current_address_id != permanent_address_id;
  SELECT first_name FROM Students WHERE current_address_id != permanent_address_id;
  SELECT address_id, line_1, line_2, line_3 FROM Addresses WHERE address_id = (SELECT current_address_id FROM Students GROUP BY current_address_id ORDER BY COUNT(*) DESC LIMIT 1)
  SELECT a.address_id, a.line_1, a.line_2 FROM Addresses a JOIN (     SELECT address_id, COUNT(DISTINCT student_id) AS student_count     FROM (         SELECT current_address_id AS address_id, student_id         FROM Students         UNION ALL         SELECT permanent_address_id AS address_id, student_id         FROM Students     ) AS student_addresses     GROUP BY address_id     ORDER BY student_count DESC     LIMIT 1 ) AS max_address ON a.address_id = max_address.address_id;
  SELECT AVG(transcript_date) FROM Transcripts;
  SELECT AVG(transcript_date) FROM Transcripts;
  SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1;
  SELECT * FROM Transcripts WHERE transcript_date = (SELECT MIN(transcript_date) FROM Transcripts);
  SELECT COUNT(*) FROM Transcripts;
  SELECT COUNT(*) FROM Transcripts;
  SELECT MAX(transcript_date) FROM Transcripts;
  SELECT MAX(transcript_date) FROM Transcripts;
  SELECT student_course_id, COUNT(*) AS num_transcripts FROM Transcript_Contents GROUP BY student_course_id ORDER BY num_transcripts DESC LIMIT 1;
  SELECT      sec.student_enrolment_id,     (SELECT COUNT(DISTINCT t.transcript_id) FROM Transcript_Contents t JOIN Student_Enrolment_Courses sec2 ON t.student_course_id = sec2.student_course_id WHERE sec2.course_id = sec.course_id) AS transcript_count FROM Student_Enrolment_Courses sec WHERE sec.course_id = (     SELECT course_id     FROM (         SELECT              sec2.course_id,              COUNT(DISTINCT t.transcript_id) AS transcript_count         FROM Transcript_Contents t         JOIN Student_Enrolment_Courses sec2 ON t.student_course_id = sec2.student_course_id         GROUP BY sec2.course_id         ORDER BY transcript_count DESC         LIMIT 1     ) AS max_course ) ORDER BY transcript_count DESC LIMIT 1;
  SELECT t.transcript_id, t.transcript_date FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id ORDER BY COUNT(*) ASC LIMIT 1;
  SELECT t.transcript_id, t.transcript_date FROM Transcripts t JOIN (SELECT transcript_id, COUNT(*) AS num_results FROM Transcript_Contents GROUP BY transcript_id) AS tc ON t.transcript_id = tc.transcript_id ORDER BY num_results ASC LIMIT 1;
  SELECT s.semester_name FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id JOIN Semesters s ON se.semester_id = s.semester_id WHERE dp.degree_summary_name IN ('Master', 'Bachelor') GROUP BY s.semester_id HAVING COUNT(DISTINCT dp.degree_summary_name) = 2;
  SELECT semester_id FROM Student_Enrolment JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id GROUP BY semester_id HAVING COUNT(DISTINCT Degree_Programs.degree_summary_name) = 2;
  SELECT COUNT(DISTINCT current_address_id) FROM Students;
  SELECT a.address_id, a.line_1, a.line_2, a.line_3, a.city, a.zip_postcode, a.state_province_county, a.country, a.other_address_details FROM Addresses a WHERE a.address_id IN (     SELECT current_address_id FROM Students     UNION     SELECT permanent_address_id FROM Students );
  SELECT * FROM Students ORDER BY last_name DESC, first_name DESC;
  SELECT other_student_details FROM Students ORDER BY last_name DESC, first_name DESC;
  SELECT * FROM Sections WHERE section_name = 'h';
  SELECT section_description FROM Sections WHERE section_name = 'h';
  SELECT first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE country = 'Haiti' OR cell_mobile_number = '09700166582';
  SELECT first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582';
  SELECT Title FROM Cartoon ORDER BY Title;
  SELECT Title FROM Cartoon ORDER BY Title;
  SELECT * FROM Cartoon WHERE Directed_by = 'Ben Jones';
  SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';
  SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
  SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
  SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;
  SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;
  SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';
  SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';
  SELECT Country, COUNT(id) FROM TV_Channel GROUP BY Country ORDER BY COUNT(id) DESC LIMIT 1;
  SELECT Country, COUNT(id) as num_channels FROM TV_Channel GROUP BY Country ORDER BY num_channels DESC LIMIT 1;
  SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel;
  SELECT COUNT(DISTINCT series_name) AS different_series, COUNT(DISTINCT Content) AS different_contents FROM TV_Channel;
  SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
  SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
  SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';
  SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';
  SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
  SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
  SELECT Language, COUNT(*) AS count FROM TV_Channel GROUP BY Language ORDER BY count ASC LIMIT 1;
  SELECT Language, COUNT(*) as num_channels FROM TV_Channel WHERE Language IS NOT NULL GROUP BY Language HAVING COUNT(*) = (     SELECT MIN(channel_count)     FROM (         SELECT COUNT(*) as channel_count         FROM TV_Channel         WHERE Language IS NOT NULL         GROUP BY Language     ) AS counts );
  SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language;
  SELECT Language, COUNT(id) FROM TV_Channel GROUP BY Language;
  SELECT TV_Channel.series_name FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = 'The Rise of the Blue Beetle!';
  SELECT series_name FROM TV_Channel WHERE id = (SELECT Channel FROM Cartoon WHERE Title = 'The Rise of the Blue Beetle');
  SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
  SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
  SELECT Episode FROM TV_series ORDER BY Rating;
  SELECT Episode FROM TV_series ORDER BY Rating;
  SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
  SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
  SELECT MIN(Share), MAX(Share) FROM TV_series;
  SELECT MAX(Share), MIN(Share) FROM TV_series;
  SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';
  SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';
  SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';
  SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';
  SELECT TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = 'A Love of a Lifetime';
  SELECT TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = 'A Love of a Lifetime';
  SELECT Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
  SELECT Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
  SELECT Directed_by, COUNT(id) FROM Cartoon GROUP BY Directed_by;
  SELECT Directed_by, COUNT(*) as count FROM Cartoon GROUP BY Directed_by;
  SELECT Production_code, Channel FROM Cartoon WHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon);
  SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1;
  SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'Yes';
  SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 'Yes';
  SELECT DISTINCT Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = 'Todd Casey';
  SELECT DISTINCT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey';
  SELECT Country FROM TV_Channel WHERE Country NOT IN (SELECT DISTINCT Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = 'Todd Casey')
  SELECT Country FROM TV_Channel WHERE Country NOT IN (SELECT DISTINCT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey')
  SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel WHERE EXISTS (SELECT 1 FROM Cartoon WHERE Cartoon.Channel = TV_Channel.id AND Cartoon.Directed_by = 'Ben Jones') AND EXISTS (SELECT 1 FROM Cartoon WHERE Cartoon.Channel = TV_Channel.id AND Cartoon.Directed_by = 'Michael Chang')
  SELECT series_name, Country FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Michael Chang')
  SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English';
  SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English' OR Language IS NULL;
  SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(*) > 2);
  SELECT Channel FROM TV_series GROUP BY Channel HAVING COUNT(*) > 2;
  SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')
  SELECT id FROM TV_Channel WHERE NOT EXISTS (SELECT 1 FROM Cartoon WHERE Cartoon.Channel = TV_Channel.id AND Cartoon.Directed_by = 'Ben Jones')
  SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')
  SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones');
  SELECT COUNT(*) FROM poker_player;
  SELECT COUNT(*) FROM poker_player;
  SELECT Earnings FROM poker_player ORDER BY Earnings DESC;
  SELECT Earnings FROM poker_player ORDER BY Earnings DESC;
  SELECT Final_Table_Made, Best_Finish FROM poker_player;
  SELECT Poker_Player_ID, Final_Table_Made, Best_Finish FROM poker_player;
  SELECT AVG(Earnings) FROM poker_player;
  SELECT AVG(Earnings) FROM poker_player;
  SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player);
  SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player);
  SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;
  SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;
  SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID;
  SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID;
  SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings > 300000;
  SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Earnings > 300000;
  SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Final_Table_Made ASC;
  SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Final_Table_Made ASC;
  SELECT Birth_Date FROM people WHERE People_ID = (SELECT People_ID FROM poker_player ORDER BY Earnings ASC LIMIT 1);
  SELECT p.Birth_Date FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Earnings = (SELECT MIN(Earnings) FROM poker_player);
  SELECT Money_Rank FROM poker_player WHERE People_ID = (SELECT People_ID FROM people ORDER BY Height DESC LIMIT 1);
  SELECT pp.Money_Rank FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE p.Height = (SELECT MAX(Height) FROM people)
  SELECT AVG(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200;
  SELECT AVG(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200;
  SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings DESC;
  SELECT `people`.`Name` FROM `poker_player` JOIN `people` ON `poker_player`.`People_ID` = `people`.`People_ID` ORDER BY `poker_player`.`Earnings` DESC;
  SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality;
  SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality;
  SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;
  SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;
  SELECT Name, Birth_Date FROM people ORDER BY Name ASC;
  SELECT Name, Birth_Date FROM people ORDER BY Name ASC;
  SELECT Name FROM people WHERE Nationality != 'Russia';
  SELECT Name FROM people WHERE Nationality != 'Russia';
  SELECT Name FROM people LEFT JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Poker_Player_ID IS NULL;
  SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);
  SELECT COUNT(DISTINCT Nationality) FROM people;
  SELECT COUNT(DISTINCT Nationality) FROM people;
  SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE;
  SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC;
  SELECT vote_id, phone_number, state FROM VOTES;
  SELECT MIN(area_code) AS min_area_code, MAX(area_code) AS max_area_code FROM AREA_CODE_STATE;
  SELECT MAX(created) FROM VOTES WHERE state = 'CA';
  SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway';
  SELECT DISTINCT state, created FROM VOTES;
  SELECT c.contestant_number, c.contestant_name FROM CONTESTANTS c JOIN VOTES v ON c.contestant_number = v.contestant_number GROUP BY c.contestant_number HAVING COUNT(*) >= 2;
  SELECT c.contestant_number, c.contestant_name FROM VOTES v JOIN CONTESTANTS c ON v.contestant_number = c.contestant_number GROUP BY c.contestant_number ORDER BY COUNT(*) ASC LIMIT 1;
  SELECT COUNT(*) FROM VOTES WHERE state IN ('NY', 'CA');
  SELECT (SELECT COUNT(*) FROM CONTESTANTS) - (SELECT COUNT(DISTINCT contestant_number) FROM VOTES)
  SELECT LEFT(CAST(phone_number AS CHAR), 3) AS area_code FROM VOTES GROUP BY area_code ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT created, state, phone_number FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE contestant_name = 'Tabatha Gehling';
  SELECT area_code FROM area_code_state WHERE state IN (SELECT state FROM votes WHERE contestant_number = 2 INTERSECT SELECT state FROM votes WHERE contestant_number = 3)
  SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%';
  SELECT Name FROM country WHERE IndepYear > 1950;
  SELECT Name FROM country WHERE IndepYear > 1950;
  SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';
  SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';
  SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean';
  SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Caribbean';
  SELECT Continent FROM country WHERE Name = 'Anguilla';
  SELECT Continent FROM country WHERE Name = 'Anguilla';
  SELECT District FROM city WHERE Name = 'Kabul';
  SELECT District FROM city WHERE Name = 'Kabul';
  SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba') ORDER BY Percentage DESC LIMIT 1;
  SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' ORDER BY Percentage DESC LIMIT 1;
  SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
  SELECT Population, LifeExpectancy FROM country WHERE Code = 'BRA';
  SELECT Region, Population FROM country WHERE Name = 'Angola';
  SELECT Region, Population FROM country WHERE Name = 'Angola';
  SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa';
  SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Central Africa';
  SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1;
  SELECT Name FROM country WHERE Continent = 'Asia' AND LifeExpectancy IS NOT NULL ORDER BY LifeExpectancy ASC LIMIT 1;
  SELECT SUM(Population) AS total_population, MAX(GNP) AS max_gnp FROM country WHERE Continent = 'Asia';
  SELECT SUM(Population) AS TotalPopulation, MAX(GNP) AS MaxGNP FROM country WHERE Continent = 'Asia';
  SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic';
  SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic';
  SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe');
  SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe');
  SELECT SUM(Population) FROM city WHERE District = 'Gelderland';
  SELECT SUM(Population) FROM city WHERE District = 'Gelderland';
  SELECT AVG(GNP) AS avg_gnp, SUM(Population) AS total_population FROM country WHERE GovernmentForm = 'US territory';
  SELECT AVG(GNP), SUM(Population) FROM country WHERE HeadOfState = 'United States';
  SELECT COUNT(DISTINCT Language) FROM countrylanguage;
  SELECT COUNT(DISTINCT Language) FROM countrylanguage;
  SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
  SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
  SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'ABW';
  SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba');
  SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T';
  SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Afghanistan') AND IsOfficial = 'T';
  SELECT c.Name FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code GROUP BY cl.CountryCode ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY cl.CountryCode ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT Continent, COUNT(DISTINCT Language) AS num_languages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent ORDER BY num_languages DESC LIMIT 1;
  SELECT c.Continent, COUNT(DISTINCT cl.Language) AS num_languages FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code GROUP BY c.Continent ORDER BY num_languages DESC LIMIT 1;
  SELECT COUNT(*) FROM (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' INTERSECT SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch') AS t;
  SELECT COUNT(*) FROM (SELECT CountryCode FROM countrylanguage WHERE Language IN ('English', 'Dutch') GROUP BY CountryCode HAVING COUNT(DISTINCT Language) = 2) AS subquery;
  SELECT c.Name FROM country c WHERE c.Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') AND c.Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'French');
  SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode AND cl.Language = 'English' JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French';
  SELECT c.Name FROM country c JOIN (SELECT CountryCode FROM countrylanguage WHERE IsOfficial = 'T' AND Language IN ('English', 'French') GROUP BY CountryCode HAVING COUNT(DISTINCT Language) = 2) AS sub ON c.Code = sub.CountryCode;
  SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE IsOfficial = 'T' AND Language = 'English') AND Code IN (SELECT CountryCode FROM countrylanguage WHERE IsOfficial = 'T' AND Language = 'French')
  SELECT COUNT(DISTINCT country.Continent) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = 'Chinese';
  SELECT COUNT(DISTINCT c.Continent) FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE cl.Language = 'Chinese';
  SELECT DISTINCT c.Region FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch') AND cl.IsOfficial = 'T';
  SELECT DISTINCT c.Region FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE cl.Language IN ('Dutch', 'English');
  SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'Dutch') AND countrylanguage.IsOfficial = 'T';
  SELECT DISTINCT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'Dutch') AND countrylanguage.IsOfficial = 'T';
  SELECT cl.Language, SUM(cl.Percentage) AS TotalPercentage FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.Continent = 'Asia' GROUP BY cl.Language ORDER BY TotalPercentage DESC LIMIT 1;
  SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.Continent = 'Asia' GROUP BY cl.Language ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.GovernmentForm = 'Republic' GROUP BY cl.Language HAVING COUNT(DISTINCT cl.CountryCode) = 1;
  SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE cl.Language IN (     SELECT cl2.Language     FROM countrylanguage cl2     GROUP BY cl2.Language     HAVING COUNT(cl2.CountryCode) = 1 ) AND c.GovernmentForm = 'Republic';
  SELECT Name, Population FROM city WHERE CountryCode IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') ORDER BY Population DESC LIMIT 1;
  SELECT city.Name, city.Population FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1;
  SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1;
  SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1;
  SELECT AVG(c.LifeExpectancy) FROM country c WHERE NOT EXISTS (SELECT 1 FROM countrylanguage cl WHERE cl.CountryCode = c.Code AND cl.Language = 'English' AND cl.IsOfficial = 'T')
  SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')
  SELECT SUM(c.Population) FROM country c WHERE c.Code NOT IN (SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'English' AND cl.IsOfficial = 'T');
  SELECT SUM(population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T');
  SELECT cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T';
  SELECT cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T';
  SELECT COUNT(DISTINCT cl.Language) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T';
  SELECT COUNT(DISTINCT cl.Language) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.IndepYear IS NOT NULL AND c.IndepYear < 1930 AND cl.IsOfficial = 'T';
  SELECT * FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')
  SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe');
  SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia');
  SELECT Name FROM country WHERE Continent = 'Africa' AND Population < ALL (SELECT Population FROM country WHERE Continent = 'Asia');
  SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa');
  SELECT Name, Population FROM country WHERE Continent = 'Asia' AND Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')
  SELECT Code FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode AND countrylanguage.Language = 'English' WHERE countrylanguage.CountryCode IS NULL;
  SELECT Code FROM country WHERE NOT EXISTS (SELECT 1 FROM countrylanguage WHERE CountryCode = country.Code AND Language = 'English')
  SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language != 'English';
  SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language != 'English';
  SELECT Code FROM country WHERE GovernmentForm != 'Republic' AND Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');
  SELECT Code FROM country WHERE GovernmentForm != 'Republic' AND NOT EXISTS (SELECT 1 FROM countrylanguage WHERE countrylanguage.CountryCode = country.Code AND Language = 'English' AND IsOfficial = 'T')
  SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent = 'Europe' AND country.Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')
  SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent = 'Europe' AND country.Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')
  SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T' AND country.Continent = 'Asia';
  SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T' AND country.Continent = 'Asia';
  SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1;
  SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country)
  SELECT Name, Population, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);
  SELECT Name, Population, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1;
  SELECT c.Name, COUNT(*) AS num_languages FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code GROUP BY cl.CountryCode HAVING COUNT(*) >= 3;
  SELECT c.Name, COUNT(*) AS NumLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Code HAVING COUNT(*) > 2;
  SELECT d.District, COUNT(c.ID) AS num_cities FROM (SELECT DISTINCT District FROM city) d LEFT JOIN city c ON c.District = d.District AND c.Population > (SELECT AVG(Population) FROM city) GROUP BY d.District;
  SELECT District, COUNT(*) AS num_cities FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District;
  SELECT GovernmentForm, SUM(Population) AS TotalPopulation FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72;
  SELECT GovernmentForm, SUM(Population) AS TotalPopulation FROM country WHERE GovernmentForm IN (SELECT GovernmentForm FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72) GROUP BY GovernmentForm;
  SELECT Continent, AVG(LifeExpectancy), SUM(Population) FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72;
  SELECT Continent, SUM(Population) AS TotalPopulation, AVG(LifeExpectancy) AS AvgLifeExpectancy FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72;
  SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
  SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
  SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
  SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
  SELECT Name FROM country ORDER BY Population ASC LIMIT 3;
  SELECT Name FROM country ORDER BY Population ASC LIMIT 3;
  SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
  SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
  SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;
  SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;
  SELECT SUM(Population) AS total_population, AVG(SurfaceArea) AS average_area FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;
  SELECT SUM(Population) AS total_population, AVG(SurfaceArea) AS average_surface_area FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;
  SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
  SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
  SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1;
  SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT c.Name AS CountryName, cl.Language, cl.Percentage FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code JOIN (     SELECT CountryCode, MAX(Percentage) AS MaxPercentage     FROM countrylanguage     GROUP BY CountryCode ) AS max_percent ON cl.CountryCode = max_percent.CountryCode AND cl.Percentage = max_percent.MaxPercentage;
  SELECT cl.CountryCode, cl.Language FROM countrylanguage cl JOIN (     SELECT CountryCode, MAX(Percentage) AS MaxPct     FROM countrylanguage     GROUP BY CountryCode ) AS max_pct ON cl.CountryCode = max_pct.CountryCode AND cl.Percentage = max_pct.MaxPct;
  SELECT COUNT(DISTINCT cl.CountryCode) FROM countrylanguage cl WHERE cl.Language = 'Spanish' AND cl.Percentage = (SELECT MAX(cl2.Percentage) FROM countrylanguage cl2 WHERE cl2.CountryCode = cl.CountryCode);
  SELECT COUNT(DISTINCT cl.CountryCode) FROM countrylanguage cl WHERE cl.Language = 'Spanish' AND cl.Percentage = (SELECT MAX(cl2.Percentage) FROM countrylanguage cl2 WHERE cl2.CountryCode = cl.CountryCode)
  SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish')
  SELECT cl.CountryCode FROM countrylanguage cl JOIN (     SELECT CountryCode, MAX(Percentage) AS MaxPercentage     FROM countrylanguage     GROUP BY CountryCode ) AS max_per_country ON cl.CountryCode = max_per_country.CountryCode WHERE cl.Language = 'Spanish' AND cl.Percentage = max_per_country.MaxPercentage;
  SELECT COUNT(*) FROM conductor;
  SELECT COUNT(*) FROM conductor;
  SELECT Name FROM conductor ORDER BY Age ASC;
  SELECT Name FROM conductor ORDER BY Age;
  SELECT Name FROM conductor WHERE Nationality != 'USA';
  SELECT Name FROM conductor WHERE Nationality != 'USA';
  SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;
  SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;
  SELECT AVG(Attendance) FROM show;
  SELECT AVG(Attendance) FROM show;
  SELECT MAX(CAST(REPLACE(Share, ''%, '') AS REAL)) AS Max_Share, MIN(CAST(REPLACE(Share, ''%, '') AS REAL)) AS Min_Share FROM performance WHERE Type != 'Live final'
  SELECT MAX(Share), MIN(Share) FROM performance WHERE Type != 'Live final';
  SELECT COUNT(DISTINCT Nationality) FROM conductor;
  SELECT COUNT(DISTINCT Nationality) FROM conductor;
  SELECT Name FROM conductor ORDER BY Year_of_Work DESC;
  SELECT Name FROM conductor ORDER BY Year_of_Work DESC;
  SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;
  SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;
  SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
  SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
  SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID HAVING COUNT(orchestra.Orchestra_ID) > 1;
  SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID HAVING COUNT(o.Orchestra_ID) > 1;
  SELECT Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name ORDER BY COUNT(orchestra.Orchestra_ID) DESC LIMIT 1;
  SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008;
  SELECT DISTINCT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008;
  SELECT Record_Company, COUNT(*) FROM orchestra GROUP BY Record_Company;
  SELECT Record_Company, COUNT(*) FROM orchestra GROUP BY Record_Company;
  SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC;
  SELECT Major_Record_Format, COUNT(*) AS frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY frequency DESC;
  SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL;
  SELECT Orchestra_ID, Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL;
  SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003;
  SELECT `Record_Company` FROM `orchestra` WHERE `Year_of_Founded` < 2003 INTERSECT SELECT `Record_Company` FROM `orchestra` WHERE `Year_of_Founded` > 2003;
  SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');
  SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');
  SELECT o.Year_of_Founded FROM orchestra o JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID GROUP BY o.Orchestra_ID HAVING COUNT(p.Performance_ID) > 1;
  SELECT o.Year_of_Founded FROM orchestra o JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID GROUP BY o.Orchestra_ID HAVING COUNT(p.Performance_ID) > 1;
  SELECT COUNT(*) FROM Highschooler;
  SELECT COUNT(*) FROM Highschooler;
  SELECT name, grade FROM Highschooler;
  SELECT name, grade FROM Highschooler;
  SELECT grade FROM Highschooler;
  SELECT grade FROM Highschooler;
  SELECT grade FROM Highschooler WHERE name = 'Kyle';
  SELECT grade FROM Highschooler WHERE name = 'Kyle';
  SELECT name FROM Highschooler WHERE grade = 10;
  SELECT name FROM Highschooler WHERE grade = 10;
  SELECT ID FROM Highschooler WHERE name = 'Kyle';
  SELECT ID FROM Highschooler WHERE name = 'Kyle';
  SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
  SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
  SELECT grade, COUNT(*) AS count FROM Highschooler GROUP BY grade;
  SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade;
  SELECT grade, COUNT(*) AS count FROM Highschooler GROUP BY grade ORDER BY count DESC LIMIT 1;
  SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4;
  SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4;
  SELECT h.ID AS student_id, COUNT(f.friend_id) AS num_friends FROM Highschooler h LEFT JOIN (     SELECT student_id AS friend_id FROM Friend     UNION ALL     SELECT friend_id AS friend_id FROM Friend ) AS f ON h.ID = f.friend_id GROUP BY h.ID;
  SELECT student_id, COUNT(*) AS num_friends FROM (     SELECT student_id FROM Friend     UNION ALL     SELECT friend_id FROM Friend ) AS friends GROUP BY student_id;
  SELECT h.name, (SELECT COUNT(*) FROM Friend WHERE student_id = h.ID OR friend_id = h.ID) AS num_friends FROM Highschooler h;
  SELECT h.name, COUNT(friends.id) AS num_friends FROM Highschooler h LEFT JOIN (     SELECT student_id AS id FROM Friend     UNION ALL     SELECT friend_id AS id FROM Friend ) AS friends ON h.ID = friends.id GROUP BY h.ID, h.name;
  SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT h.name FROM Highschooler h JOIN (SELECT student_id AS id FROM Friend UNION SELECT friend_id AS id FROM Friend) f ON h.ID = f.id GROUP BY h.ID ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT name FROM Highschooler WHERE (SELECT COUNT(DISTINCT friend_id) FROM Friend WHERE student_id = Highschooler.ID) + (SELECT COUNT(DISTINCT student_id) FROM Friend WHERE friend_id = Highschooler.ID) >= 3;
  SELECT name FROM Highschooler WHERE (SELECT COUNT(*) FROM Friend WHERE student_id = Highschooler.ID) + (SELECT COUNT(*) FROM Friend WHERE friend_id = Highschooler.ID) >= 3;
  SELECT H.name FROM Highschooler H WHERE H.ID IN (SELECT friend_id FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle') UNION SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle'))
  SELECT H.name FROM Highschooler H WHERE H.ID IN (SELECT friend_id FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle') UNION SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle'))
  SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle') OR friend_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
  SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle') OR friend_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
  SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)
  SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend);
  SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)
  SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend);
  SELECT H.ID FROM Highschooler H WHERE H.ID IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend) AND H.ID IN (SELECT liked_id FROM Likes)
  SELECT ID FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend UNION SELECT DISTINCT friend_id FROM Friend) AND ID IN (SELECT DISTINCT student_id FROM Likes UNION SELECT DISTINCT liked_id FROM Likes);
  SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend) AND ID IN (SELECT liked_id FROM Likes);
  SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend) AND ID IN (SELECT liked_id FROM Likes);
  SELECT h.ID AS student_id, COUNT(l.student_id) AS num_likes FROM Highschooler h LEFT JOIN Likes l ON h.ID = l.student_id GROUP BY h.ID;
  SELECT student_id, COUNT(*) FROM Likes GROUP BY student_id;
  SELECT H.name, COUNT(*) AS num_likes FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.ID;
  SELECT h.name, COUNT(*) AS like_count FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.ID;
  SELECT h.name FROM Highschooler h JOIN (     SELECT liked_id, COUNT(*) AS like_count     FROM Likes     GROUP BY liked_id ) AS likes_count ON h.ID = likes_count.liked_id ORDER BY likes_count.like_count DESC LIMIT 1;
  SELECT h.name FROM Highschooler h JOIN (     SELECT liked_id, COUNT(*) AS num_likes     FROM Likes     GROUP BY liked_id     ORDER BY num_likes DESC     LIMIT 1 ) l ON h.ID = l.liked_id;
  SELECT h.name FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.ID HAVING COUNT(*) >= 2;
  SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Likes GROUP BY student_id HAVING COUNT(*) >= 2)
  SELECT name FROM Highschooler WHERE grade > 5 AND (SELECT COUNT(*) FROM Friend WHERE student_id = Highschooler.ID OR friend_id = Highschooler.ID) >= 2;
  SELECT name FROM Highschooler WHERE grade > 5 AND (SELECT COUNT(*) FROM Friend WHERE student_id = ID OR friend_id = ID) >= 2;
  SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
  SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
  SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend);
  SELECT AVG(H.grade) FROM Highschooler H WHERE H.ID IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend);
  SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend);
  SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend);
  SELECT state FROM Owners WHERE state IS NOT NULL INTERSECT SELECT state FROM Professionals WHERE state IS NOT NULL;
  SELECT state FROM Owners WHERE state IS NOT NULL INTERSECT SELECT state FROM Professionals WHERE state IS NOT NULL;
  SELECT AVG(CAST(age AS DECIMAL(10,2))) FROM Dogs WHERE dog_id IN (SELECT DISTINCT dog_id FROM Treatments)
  SELECT AVG(CAST(age AS DECIMAL(10,2))) FROM Dogs WHERE dog_id IN (SELECT DISTINCT dog_id FROM Treatments)
  SELECT p.professional_id, p.last_name, p.cell_number FROM Professionals p LEFT JOIN (SELECT professional_id, COUNT(*) AS treatment_count FROM Treatments GROUP BY professional_id) t ON p.professional_id = t.professional_id WHERE p.state = 'Indiana' OR t.treatment_count > 2;
  SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2)
  SELECT d.name FROM Dogs d LEFT JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY d.dog_id HAVING SUM(COALESCE(t.cost_of_treatment,0)) <= 1000;
  SELECT d.name FROM Dogs d LEFT JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY d.dog_id HAVING COALESCE(SUM(t.cost_of_treatment), 0) <= 1000;
  SELECT first_name FROM (SELECT first_name FROM Owners UNION SELECT first_name FROM Professionals) AS combined WHERE first_name NOT IN (SELECT name FROM Dogs WHERE name IS NOT NULL);
  SELECT first_name FROM (SELECT first_name FROM Owners UNION SELECT first_name FROM Professionals) AS combined_names WHERE first_name NOT IN (SELECT name FROM Dogs)
  SELECT professional_id, role_code, email_address FROM Professionals LEFT JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.treatment_id IS NULL;
  SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments);
  SELECT o.owner_id, o.first_name, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT o.owner_id, o.first_name, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT p.professional_id, p.role_code, p.first_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id HAVING COUNT(t.treatment_id) >= 2;
  SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) >= 2);
  SELECT breed_name FROM Breeds WHERE breed_code = (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1)
  SELECT b.breed_name FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code GROUP BY d.breed_code ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT o.owner_id, o.last_name FROM Treatments t JOIN Dogs d ON t.dog_id = d.dog_id JOIN Owners o ON d.owner_id = o.owner_id GROUP BY o.owner_id, o.last_name ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;
  SELECT o.owner_id, o.last_name FROM Owners o JOIN (     SELECT d.owner_id     FROM Treatments t     JOIN Dogs d ON t.dog_id = d.dog_id     GROUP BY d.owner_id     ORDER BY SUM(t.cost_of_treatment) DESC     LIMIT 1 ) AS sub ON o.owner_id = sub.owner_id;
  SELECT t.treatment_type_description FROM Treatments tr JOIN Treatment_Types t ON tr.treatment_type_code = t.treatment_type_code GROUP BY t.treatment_type_code ORDER BY SUM(tr.cost_of_treatment) ASC LIMIT 1;
  SELECT t.treatment_type_description FROM Treatments tr JOIN Treatment_Types t ON tr.treatment_type_code = t.treatment_type_code GROUP BY t.treatment_type_code ORDER BY SUM(tr.cost_of_treatment) ASC LIMIT 1;
  SELECT o.owner_id, o.zip_code FROM Treatments t JOIN Dogs d ON t.dog_id = d.dog_id JOIN Owners o ON d.owner_id = o.owner_id GROUP BY o.owner_id, o.zip_code ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;
  SELECT o.owner_id, o.zip_code FROM Owners o JOIN (SELECT d.owner_id, SUM(t.cost_of_treatment) AS total_cost FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY d.owner_id ORDER BY total_cost DESC LIMIT 1) AS sub ON o.owner_id = sub.owner_id;
  SELECT p.professional_id, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id HAVING COUNT(DISTINCT t.treatment_type_code) >= 2;
  SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2)
  SELECT first_name, last_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments));
  SELECT p.first_name, p.last_name FROM Professionals p WHERE p.professional_id IN (     SELECT t.professional_id     FROM Treatments t     WHERE t.cost_of_treatment < (         SELECT AVG(cost_of_treatment) FROM Treatments     ) );
  SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
  SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
  SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments INNER JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
  SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments INNER JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
  SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;
  SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id INNER JOIN Sizes ON Dogs.size_code = Sizes.size_code;
  SELECT Owners.first_name, Dogs.name FROM Owners INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
  SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
  SELECT d.name, t.date_of_treatment FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id WHERE d.breed_code = (     SELECT breed_code     FROM (         SELECT Dogs.breed_code, COUNT(*) AS cnt         FROM Dogs         JOIN Breeds ON Dogs.breed_code = Breeds.breed_code         GROUP BY Dogs.breed_code     ) AS breed_counts     ORDER BY cnt ASC     LIMIT 1 );
  SELECT d.name, t.date_of_treatment FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id WHERE d.breed_code IN (     SELECT breed_code     FROM Dogs     GROUP BY breed_code     HAVING COUNT(*) = (         SELECT MIN(dog_count)         FROM (             SELECT COUNT(*) AS dog_count             FROM Dogs             GROUP BY breed_code         ) AS breed_counts     ) );
  SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'Virginia';
  SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'Virginia';
  SELECT DISTINCT d.date_arrived, d.date_departed FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id;
  SELECT d.date_arrived, d.date_departed FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id;
  SELECT o.last_name FROM Dogs d JOIN Owners o ON d.owner_id = o.owner_id ORDER BY d.date_of_birth DESC LIMIT 1;
  SELECT o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.date_of_birth = (SELECT MAX(date_of_birth) FROM Dogs);
  SELECT email_address FROM Professionals WHERE state = 'HI' OR state = 'WI';
  SELECT email_address FROM Professionals WHERE state = 'HI' OR state = 'WI';
  SELECT date_arrived, date_departed FROM Dogs;
  SELECT date_arrived, date_departed FROM Dogs;
  SELECT COUNT(DISTINCT dog_id) FROM Treatments;
  SELECT COUNT(DISTINCT dog_id) FROM Treatments;
  SELECT COUNT(DISTINCT professional_id) FROM Treatments;
  SELECT COUNT(DISTINCT professional_id) FROM Treatments;
  SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%';
  SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%';
  SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';
  SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';
  SELECT COUNT(*) FROM Dogs WHERE CAST(age AS UNSIGNED) < (SELECT AVG(CAST(age AS UNSIGNED)) FROM Dogs);
  SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(CAST(age AS DECIMAL)) FROM Dogs);
  SELECT cost_of_treatment FROM Treatments WHERE date_of_treatment = (SELECT MAX(date_of_treatment) FROM Treatments);
  SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;
  SELECT COUNT(*) FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.treatment_id IS NULL;
  SELECT COUNT(*) FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.treatment_id IS NULL;
  SELECT COUNT(*) FROM Owners LEFT JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.owner_id IS NULL;
  SELECT COUNT(*) FROM Owners LEFT JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.dog_id IS NULL;
  SELECT COUNT(*) FROM Professionals LEFT JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.professional_id IS NULL;
  SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments);
  SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1';
  SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1';
  SELECT AVG(age) FROM Dogs;
  SELECT AVG(CAST(age AS DECIMAL(10,2))) FROM Dogs;
  SELECT MAX(age) FROM Dogs;
  SELECT MAX(age) FROM Dogs;
  SELECT charge_type, SUM(charge_amount) AS total_cost FROM Charges GROUP BY charge_type;
  SELECT charge_type, charge_amount FROM Charges;
  SELECT MAX(charge_amount) FROM Charges;
  SELECT MAX(charge_amount) FROM Charges;
  SELECT email_address, home_phone, cell_number FROM Professionals;
  SELECT email_address, home_phone, cell_number FROM Professionals;
  SELECT breed_code, size_code FROM Breeds CROSS JOIN Sizes;
  SELECT DISTINCT b.breed_name, s.size_description FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code JOIN Sizes s ON d.size_code = s.size_code;
  SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals INNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id INNER JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
  SELECT p.first_name, t.treatment_type_description FROM Professionals p JOIN Treatments tr ON p.professional_id = tr.professional_id JOIN Treatment_Types t ON tr.treatment_type_code = t.treatment_type_code;
  SELECT COUNT(*) FROM singer;
  SELECT COUNT(*) FROM singer;
  SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
  SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
  SELECT Birth_Year, Citizenship FROM singer;
  SELECT Birth_Year, Citizenship FROM singer;
  SELECT Name FROM singer WHERE Citizenship != 'France';
  SELECT Name FROM singer WHERE Citizenship != 'France';
  SELECT Name FROM singer WHERE Birth_Year IN (1948.0, 1949.0);
  SELECT Name FROM singer WHERE Birth_Year = 1948.0 OR Birth_Year = 1949.0;
  SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;
  SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;
  SELECT Citizenship, COUNT(*) AS num_singers FROM singer GROUP BY Citizenship;
  SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship;
  SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1;
  SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship;
  SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship;
  SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;
  SELECT song.Title, singer.Name FROM song INNER JOIN singer ON song.Singer_ID = singer.Singer_ID;
  SELECT DISTINCT s.Name FROM singer s JOIN song sg ON s.Singer_ID = sg.Singer_ID WHERE sg.Sales > 300000;
  SELECT DISTINCT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Sales > 300000;
  SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(*) > 1);
  SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(*) > 1);
  SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Singer_ID;
  SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Singer_ID;
  SELECT Name FROM singer LEFT JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Song_ID IS NULL;
  SELECT s.Name FROM singer s LEFT JOIN song sg ON s.Singer_ID = sg.Singer_ID WHERE sg.Song_ID IS NULL;
  SELECT Citizenship FROM singer WHERE Birth_Year < 1945 AND Birth_Year > 1955;
  SELECT Citizenship FROM singer WHERE Birth_Year < 1945 AND Birth_Year > 1955;
  SELECT COUNT(*) FROM Other_Available_Features;
  SELECT Ref_Feature_Types.feature_type_name FROM Other_Available_Features JOIN Ref_Feature_Types ON Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code WHERE Other_Available_Features.feature_name = 'AirCon';
  SELECT property_type_description FROM Ref_Property_Types;
  SELECT property_name FROM Properties WHERE property_type_code IN ('House', 'Apartment') AND room_count > 1;
