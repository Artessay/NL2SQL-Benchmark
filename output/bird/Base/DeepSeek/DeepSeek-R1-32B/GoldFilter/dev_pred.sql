SELECT MAX(`Free Meal Count (K-12)` / `Enrollment (K-12)`) AS eligible_free_rate  FROM frpm  WHERE `County Name` = 'Alameda'; 
SELECT * FROM (     SELECT          `Educational Option Type`,          `Enrollment  (Ages 5-17)`,          `Free Meal Count  (Ages 5-17)`,          (`Free Meal Count  (Ages 5-17)` / `Enrollment  (Ages 5-17)`) AS eligible_free_rate     FROM frpm ) AS calculated_rates ORDER BY eligible_free_rate ASC LIMIT 3; 
  SELECT `Zip` FROM `schools`   JOIN `frpm` ON `schools`.`CDSCode` = `frpm`.`CDSCode`   WHERE `frpm`.`Charter School (Y/ N)` = 1 AND `frpm`.`District Name` = 'Fresno County Office of Education';
SELECT s.MailStreet FROM frpm f  JOIN schools s ON f.CDSCode = s.CDSCode  ORDER BY `FRPM Count (K-12)` DESC  LIMIT 1; 
  SELECT s.Phone FROM schools s INNER JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`Charter School  (Y/NN)` = 1 AND s.OpenDate > '2000-01-01';  Note: The correct column name in the WHERE clause should be `f.Charter School  (Y/N)` as per the schema provided.
  SELECT COUNT(*) FROM satscores  JOIN schools ON satscores.cds = schools.CDSCode  WHERE AvgScrMath > 400 AND Virtual = 'F';
  SELECT schools.School FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.NumTstTakr > 500 AND schools.Magnet = 1;
SELECT s.Phone  FROM schools s  JOIN satscores ss ON s.CDSCode = ss.cds  WHERE ss.NumGE1500 IS NOT NULL  ORDER BY ss.NumGE1500 DESC LIMIT 1; 
SELECT s.NumTstTakr FROM satscores s JOIN (     SELECT CDSCode     FROM frpm     WHERE FRPM = (SELECT MAX(FRPM) FROM frpm) ) f ON s.cds = f.CDSCode; 
SELECT COUNT(DISTINCT frpm.CDSCode) AS CountEndingWith835 FROM frpm JOIN satscores ON RIGHT(satscores.cds, 7) = frpm.CDSCode WHERE LEFT(satscores.cds, 6) = '110017' AND frpm.CDSCode LIKE '%835'; 
SELECT `FRPM Count (Ages 5-17)` FROM `frpm`  JOIN `satscores` ON `frpm`.`CDSCode` = `satscores`.`cds` ORDER BY `AvgScrRead` DESC LIMIT 1; 
SELECT `CDSCode` FROM `frpm` WHERE (`Enrollment (K-12)` + `Enrollment (Ages 5-17)`) > 500; 
SELECT MAX(`Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`) AS highest_rate  FROM frpm  JOIN satscores ON frpm.CDSCode = satscores.cds  WHERE NumGE1500 / NumTstTakr > 0.3 AND NumTstTakr IS NOT NULL AND NumTstTakr != 0; 
  SELECT s.Phone FROM satscores AS ss JOIN schools AS s ON ss.cds = s.CDSCode GROUP BY s.CDSCode, ss.cds ORDER BY (ss.NumGE1500 / IFNULL(ss.NumTstTakr, 0)) DESC LIMIT 3
  SELECT s.NCESSchool FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode ORDER BY f.[Enrollment (Ages 5-17)] DESC LIMIT 5;
  SELECT schools.District, MAX(satscores.AvgScrRead) AS HighestAvgReadingScore   FROM schools   JOIN satscores ON schools.CDSCode = satscores.cds   WHERE schools.StatusType = 'Active' AND satscores.AvgScrRead IS NOT NULL   GROUP BY schools.District   ORDER BY HighestAvgReadingScore DESC   LIMIT 1;
SELECT COUNT(*)  FROM satscores  JOIN schools ON CONCAT('0', satscores.cds) = schools.CDSCode  WHERE schools.County = 'Alameda' AND satscores.NumTstTakr < 100; 
SELECT RANK() OVER (ORDER BY s.AvgScrWrite DESC) AS Rank, s.AvgScrWrite, sc.CharterNum  FROM satscores s  JOIN schools sc ON s.cds = sc.CDSCode  WHERE s.AvgScrWrite > 499 AND sc.CharterNum IS NOT NULL  ORDER BY Rank; 
  SELECT COUNT(*) FROM satscores JOIN frpm USING (SchoolID) JOIN schools USING (SchoolID) WHERE schools.`County Name` = 'Fresno' AND frpm.`Charter Funding Type` = 'Direct' AND satscores.TotalTestTakers <= 250;
SELECT s.Phone  FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE ss.AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores); 
SELECT COUNT(*)  FROM frpm  JOIN schools ON frpm.CDSCode = schools.CDSCode  WHERE schools.County = 'Amador' AND frpm.LowGrade = '9' AND frpm.HighGrade = '12'; 
  SELECT COUNT(*) FROM frpm WHERE `County Name` = 'Los Angeles' AND `Free Meal Count (K-12)` > 500 AND `Free Meal Count (K-12)` < 700;
SELECT sname FROM satscores WHERE cname = 'Contra Costa' ORDER BY NumTstTakr DESC LIMIT 1; 
SELECT s.School, s.StreetAbr  FROM frpm f  JOIN schools s ON f.CDSCode = s.CDSCode  WHERE (f.`Enrollment (K-12)` - f.`Enrollment (Ages 5-17)`) > 30; 
SELECT `School Name` FROM frpm f JOIN satscores s ON substr(f.CDSCode, 2) = s.cds WHERE (f.`Free Meal Count` / f.Enrollment) > 0.1 AND s.NumGE1500 >= 1; 
WITH avg_math AS (     SELECT AVG(s.AvgScrMath) as overall_avg     FROM frpm f     JOIN satscores s ON f.CDSCode = s.sname     WHERE f.DistrictName = 'Riverside' ) SELECT DISTINCT f.FundingType FROM frpm f JOIN avg_math am WHERE f.DistrictName = 'Riverside' AND am.overall_avg > 400; 
  SELECT `frpm`.`School Name`, `schools`.`Street`, `schools`.`City`, `schools`.`State`, `schools`.`Zip`  FROM `frpm`  JOIN `schools` ON `frpm`.`CDSCode` = `schools`.`CDSCode`  WHERE `schools`.`County` = 'Monterey' AND `frpm`.`School Type` = 'High School' AND `frpm`.`Free Meal Count (Ages 5-17)` > 800;
SELECT s.School, s.Phone, sc.AvgScrWrite FROM schools AS s JOIN satscores AS sc ON s.CDSCode = sc.cds WHERE (s.OpenDate > '1991-01-01' OR s.ClosedDate < '2000-01-01'); 
SELECT s.School, s.DOC  FROM schools s  JOIN frpm f ON s.CDSCode = f.CDSCode  WHERE s.FundingType = 'Locally Funded'  AND (f.`Enrollment  (K-12)` - f.`Enrollment  (Ages 5-17)`) > (     SELECT AVG(f_inner.`Enrollment  (K-12)` - f_inner.`Enrollment  (Ages 5-17)`)     FROM schools s_inner      JOIN frpm f_inner ON s_inner.CDSCode = f_inner.CDSCode     WHERE s_inner.FundingType = 'Locally Funded' ); 
  WITH max_enrollment AS (     SELECT MAX(`Enrollment  (K-12)`) as max_e     FROM `frpm` ) SELECT s.OpenDate FROM `frpm` f JOIN `schools` s ON f.CDSCode = s.CDSCode WHERE f.`Enrollment  (K-12)` = (SELECT max_e FROM max_enrollment);
SELECT s.City, SUM(f.`Enrollment  (K-12)`) AS Total_Enrollment  FROM schools s  INNER JOIN frpm f ON s.CDSCode = f.CDSCode  GROUP BY s.City  ORDER BY Total_Enrollment ASC  LIMIT 5; 
  WITH ranked_schools AS (     SELECT          `Enrollment (K-12)`,         `Free Meal Count (K-12)`,         ROW_NUMBER() OVER (ORDER BY `Enrollment (K-12)` DESC) as rank     FROM frpm ) SELECT      rank,     (`Free Meal Count (K-12)` / `Enrollment (K-12)`) AS Eligible_Free_Rate FROM ranked_schools WHERE rank IN (10, 11);
SELECT frpm.CDSCode, `FRPM Count (K-12)`, `Enrollment (K-12)`, (`FRPM Count (K-12)` / `Enrollment (K-12)`) AS EligibleMealRate  FROM frpm  JOIN schools ON frpm.CDSCode = schools.CDSCode  WHERE schools.SOC = '66'  ORDER BY `FRPM Count (K-12)` DESC  LIMIT 5; 
SELECT `frpm`.`School Name`, `schools`.`Website`  FROM `frpm`  JOIN `schools` ON `frpm`.`CDSCode` = `schools`.`CDSCode`  WHERE `Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000; 
  SELECT (frpm.`Free Meal Count 5-17` / frpm.`Enrollment 5-17`) AS free_rate FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.AdmFName1 = 'Kacey' OR schools.AdmLName1 = 'Gibson';
SELECT s.AdmEmail1 FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE f.`Charter School (Y/NULL)` = 'Yes' ORDER BY f.`Enrollment (K-12)` ASC LIMIT 1; 
SELECT s.AdmFName1, s.AdmLName1, s.AdmFName2, s.AdmLName2, s.AdmFName3, s.AdmLName3  FROM schools AS s  JOIN (     SELECT cds      FROM satscores      WHERE NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores) ) AS sc ON s.CDSCode = sc.cds; 
SELECT s.Street, s.City, s.State, s.Zip  FROM satscores sc  JOIN schools s ON sc.cds = s.CDSCode  WHERE (sc.NumGE1500 / sc.NumTstTakr) = (     SELECT MIN(sc2.NumGE1500 / sc2.NumTstTakr)      FROM satscores sc2 ); 
  SELECT sc.Website FROM satscores s INNER JOIN schools sc ON sc.CDSCode = '0' || s.cds WHERE sc.County = 'Los Angeles' AND s.NumTstTakr >= 2000 AND s.NumTstTakr <= 3000 AND sc.Website IS NOT NULL;
  SELECT AVG(s.NumTstTakr) AS AvgTestTakers FROM satscores s JOIN schools sc ON s.cds = sc.CDSCode WHERE sc.County = 'Fresno' AND sc.OpenDate BETWEEN '1980-01-01' AND '1980-12-31';
SELECT s.Phone  FROM schools s  JOIN satscores ss ON s.CDSCode = ss.cds  WHERE s.District = 'Fresno Unified'  AND ss.AvgScrRead = (     SELECT MIN(AvgScrRead)      FROM satscores      WHERE cds IN (         SELECT CDSCode          FROM schools          WHERE District = 'Fresno Unified'     ) ); 
WITH RankedSchools AS (     SELECT          s.School,         s.Virtual,         sat.AvgScrRead,         RANK() OVER (PARTITION BY s.County ORDER BY sat.AvgScrRead DESC) AS RankInCounty     FROM          schools s     JOIN          satscores sat ON s.CDSCode = sat.cds     WHERE          s.Virtual = 'F' ) SELECT      School FROM      RankedSchools WHERE      Virtual = 'F' AND RankInCounty <= 5; 
SELECT s.EdOpsName  FROM schools s  JOIN satscores sc ON s.CDSCode = sc.cds  WHERE sc.AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores); 
SELECT s.AvgScrMath, sc.County  FROM satscores s  JOIN schools sc ON s.cds = sc.CDSCode  WHERE (COALESCE(s.AvgScrRead, 0) + COALESCE(s.AvgScrMath, 0) + COALESCE(s.AvgScrWrite, 0)) = (     SELECT MIN(COALESCE(AvgScrRead, 0) + COALESCE(AvgScrMath, 0) + COALESCE(AvgScrWrite, 0))      FROM satscores ); 
  WITH MaxTestTakers AS (     SELECT MAX(NumGE1500) AS MaxNum     FROM satscores ) SELECT AvgScrWrite, City FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE NumGE1500 = (SELECT MaxNum FROM MaxTestTakers);
  SELECT schools.School, satscores.AvgScrWrite FROM satscores  JOIN schools ON satscores.cds = schools.CDSCode  WHERE schools.AdmFName1 = 'Ricci' AND schools.AdmLName1 = 'Ulrich';
SELECT s.School, f."Enrollment (K-12)"  FROM frpm f  JOIN schools s ON f.CDSCode = s.CDSCode  WHERE s.DOC = '31'  ORDER BY f."Enrollment (K-12)" DESC; 
SELECT COUNT(*) / 12 AS MonthlyAverage  FROM schools  WHERE County = 'Alameda' AND DOC = 52 AND YEAR(OpenDate) = 1980; 
  SELECT      (COUNT(CASE WHEN County = 'Orange' AND DOC = '54' THEN 1 END) / COUNT(CASE WHEN DOC = '52' THEN 1 END)) AS Ratio FROM schools;
   SELECT County, COUNT(*) as cnt    FROM schools    WHERE StatusType = 'Closed'    GROUP BY County;    
SELECT s.School, s.Street FROM schools AS s  JOIN satscores AS sc ON s.CDSCode = sc.CDSCode  ORDER BY sc.AvgScrMath DESC  LIMIT 1 OFFSET 6; 
SELECT s.School, s.MailStreet, ss.AvgScrRead  FROM schools s  JOIN satscores ss ON s.CDSCode = ss.cds  WHERE ss.AvgScrRead IS NOT NULL  ORDER BY AvgScrRead ASC  LIMIT 1; 
SELECT COUNT(*) AS NumberOfSchools FROM satscores JOIN schools ON LPAD(satscores.cds, 14, '0') = schools.CDSCode WHERE (AvgScrRead + AvgScrMath + AvgScrWrite) >= 1500 AND mail_city = 'Lakeport'; 
  SELECT SUM(s.NumTstTakr) as total_test_takers   FROM satscores s   INNER JOIN schools sch ON s.cds = sch.CDSCode   WHERE sch.MailCity = 'Fresno';
  SELECT `School`, `MailZip` FROM `schools` WHERE `AdmFName1` = 'Avetik' AND `AdmLName1` = 'Atoian';
  SELECT (COUNT(CASE WHEN County = 'Colusa' THEN 1 END) / COUNT(CASE WHEN County = 'Humboldt' THEN 1 END)) AS Ratio   FROM schools   WHERE MailState = 'CA';
SELECT COUNT(*)  FROM schools  WHERE MailState = 'California'  AND City = 'San Joaquin'  AND StatusType = 'Active'; 
SELECT s.Phone, s.Ext  FROM schools s  JOIN (     SELECT cds      FROM satscores      WHERE AvgScrWrite IS NOT NULL      ORDER BY AvgScrWrite DESC      LIMIT 1 OFFSET 332 ) AS ranked_scores ON s.CDSCode = ranked_scores.cds; 
  SELECT School, Phone, Ext FROM schools WHERE Zip = '95203-3704';
  SELECT Website FROM schools WHERE (AdmFName1 = 'Mike' AND AdmLName1 = 'Larson') OR (AdmFName1 = 'Dante' AND AdmLName1 = 'Alvarez');
  SELECT Website FROM schools WHERE County = 'San Joaquin' AND Charter = 1 AND Virtual = 'P';
  SELECT COUNT(`School`) FROM `schools` WHERE `Charter`=1 AND `City`='Hickman' AND `DOC`=52;
SELECT COUNT(*) AS TotalNonCharteredSchools  FROM frpm  JOIN schools ON frpm.CDSCode = schools.CDSCode  WHERE schools.County = 'Los Angeles'  AND schools.Charter = 0  AND (`Free Meal Count (K-12)` * 100 / `Enrollment (K-12)`) < 0.18; 
  SELECT `School`, `City`, `AdmFName1`, `AdmLName1` FROM `schools` WHERE `Charter` = 1 AND `CharterNum` = '00D2';
SELECT COUNT(*) FROM schools WHERE MailCity = 'Hickman' AND CharterNum = '00D4'; 
  SELECT (COUNT(*) FILTER (WHERE FundingType = 'locally funded') / COUNT(*)) * 100 AS ratio FROM schools WHERE County = 'Santa Clara';
  SELECT COUNT(*) FROM schools WHERE County = 'Stanislaus' AND OpenDate >= '2000-01-01' AND OpenDate <= '2005-12-31' AND FundingType = 'Directly Funded';
  SELECT COUNT(*) FROM schools WHERE City = 'San Francisco' AND DOCType = 'Community College District' AND YEAR(ClosedDate) = 1989;
  SELECT County, COUNT(*) AS ClosureCount FROM schools WHERE SOC = '11' AND ClosedDate IS NOT NULL AND YEAR(ClosedDate) BETWEEN 1980 AND 1989 GROUP BY County ORDER BY ClosureCount DESC LIMIT 1;
  SELECT NCESDist FROM schools WHERE SOC = '31';
SELECT StatusType, COUNT(*) AS Count  FROM schools  WHERE County = 'Alpine' AND School LIKE '%District Community Day School%'  GROUP BY StatusType; 
SELECT f.`District Code`  FROM `frpm` AS f  JOIN `schools` AS s ON f.CDSCode = s.CDSCode  WHERE s.City = 'Fresno' AND s.Magnet = 0; 
SELECT SUM(`Enrollment  (Ages 5-17)`) FROM `frpm`  JOIN `schools` ON `frpm`.`CDSCode` = `schools`.`CDSCode`  WHERE `schools`.`EdOpsCode` = 'SSS' AND `schools`.`City` = 'Fremont'  AND `frpm`.`Academic Year` = '2014-2015'; 
  SELECT `FRPM Count (Ages 5-17)` FROM `frpm` JOIN `schools` ON `frpm`.`CDSCode` = `schools`.`CDSCode` WHERE `MailStreet` = 'PO Box 1040';
SELECT f.`Low Grade`  FROM frpm f  JOIN schools s ON f.CDSCode = s.CDSCode  WHERE s.NCESDist = '0613360'  AND s.EdOpsCode = 'SPECON'; 
SELECT s.School, s.EILName  FROM frpm f  INNER JOIN schools s ON f.CDSCode = s.CDSCode  WHERE f.`NSLP Provision Status` = 'Breakfast Provision 2' AND f.`County Code` = '37'; 
  SELECT `City` FROM `schools`  JOIN `frpm` ON `schools`.`CDSCode` = `frpm`.`CDSCode`  WHERE `frpm`.`NSLP Provision Status` = 'Breakfast Provision 2'  AND `frpm`.`Low Grade` = '9'  AND `frpm`.`High Grade` = '12'  AND `EILCode` = 'HS'  AND `County` = 'Merced';
SELECT s.School, (f.`FRPM Count  (Ages 5-17)` / f.`Enrollment  (Ages 5-17)` * 100) AS `Percent (%) Eligible FRPM (Ages 5-17)` FROM frpm f INNER JOIN schools s ON f.CDSCode = s.CDSCode WHERE s.County = 'Los Angeles' AND s.GSserved = 'K-9'; 
  SELECT GSserved AS GradeSpan FROM schools WHERE City = 'Adelanto' GROUP BY GradeSpan ORDER BY COUNT(*) DESC;
  SELECT County, COUNT(*) FROM schools WHERE Virtual = 'F' AND County IN ('San Diego', 'Santa Barbara') GROUP BY County ORDER BY COUNT(*) DESC;
SELECT `frpm`.`School Name`, `frpm`.`School Type`, `schools`.`Latitude` FROM `frpm` INNER JOIN `schools` ON `frpm`.`CDSCode` = `schools`.`CDSCode` ORDER BY `schools`.`Latitude` DESC LIMIT 1; 
SELECT s.City AS City, f.`School Name` AS SchoolName, f.`Low Grade` AS LowestGrade  FROM `frpm` f  JOIN `schools` s ON f.CDSCode = s.CDSCode  WHERE s.State = 'CA'  ORDER BY s.Latitude ASC  LIMIT 1; 
  SELECT GSoffered FROM schools ORDER BY ABS(longitude) DESC LIMIT 1
SELECT      s.City,     COUNT(DISTINCT s.CDSCode) AS NumberOfSchools,     SUM(CASE WHEN f.`NSLP Provision Status` = 'Multiple Provision Types' THEN 1 ELSE 0 END) AS MultipleProvisionTypesCount FROM     schools s JOIN     frpm f ON s.CDSCode = f.CDSCode WHERE     s.Magnet = 1 AND s.GSoffered = 'K-8' GROUP BY     s.City HAVING     NumberOfSchools > 0; 
-- Step 1: Create a temporary table or common table expression (CTE) for counting WITH NameCounts AS (     SELECT          AdmFName1,         COUNT(*) as freq     FROM schools     WHERE AdmFName1 IS NOT NULL     GROUP BY AdmFName1 )  -- Step 2: Select top two most frequent names along with their frequencies SELECT      AdmFName1,     freq FROM NameCounts ORDER BY freq DESC, AdmFName1 LIMIT 2;  -- Step 3: Retrieve associated districts for each of the top two names WITH TopNames AS (     SELECT          AdmFName1,         COUNT(*) as freq     FROM schools     WHERE AdmFName1 IS NOT NULL     GROUP BY AdmFName1     ORDER BY freq DESC, AdmFName1     LIMIT 2 )  SELECT      s.District,     t.AdmFName1,     t.freq FROM TopNames t JOIN schools s ON t.AdmFName1 = s.AdmFName1 ORDER BY t.freq DESC, t.AdmFName1, s.District; 
  SELECT `District Code`, (`Free Meal Count (K-12)` / `Enrollment  (K-12)`) * 100 AS `Percent Eligible Free (%)` FROM `frpm` JOIN `schools` ON `frpm`.`CDSCode` = `schools`.`CDSCode` WHERE `AdmFName1` = 'Alusine';
SELECT AdmLName1, District, County, School FROM schools WHERE CharterNum = '40'; 
  SELECT `AdmEmail1`, `AdmEmail2`, `AdmEmail3` FROM `schools` WHERE `County` = 'San Bernardino' AND `District` = 'City of San Bernardino City Unified' AND `OpenDate` BETWEEN '2009-01-01' AND '2010-12-31' AND (`SOC` = 62 OR `DOC` = 54) AND `StatusType` = 'Public';
-- Step 1: Find the maximum number of students scoring >=1500 WITH max_score AS (     SELECT MAX(num_ge_1500) AS max_num     FROM satscores )  -- Step 2: Retrieve all cds with that maximum score SELECT s.cds, sc.School_name, sc.AdmEmail1 FROM satscores s JOIN schools sc ON s.cds = sc.CDSCode WHERE s.num_ge_1500 = (     SELECT max_num FROM max_score ); 
  SELECT COUNT(*) FROM account JOIN district ON account.district_id = district.district_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND district.A3 = 'East Bohemia';
  SELECT COUNT(account.account_id) FROM account  JOIN district ON account.district_id = district.district_id  JOIN loan ON account.account_id = loan.account_id  WHERE district.A3 = 'Prague';
  SELECT AVG(A12) AS avg_1995, AVG(A13) AS avg_1996 FROM district;
  SELECT COUNT(*) FROM `district` WHERE `A11` > 6000 AND `A11` < 10000;
  SELECT COUNT(*) FROM client  JOIN district ON client.district_id = district.district_id  WHERE gender = 'M' AND A3 = 'North Bohemia' AND A11 > 8000;
WITH oldest_female AS (     SELECT MIN(birth_date) as oldest      FROM client      WHERE gender = 'F' ), female_districts AS (     SELECT c.district_id     FROM client c     WHERE c.gender = 'F' AND c.birth_date = (SELECT oldest FROM oldest_female) ), min_a11 AS (     SELECT MIN(d.A11) as min_val     FROM district d     WHERE d.district_id IN (SELECT district_id FROM female_districts) ), max_a11_overall AS (     SELECT MAX(A11) as max_val     FROM district ) SELECT a.account_id,         (SELECT min_val FROM min_a11) as min_a11,        (SELECT max_val FROM max_a11_overall) as max_a11,        ((SELECT max_val FROM max_a11_overall) - (SELECT min_val FROM min_a11)) as gap FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.A11 = (SELECT min_val FROM min_a11) AND a.district_id IN (SELECT district_id FROM female_districts); 
SELECT a.account_id FROM client c JOIN district d ON c.district_id = d.district_id JOIN account a ON d.district_id = a.district_id WHERE c.birth_date = (SELECT MAX(birth_date) FROM client) AND d.A11 = (SELECT MAX(A11) FROM district); 
SELECT COUNT(DISTINCT a.account_id)  FROM account a  JOIN disp d ON a.account_id = d.account_id  WHERE a.frequency = 'POPLATEK TYDNE' AND d.type = 'OWNER'; 
SELECT DISTINCT a.client_id FROM trans t JOIN account a ON t.account_id = a.account_id WHERE t.type = 'POPLATEK PO OBRATU'; 
SELECT a.account_id FROM account a JOIN loan l ON a.account_id = l.account_id WHERE YEAR(l.date) = 1997  AND l.amount = (     SELECT MIN(amount)      FROM loan      WHERE YEAR(date) = 1997 ) AND a.frequency = 'POPLATEK TYDNE'; 
  SELECT l.account_id  FROM loan l  WHERE l.duration > 12 AND YEAR(l.date) = 1993 GROUP BY l.account_id HAVING MAX(l.amount) ORDER BY l.amount DESC LIMIT 1;  # Note: The actual SQL may vary based on the exact requirements and schema details, especially regarding the account opening date.
SELECT COUNT(a.id) AS female_customers_count_in_sokolov FROM account a JOIN client c ON a.client_id = c.id JOIN address ad ON c.address_id = ad.id WHERE c.gender = 'F' AND c.dob < '1950-01-01' AND ad.district_name = 'Sokolov'; 
SELECT DISTINCT `account_id` FROM `trans` WHERE `date` = (SELECT MIN(`date`) FROM `trans` WHERE YEAR(`date`) = 1995); 
SELECT DISTINCT a.account_id FROM account a JOIN trans t ON a.account_id = t.account_id WHERE a.date < '1997-01-01' GROUP BY a.account_id HAVING SUM(t.amount) > 3000; 
SELECT d.client_id  FROM disp d  JOIN card c ON d.disp_id = c.disp_id  WHERE c.issued = '1994-03-03'; 
  SELECT `date` FROM `account` WHERE `account_
SELECT a.district_id  FROM loan l  INNER JOIN account a ON l.account_id = a.account_id  WHERE l.date = '1994-08-25'; 
  SELECT MAX(t.amount) AS biggest_transaction_amount FROM account a JOIN trans t ON a.account_id = t.account_id WHERE a.date = '1996-10-21';
SELECT gender  FROM client  WHERE district_id = (SELECT district_id FROM district WHERE A11 = (SELECT MAX(A11) FROM district))  ORDER BY birth_date ASC  LIMIT 1; 
SELECT amount  FROM trans  WHERE account_id = (     SELECT account_id      FROM loan      ORDER BY amount DESC      LIMIT 1 )  ORDER BY date ASC  LIMIT 1; 
SELECT COUNT(c.client_aid) AS FemaleCountInJesenik FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'F' AND d.A2 = 'Jesenik'; 
  SELECT `disp`.`disp_id` FROM `trans` INNER JOIN `disp` ON `trans`.`account_id` = `disp`.`account_id` WHERE `trans`.`amount` = 5100 AND `trans`.`date` = '1998-09-02';
  SELECT COUNT(a.account_id) FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.A2 = 'Litomerice' AND YEAR(a.date) = 1996;
  SELECT `A2` FROM `client` AS c JOIN `district` AS d ON c.`district_id` = d.`district_id` WHERE c.`gender` = 'F' AND c.`birth_date` = '1976-01-29';
SELECT birthdate FROM client WHERE customer_id = (     SELECT customer_id     FROM account     WHERE account_id = (         SELECT account_id         FROM loan         WHERE amount = 98832 AND date = '1996-01-03'     ) ); 
SELECT a.account_id  FROM account a  JOIN district d ON a.district_id = d.district_id  WHERE d.A3 = 'Prague'  ORDER BY a.date ASC  LIMIT 1; 
  WITH male_client_count AS (     SELECT COUNT(client_id) as male_count     FROM client      WHERE district_id = (         SELECT district_id          FROM district          WHERE A3 = 'south Bohemia'          ORDER BY A4 DESC          LIMIT 1     ) AND gender = 'M' ), total_client_count AS (     SELECT COUNT(client_id) as total_count     FROM client      WHERE district_id = (         SELECT district_id          FROM district          WHERE A3 = 'south Bohemia'          ORDER BY A4 DESC          LIMIT 1     ) ) SELECT (male_count / total_count) * 100 AS male_percentage FROM male_client_count, total_client_count;
SELECT      (b1.balance - b2.balance) / b2.balance * 100 AS increase_rate FROM (     SELECT          account_id,         balance_date,         balance     FROM trans     WHERE account_id = 2 AND balance_date <= '1993-03-22'     ORDER BY balance_date DESC LIMIT 1 ) b1, (     SELECT          account_id,         balance_date,         balance     FROM trans     WHERE account_id = 2 AND balance_date >= '1998-12-27'     ORDER BY balance_date ASC LIMIT 1 ) b2; 
SELECT      (SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) * 1.0 / SUM(amount)) * 100 AS percentage FROM loan; 
  SELECT (SUM(CASE WHEN amount < 100000 AND status = 'C' THEN amount ELSE 0 END) / SUM(amount)) * 100 AS percentage FROM loan;
SELECT a.account_id, d.A2 AS district_name, d.A3 AS district_region  FROM account a  JOIN district d ON a.district_id = d.district_id  WHERE YEAR(a.date) = 1993 AND a.frequency = 'POPLATEK PO OBRATU'; 
  SELECT `account`.`account_id`, `account`.`frequency` FROM `account` JOIN `district` ON `account`.`district_id` = `district`.`district_id` WHERE `district`.`A3` = 'east Bohemia' AND `account`.`date` BETWEEN '1995-01-01' AND '2000-12-31';
  SELECT account.account_id, account.date FROM account JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Prachatice';
SELECT d.A2 AS district, d.A3 AS region  FROM loan l  JOIN account a ON l.account_id = a.account_id  JOIN district d ON a.district_id = d.district_id  WHERE l.loan_id = 4990; 
  SELECT loan.account_id, district.A2 AS district, district.A3 AS region FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.amount > 300000;
  SELECT l.loan_id, d.A2 AS district, d.A11 AS average_salary FROM loan l INNER JOIN account a ON l.account_id = a.account_id INNER JOIN district d ON a.district_id = d.district_id WHERE l.duration = 60;
SELECT d.district_id AS state, ((d.A13 - d.A12) / d.A12 * 100) AS unemployment_rate_increment  FROM loan l  JOIN account a ON l.account_id = a.account_id  JOIN district d ON a.district_id = d.district_id  WHERE l.status = 'D'; 
SELECT      (COUNT(a.account_id) / (SELECT COUNT(*) FROM account WHERE YEAR(date) = 1993)) * 100 AS percentage FROM      account a JOIN      district d ON a.district_aid = d.district_aid WHERE      d.A2 = 'Decin' AND YEAR(a.date) = 1993; 
  The database schema provided does not include a table or column that contains information about the "monthly issuance of statements" (`POPLATEK MESICNE`). Therefore, it's impossible to write an SQL query for this question with the current schema.  If there were an additional table (e.g., `statements`) that includes a field indicating whether the statement is issued monthly, such as a boolean or a flag, the query would involve joining the `account` table with that other table and filtering based on the monthly issuance criteria. However, since this information is not present in the provided schema, no corresponding SQL query can be formulated.  If you provide the complete database schema with all relevant tables and columns, I can help formulate the appropriate SQL query for your question.
SELECT d.A2, COUNT(a.account_id) AS female_account_holders FROM account a JOIN customer c ON a.customer_id = c.customer_id WHERE c.gender = 'F' GROUP BY d.A2 ORDER BY female_account_holders DESC LIMIT 9; 
SELECT d.A2 AS DistrictName, COUNT(t.account_id) AS Withdrawals  FROM trans t  INNER JOIN account a ON t.account_id = a.account_id  INNER JOIN district d ON a.district_id = d.district_id  WHERE t.type = 'VYDAJ' AND t.date LIKE '1996-01%'  GROUP BY d.A2  ORDER BY Withdrawals DESC  LIMIT 10; 
SELECT COUNT(DISTINCT c.client_id) AS num_account_holders_without_credit_cards FROM client c JOIN district d ON c.district_id = d.district_id WHERE d.A3 = 'South Bohemia' AND EXISTS (     SELECT 1 FROM disp di WHERE di.client_id = c.client_id AND di.type = 'OWNER' ); 
SELECT district.A3 AS district_name, SUM(loan.amount) AS total_active_loan  FROM loan  JOIN account ON loan.account_id = account.account_id  JOIN district ON account.district_id = district.district_id  WHERE loan.status IN ('C', 'D')  GROUP BY district.A3  ORDER BY total_active_loan DESC  LIMIT 1; 
SELECT AVG(l.amount) AS average_loan_amount FROM loan l  JOIN account a ON l.account_id = a.account_id  JOIN client c ON a.district_id = c.district_id  WHERE c.gender = 'M'; 
  SELECT A2 AS district_name FROM district WHERE A13 = (SELECT MAX(A13) FROM district);
SELECT COUNT(*)  FROM account  WHERE district_id = (     SELECT district_id      FROM district      WHERE A16 = (SELECT MAX(A16) FROM district) ); 
SELECT COUNT(DISTINCT a.account_id) AS count FROM account a  JOIN trans t ON a.account_id = t.account_id  WHERE a.frequency = 'POPLATEK MESICNE' AND t.operation = 'VYBER KARTOU' AND t.balance < 0; 
SELECT COUNT(*)  FROM account a  JOIN loan l ON a.account_id = l.account_id  WHERE a.frequency = 'POPLATEK MESICNE'  AND l.date BETWEEN '1995-01-01' AND '1997-12-31'  AND l.amount >= 250000; 
  SELECT COUNT(DISTINCT a.account_id)  FROM account a  JOIN loan l ON a.account_id = l.account_id  WHERE a.district_id = 1 AND (l.status = 'C' OR l.status = 'D');
SELECT COUNT(*)  FROM client  WHERE district_id = (     SELECT district_id      FROM district      ORDER BY A15 DESC      LIMIT 1 OFFSET 1 ) AND gender = 'M'; 
SELECT      COUNT(*) AS high_level_credit_cards  FROM      card c      JOIN disposition d ON c.id = d.id  WHERE      c.type = 'gold' AND      d.type = 'OWNER'; 
  SELECT COUNT(*) FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.A2 = 'Pisek';
SELECT a.district_id FROM account a JOIN trans t ON a.account_id = t.account_id WHERE YEAR(t.date) = 1997 GROUP BY a.district_id HAVING SUM(t.amount) > 10000; 
SELECT DISTINCT t.account_id  FROM trans t  JOIN account a ON t.account_id = a.account_id  WHERE t.k_symbol = 'SIPO' AND a.district_id = (SELECT district_id FROM district WHERE A2 = 'Pisek'); 
SELECT DISTINCT a.account_id  FROM account a JOIN card c ON a.account_id = c.account_id WHERE c.type = 'gold'; 
SELECT      YEAR(t.date) AS year,     MONTH(t.date) AS month,     AVG(amount) AS average_amount FROM      trans t JOIN      disp d ON t.account_id = d.account_id JOIN      card c ON d.disp_id = c.disp_id WHERE      t.operation = 'VYBER KARTOU' AND YEAR(t.date) = 2021 GROUP BY      year, month; 
WITH cte AS (     SELECT          account_id,         amount,         AVG(amount) OVER (PARTITION BY account_id) as avg_amount     FROM trans     WHERE operation = 'VYBER KARTOU'      AND YEAR(date) = 1998 ) SELECT DISTINCT account_id FROM cte WHERE amount < avg_amount; 
SELECT DISTINCT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_aid JOIN card crd ON d.disp_id = crd.disp_aid JOIN loan l ON d.account_aid = l.account_aid WHERE c.gender = 'F'; 
  SELECT COUNT(*) AS female_clients_count  FROM `client`  JOIN `district` ON `client`.`district_id` = `district`.`district_id`  WHERE `client`.`gender` = 'F' AND `district`.`A3` = 'south Bohemia';
  SELECT DISTINCT a.account_id  FROM account a JOIN disp d ON a.account_id = d.account_aid JOIN district dis ON a.district_id = dis.district_id WHERE d.type = 'OWNER' AND dis.A2 = 'Tabor';
SELECT DISTINCT disp.type  FROM disp  JOIN account ON disp.account_id = account.account_id  JOIN district ON account.district_id = district.district_id  WHERE disp.type != 'OWNER' AND district.A11 > 8000 AND district.A11 <= 9000; 
SELECT COUNT(a.account_id) AS num_accounts  FROM account a  JOIN district d ON a.district_id = d.district_id  JOIN trans t ON a.account_id = t.account_id  WHERE d.A3 = 'North Bohemia' AND t.account = 'AB'; 
  SELECT `district`.`A2` FROM `district`  JOIN `account` ON `district`.`district_id` = `account`.`district_ id`  JOIN `trans` ON `account`.`account_ id` = `trans`.`account_ id`  WHERE `trans`.`type` = 'VYDAJ' AND `trans`.`account_ id` IS NOT NULL;
  SELECT AVG(d.A15)  FROM district d  JOIN account a ON d.district_id = a.district_id  WHERE d.A15 > 4000 AND YEAR(a.date) >= 1997;
SELECT COUNT(*)  FROM card  JOIN disp ON card.disp_id = disp.disp_ id  WHERE card.type = 'classic' AND disp.type = 'OWNER'; 
SELECT COUNT(*) FROM client c JOIN district d ON c.district_id = d.district_id WHERE d.A2 = 'Hl. m. Praha' AND c.gender = 'M'; 
  SELECT      COUNT(*) / (SELECT COUNT(*) FROM card) * 100.0 as percent_gold_issued_prior_to_1998 FROM      card WHERE      type = 'gold' AND issued < '1998-01-01';
SELECT d.client_id  FROM disp d  WHERE d.account_id = (     SELECT l.account_id      FROM loan l      ORDER BY l.amount DESC      LIMIT 1 )  AND d.type = 'OWNER'; 
  SELECT district.A15 FROM account JOIN district ON account.district_id = district.district_id WHERE account.account_id = 532;
SELECT a.district_id  FROM account a  JOIN `order` o ON a.account_id = o.account_id  WHERE o.order_id = 33333; 
SELECT t.* FROM trans t  INNER JOIN disp d ON t.account_id = d.account_aid  WHERE d.client_id = 3356 AND t.operation = 'VYBER'; 
  The SQL query counts the number of weekly issuance accounts with loans under 200,000. Given that no accounts have the weekly frequency, the result is zero.  SELECT COUNT(*)  FROM account a JOIN loan l ON a.account_id = l.account_id  WHERE a.frequency = 'POPLATEK TYDNE' AND l.amount < 200000;
SELECT c.type  FROM card c JOIN disp d ON c.disp_ id = d.disp_ id WHERE d.client_ id = 13539; 
SELECT district.A3 AS region  FROM client  JOIN district ON client.district_id = district.district_id  WHERE client.client_id = 3541; 
SELECT d.district_id, COUNT(*) AS count FROM `loan` l JOIN `account` a ON l.account_id = a.account_id WHERE l.status = 'A' GROUP BY d.district_id ORDER BY count DESC; 
SELECT c.client_id  FROM `order` o JOIN `account` a ON o.account_id = a.account_id JOIN `client` c ON a.district_id = c.district_id WHERE o.order_id = 32423; 
SELECT * FROM trans  JOIN account ON trans.account_aid = account.account_id  WHERE account.district_id = 5; 
SELECT COUNT(*)  FROM account  JOIN district ON account.district_id = district.district_id  WHERE A2 = 'Jesenik'; 
SELECT disp.client_id  FROM card  JOIN disp ON card.disp_id = disp.disp_id  WHERE card.type = 'junior' AND card.issued >= '1997-01-01'; 
SELECT      (COUNT(c.client_id) * 100.0 /       (SELECT COUNT(*) FROM client c2 JOIN district d2 ON c2.district_id = d2.district_id WHERE d2.A11 > 10000))      AS percentage_women  FROM      client c  JOIN      district d ON c.district_id = d.district_id  WHERE      d.A11 > 10000 AND c.gender = 'F'; 
SELECT      SUM(CASE WHEN YEAR(loan.date) = 1996 THEN amount ELSE 0 END) AS sum_1996,     SUM(CASE WHEN YEAR(loan.date) = 1997 THEN amount ELSE 0 END) AS sum_1997,     ((SUM(CASE WHEN YEAR(loan.date) = 1997 THEN amount ELSE 0 END) - SUM(CASE WHEN YEAR(loan.date) = 1996 THEN amount ELSE 0 END)) / NULLIF(SUM(CASE WHEN YEAR(loan.date) = 1996 THEN amount ELSE 0 END), 0)) * 100 AS growth_rate FROM      loan INNER JOIN      disp ON loan.account_id = disp.account_id INNER JOIN      client ON disp.client_id = client.client_id WHERE      client.gender = 'M'; 
  SELECT COUNT(*) FROM trans WHERE operation = 'VYBER KARTOU' AND date > '1995-12-31';
  SELECT     (SELECT SUM(A16) FROM district WHERE A3 = 'North Bohemia') -     (SELECT SUM(A16) FROM district WHERE A3 = 'East Bohemia');
SELECT `type`, COUNT(*) FROM `disp` WHERE `account_id` BETWEEN 1 AND 10 GROUP BY `type`; 
WITH summary AS (     SELECT          COUNT(CASE WHEN k_symbol = 'SIPO' AND account_id = 3 THEN 1 END) AS statement_requests,         k_symbol,         SUM(amount) AS total_amount     FROM `order`     WHERE account_id = 3     GROUP BY k_symbol ) SELECT      statement_requests AS "How often does account number 3 request an account statement?",     k_symbol AS "Purpose of debiting",     total_amount AS "Total amount debited" FROM summary; 
SELECT YEAR(birth_date) FROM client WHERE client_id = 130; 
  SELECT COUNT(DISTINCT `account`.`account_id`)  FROM `account`  JOIN `disp` ON `account`.`account_id` = `disp`.`account_id`  WHERE `disp`.`type` = 'OWNER' AND `account`.`frequency` = 'POPLATEK PO OBRATU';
SELECT      c.client_id,     SUM(l.amount) AS total_loan_amount,     COUNT(CASE WHEN l.status = 'paid' THEN 1 ELSE NULL END) AS num_paid_loans,     COUNT(CASE WHEN l.status = 'default' THEN 1 ELSE NULL END) AS num_defaulted_loans FROM      client c JOIN      account a ON c.district_id = a.district_id JOIN      loan l ON a.account_id = l.account_id WHERE      c.client_id = 992 GROUP BY      c.client_id; 
python    import pandas as pd     # Create client DataFrame    client = pd.DataFrame({        'gender': ['F', 'M', 'F', 'M', 'F'],        'district': [18, 1, 18, 5, 5],        'client_id': [1, 2, 1, 2, 3]    })     # Create data DataFrame    data = pd.DataFrame({        'key': [18, 19],        'value': [200, 450]    }, columns=['key', 'value'])     # Rename key to district for clarity    data.rename(columns={'key': 'district'}, inplace=True)     # Merge on district    merged = client.merge(data, on='district', how='left')    
SELECT c.type FROM card c JOIN disp d ON c.disp_id = d.disp_id WHERE d.client_id = 9; 
SELECT SUM(amount) AS total_paid FROM trans WHERE account_id IN (SELECT account_aid FROM account WHERE district_id IN (SELECT district_id FROM client WHERE client_id = 617)) AND YEAR(date) = 1998; 
SELECT c.client_id FROM client c JOIN account a ON c.district_id = a.district_id -- Assuming same district links client and account WHERE c.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND a.district_id IN (     SELECT d.id      FROM district d      WHERE d.name = 'East Bohemia' ); 
python import pandas as pd  # Read data from CSV files loans = pd.read_csv('loans.csv') accounts = pd.read_csv('accounts.csv') clients = pd.read_csv('clients.csv')  # Merge loans with accounts to get the district for each loan loans_with_district = pd.merge(loans, accounts, on='account_id', how='left')  # Sum the loan amounts by district district_loan_sums = loans_with_district.groupby('district_id')['amount'].sum().reset_index()  # Count the number of clients in each district client_counts = clients.groupby('district_id').size().reset_index(name='num_clients')  # Calculate the average loan amount per client in each district district_avg_loans = pd.merge(district_loan_sums, client_counts, on='district_id', how='left') district_avg_loans['avg_amount'] = district_avg_loans['amount'] / district_avg_loans['num_clients']  # Merge clients with the average loan amounts based on their district clientloan = pd.merge(clients, district_avg_loans[['district_id', 'avg_amount']], on='district_id', how='left')  print(clientloan) 
SELECT COUNT(DISTINCT c.client_id) AS male_customers_count FROM client c JOIN account a ON c.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id WHERE c.gender = 'M' AND c.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND t.k_symbol = 'SIPO' AND t.amount > 4000; 
SELECT COUNT(*) FROM account  JOIN district ON account.district_id = district.district_id  WHERE district.A2 = 'Beroun' AND account.date > '1996-01-01'; 
SELECT COUNT(DISTINCT cl.id) AS female_junior_cardholders FROM card c JOIN disp d ON c.disp_id = d.id JOIN client cl ON d.client_id = cl.id WHERE cl.gender = 'F' AND c.type = 'junior'; 
SELECT      (COUNT(CASE WHEN c.gender = 'F' THEN 1 END) / COUNT(*)) * 100 AS female_percentage FROM      client c JOIN      district d ON c.district_id = d.district_id WHERE      d.A3 = 'Prague'; 
SELECT      (COUNT(CASE WHEN c.gender = 'M' THEN 1 END) / COUNT(a.frequency)) * 100 AS male_weekly_percentage FROM      client c JOIN      account a ON c.district_id = a.district_id WHERE      a.frequency = 'POPLATEK TYDNE'; 
SELECT COUNT(DISTINCT a.account_id) AS num_owner_weekly_accounts FROM trans t JOIN account a ON t.account_id = a.account_id WHERE t.type = 'PRIJEM'   AND t.operation = 'VKLAD'   AND t.k_symbol = 'POPLATEK TYDNE'   AND a.status = 'Owner'; 
SELECT * FROM loan WHERE duration < 12 AND YEAR(date) >= 2015; 
WITH oldest_females AS (     SELECT district_id     FROM client     WHERE gender = 'F' AND birth_date = (SELECT MIN(birth_date) FROM client WHERE gender = 'F') ), min_a11_districts AS (     SELECT district_id     FROM district     WHERE A11 = (         SELECT MIN(A11)         FROM district         WHERE district_id IN (SELECT district_id FROM oldest_females)     ) ) SELECT a.account_id FROM account a WHERE a.district_id IN (SELECT district_id FROM min_a11_districts); 
SELECT COUNT(*) AS number_of_clients FROM client  JOIN district ON client.district_id = district.district_id  WHERE YEAR(birth_ate) = 1920 AND A3 = 'east Bohemia'; 
SELECT COUNT(*)  FROM loan l  JOIN account a ON l.account_id = a.account_id  WHERE l.duration = 24 AND a.frequency = 'POPLATEK TYDNE'; 
SELECT AVG(payments) AS average_loan_amount  FROM loan  JOIN account ON loan.account_id = account.account_aid  WHERE (status = 'C' OR status = 'D') AND frequency = 'POPLATEK PO OBRATU'; 
SELECT d.client_aid AS client_id, dis.A2 AS district FROM disp d JOIN account a ON d.account_aid = a.account_aid JOIN district dis ON a.district_id = dis.district_id WHERE d.type = 'OWNER'; 
SELECT c.client_id, (YEAR(CURRENT_DATE) - YEAR(c.birth_date)) AS age  FROM client c  JOIN disp d ON c.client_id = d.client_id  JOIN card crd ON d.disp_aid = crd.disp_aid  WHERE crd.type = 'gold' AND d.type = 'OWNER'; 
SELECT bond_type, COUNT(bond_type) AS type_count FROM bond GROUP BY bond_type ORDER BY type_count DESC LIMIT 1; 
  SELECT COUNT(DISTINCT a.molecule_id) AS count FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '-' AND a.element = 'cl';
SELECT AVG(COUNT_O) AS average_oxygen FROM (     SELECT COUNT(CASE WHEN element = 'o' THEN 1 ELSE 0 END) AS count_o      FROM atom      WHERE molecule_id IN (         SELECT molecule_id          FROM bond          WHERE bond_type = '-'     )     GROUP BY molecule_id ); 
SELECT (SUM(bond_count) / SUM(atom_count)) AS average FROM (     SELECT          m.molecule_id,         COUNT(b.molecule_id) AS bond_count,         (SELECT COUNT(*) FROM atom WHERE molecule_id = m.molecule_id) AS atom_count     FROM         molecule m     LEFT JOIN         bond b ON m.molecule_id = b.molecule_id AND b.bond_type = '-'     WHERE         m.label = '+'     GROUP BY         m.molecule_id ) AS subquery; 
SELECT COUNT(DISTINCT m.molecule_id)  FROM molecule m  JOIN atom a ON m.molecule_id = a.molecule_id  WHERE a.element = 'na' AND m.label = '-'; 
  SELECT DISTINCT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '#' AND m.label = '+';
  To determine the percentage of carbon atoms among all atoms in molecules containing at least one double bond, follow these steps:  1. **Identify Molecules with Double Bonds**:    - From the bond table, locate all molecule IDs where the bond type is '=' (double bond).     2. **Extract Atoms from These Molecules**:    - Use the identified molecule IDs to gather all atoms from the atom table that belong to these molecules.  3. **Count Carbon and Total Atoms**:    - Count how many of these atoms are carbon ('C').    - Count the total number of atoms in these molecules.  4. **Calculate Percentage**:    - If there are no atoms (e.g., a molecule with a double bond but no recorded atoms), the percentage is undefined.    - Otherwise, use the formula:        \[      \text{Percentage} = \left( \frac{\text{Number of Carbon Atoms}}{\text{Total Number of Atoms}} \right) \times 100      \]  **Final Answer**:  There are no atoms recorded for molecules with double bonds in the provided data. Therefore, it's not possible to determine a meaningful percentage.   \boxed{0\%}
  SELECT COUNT(*) FROM bond WHERE bond_type = '#';
SELECT COUNT(*) FROM atom WHERE element != 'br'; 
SELECT COUNT(*) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+'; 
  SELECT DISTINCT molecule_id FROM atom WHERE element = 'c';
  SELECT element FROM atom JOIN connected ON atom.atom_id = connected.atom_id WHERE bond_id = 'TR004_8_9';
SELECT element FROM atom WHERE molecule_id IN (SELECT molecule_id FROM bond WHERE bond_type = '='); 
  SELECT m.label  FROM `atom` a JOIN `molecule` m ON a.molecule_id = m.molecule_id  WHERE a.element = 'h'  GROUP BY m.label  HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM `atom` WHERE element = 'h' GROUP BY molecule_id) t);
  SELECT DISTINCT bond.bond_type FROM atom  JOIN connected ON atom.atom_id = connected.atom_id  JOIN bond ON connected.bond_id = bond.bond_id  WHERE atom.element = 'cl';
  SELECT DISTINCT c.atom_id, c.atom_id2 FROM connected AS c   JOIN bond AS b ON c.bond_id = b.bond_id   WHERE b.bond_type = '-';
  SELECT c.atom_id FROM connected c JOIN atom a ON c.atom_id = a.atom_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '-';
  SELECT element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '-' GROUP BY element ORDER BY COUNT(*) ASC LIMIT 1;
  SELECT `bond`.`bond_type` FROM `connected`  INNER JOIN `bond` ON `connected`.`bond_id` = `bond`.`bond__id`  WHERE (`connected`.`atom__id` = 'TR004_8' AND `connected`.`atom__id2` = 'TR004_20')  OR (`connected`.`atom__id` = 'TR004_20' AND `connected`.`atom__id2` = 'TR004_8');
SELECT label FROM molecule WHERE label NOT IN (     SELECT m.label FROM molecule m     WHERE EXISTS (         SELECT 1 FROM atom a         WHERE a.molecule_aid = m.molecule_id AND a.element != 'Sn'     ) ) GROUP BY label; 
SELECT COUNT(DISTINCT a.atom_id) AS count FROM atom a  WHERE a.element IN ('i', 's') AND a.molecule_id IN (     SELECT m.molecule_id FROM molecule m      WHERE NOT EXISTS (         SELECT 1 FROM bond b WHERE b.molecule_id = m.molecule_id AND b.bond_type != '-'     ) ); 
  SELECT c.atom_id, c.atom_id2  FROM connected AS c JOIN bond AS b ON c.bond_id = b.bond_id WHERE b.bond_type = '#';
(SELECT c1.atom_id2 AS connected_atom   FROM `gtrg` g   JOIN connected c1 ON g.原子号 = c1.atom_id  WHERE g.基因 = 'gtrg') UNION (SELECT c2.atom_id AS connected_atom   FROM `gtrg` g   JOIN connected c2 ON g.原子号 = c2.atom_id2  WHERE g.基因 = 'gtrg') AS all_connected  SELECT DISTINCT ac.connected_atom FROM all_connected ac JOIN atom a ON ac.connected_atom = a.atom_id WHERE a.gene IN ('gene1', 'gene2'); 
  SELECT ROUND((COUNT(DISTINCT m.molecule_id) / (SELECT COUNT(DISTINCT molecule_id) FROM molecule WHERE label = '+')) * 100, 2) AS percentage FROM atom a  JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '+' AND a.element <> 'f';
SELECT      (COUNT(bond.bond_type) * 100.0 /       (SELECT COUNT(*) FROM bond WHERE bond_type = '#')) AS percentage FROM      bond  JOIN      molecule ON bond.molecule_id = molecule.molecule_id WHERE      bond.bond_type = '#' AND molecule.label = '+'; 
  SELECT DISTINCT element FROM atom WHERE molecule_id = 'TR000' ORDER BY element LIMIT 3;
SELECT      bond_id,     SUBSTRING(bond_id, 7, 1) AS atom1,     SUBSTRING(bond_id, 9, 1) AS atom2 FROM bond WHERE molecule_id = 'TR001' AND bond_id = 'TR001_2_6'; 
  SELECT (COUNT(CASE WHEN label = '+' THEN 1 END) - COUNT(CASE WHEN label = '-' THEN 1 END)) AS difference FROM molecule;
SELECT DISTINCT atom_id FROM connected WHERE bond_id = 'TR000_2_5'; 
SELECT bond_id FROM connected WHERE atom_id2 = 'TR000_2'; 
SELECT DISTINCT molecule_id FROM bond WHERE bond_type = '=' ORDER BY molecule_id ASC LIMIT 5; 
SELECT ROUND((SUM(CASE WHEN bond_type = '=' THEN 1 ELSE 0 END) / NULLIF(COUNT(bond_id), 0)) * 100, 5) AS percent FROM bond WHERE molecule_id = 'TR008'; 
SELECT ROUND(DIVIDE(SUM(label = '+'), COUNT(molecule_id)) * 100, 3) AS percent FROM molecule; 
SELECT ROUND((COUNT(CASE WHEN element = 'h' THEN 1 END) / COUNT(*) * 100), 4) AS percent FROM atom WHERE molecule_id = 'TR206'; 
SELECT bond_type FROM bond WHERE molecule_id = 'TR000'; 
  SELECT a.element, m.label FROM atom AS a INNER JOIN molecule AS m ON a.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR060';
  SELECT bond_type FROM bond WHERE molecule_id = 'TR010' GROUP BY bond_type ORDER BY COUNT(*) DESC LIMIT 1;   SELECT label FROM molecule WHERE molecule_id = 'TR010';    The first query finds the majority bond type, while the second determines if the molecule is carcinogenic based on its label.
  SELECT molecule.molecule_id FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '-' AND molecule.label = '-' GROUP BY molecule.molecule_id ORDER BY COUNT(*) DESC LIMIT 3;
WITH tr006_atoms AS (     SELECT atom_id      FROM atom      WHERE molecule_id = 'TR006' ), bonds AS (     SELECT DISTINCT          atom_1,         atom_2     FROM connected     WHERE atom_1 IN (SELECT atom_id FROM tr006_atoms)       AND atom_2 IN (SELECT atom_id FROM tr006_atoms) ) SELECT      CASE          WHEN atom_1 < atom_2 THEN atom_1 || '_' || atom_2         ELSE atom_2 || '_' || atom_1     END AS bond_id FROM bonds ORDER BY bond_id LIMIT 2; 
SELECT COUNT(DISTINCT b.bond_id) AS count_bonds  FROM bond b  JOIN connected c ON b.bond_id = c.bond_id  WHERE b.molecule_id = 'TR009'  AND (c.atom_id = 'TR009_12' OR c.atom_id2 = 'TR009_12'); 
  SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+' AND a.element = 'br';
  SELECT      b.bond_type,     c.atom_id AS atom1,     c(atom_ id2) AS atom2 FROM      bond b JOIN      connected c ON b.bond_ id = c.bond_ id WHERE      b.bond_ id = 'TR001_6_9';
  SELECT m.molecule_id, m.label FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.atom_id = 'TR001_10';
SELECT COUNT(DISTINCT molecule_id) FROM bond WHERE bond_type = '#'; 
  SELECT COUNT(*) FROM connected WHERE atom_id LIKE '%_19';
  SELECT element FROM atom WHERE molecule_id = 'TR004';
  SELECT COUNT(*) FROM molecule WHERE label = '-';
SELECT DISTINCT m.molecule_id  FROM atom a  INNER JOIN molecule m ON a.molecule_id = m.molecule_id  WHERE SUBSTR(a.atom_aid, 7, 2) BETWEEN '21' AND '25'  AND m.label = '+'; 
  SELECT bond_id FROM connected c JOIN atom a ON c.atom_id = a.atom_id GROUP BY bond_id HAVING COUNT(CASE WHEN a.element = 'p' THEN 1 END) >= 1 AND COUNT(CASE WHEN a.element = 'n' THEN 1 END) >= 1;
  SELECT m.label FROM bond b JOIN (     SELECT COUNT(*) as max_double_bonds     FROM bond     WHERE bond_type = '='     GROUP BY molecule_id     ORDER BY COUNT(*) DESC     LIMIT 1 ) tb ON b.bond_type = '=' AND b.molecule_id IN (     SELECT molecule_id     FROM bond     WHERE bond_type = '='     GROUP BY molecule_id     HAVING COUNT(*) = tb.max_double_bonds ) JOIN molecule m ON b.molecule_id = m.molecule_id GROUP BY m.label;
SELECT (COUNT(c.atom_id) / COUNT(DISTINCT a(atom_id))) AS average_bonds FROM atom a LEFT JOIN connected c ON a.atom_id = c.atom_id WHERE a.element = 'i'; 
SELECT b.bond_type, c.bond_id  FROM connected c  JOIN bond b ON c.bond_id = b.bond_id  WHERE TO_NUMBER(SUBSTR(c.atom_id, 7, 2)) = 45; 
SELECT element, COUNT(*) as count  FROM atom  LEFT JOIN connected ON atom.atom_id = connected.atom_id  WHERE connected.atom_id IS NULL  GROUP BY element; 
  SELECT DISTINCT a.atom_id FROM atom a  JOIN connected c ON a.atom_id = c.atom_id  JOIN bond b ON c.bond_id = b.bond_id  WHERE b.molecule_id = 'TR041' AND b.bond_type = '#';
  SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id WHERE c.bond_id = 'TR144_8_19';
SELECT molecule_id FROM molecule WHERE label = '+'; 
WITH element_counts AS (     SELECT element, COUNT(*) as cnt     FROM atom a     JOIN molecule m ON a.molecule_id = m.molecule_id     WHERE m.label = '+'     GROUP BY element ) SELECT element FROM element_counts WHERE cnt = (SELECT MIN(cnt) FROM element_counts); 
  SELECT DISTINCT c1.atom_id2 AS bonded_atom FROM atom a JOIN connected c1 ON a.atom_id = c1.atom_id WHERE a.element = 'pb' UNION SELECT DISTINCT c2.atom_id AS bonded_atom FROM atom a JOIN connected c2 ON a.atom_id = c2.atom_id2 WHERE a.element = 'pb';
SELECT DISTINCT a.element  FROM atom a  JOIN connected c ON a.atom_id = c.atom_aid  WHERE c.bond_id IN (     SELECT bond_id FROM bond WHERE bond_type = '#' ); 
WITH bond_pairs AS (     SELECT          CASE WHEN a.atom_id < b.atom_id THEN a.atom_id ELSE b.atom_id END as atom1,         CASE WHEN a.atom_id < b.atom_id THEN b.atom_id ELSE a.atom_id END as atom2     FROM bonds a, bonds b     WHERE a.bond_id = b.bond_id AND a.atom_id != b.atom_id ), pair_counts AS (     SELECT atom1, atom2, COUNT(*) as count     FROM bond_pairs     GROUP BY atom1, atom2 ), max_count AS (     SELECT MAX(count) as max_cnt     FROM pair_counts ) SELECT      pc.atom1,     pc.atom2,     pc.count as max_count,     (pc.count / total_bonds.total) * 100 as percentage FROM pair_counts pc,       max_count mc,      (SELECT COUNT(*)/2 as total FROM bonds) total_bonds WHERE pc.count = mc.max_cnt ORDER BY atom1, atom2 LIMIT 1; 
  SELECT ROUND((SUM(CASE WHEN m.label = '+' THEN 1 ELSE 0 END) / NULLIF(COUNT(b.bond_id), 0)) * 100, 5) AS proportion FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '-';
SELECT COUNT(*) FROM atom WHERE element IN ('c', 'h'); 
SELECT c.atom_id2 AS connected_atom FROM connected c WHERE c.atom_id IN (     SELECT a.id     FROM atoms a     WHERE a.element = 's' ); 
  SELECT bond.bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'sn';
SELECT COUNT(*)  FROM atom  WHERE molecule_id IN (     SELECT DISTINCT molecule_id      FROM bond      WHERE bond_type = '-' ); 
SELECT COUNT(*)  FROM atom  WHERE molecule_id IN (     SELECT molecule_id      FROM bond      WHERE bond_type = '#'      GROUP BY molecule_id ) AND (element = 'p' OR element = 'br'); 
  SELECT bond.bond_id FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+';
  SELECT molecule.molecule_id FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '-' AND molecule.label = '-';
SELECT     (SUM(CASE WHEN a.element = 'cl' THEN 1 ELSE 0 END) / COUNT(a.atom_id)) * 100 AS percentage FROM     atom a WHERE     a.molecule_id IN (         SELECT DISTINCT b.molecule_id          FROM bond b          WHERE b.bond_type = '-'     ); 
  SELECT label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002');
SELECT molecule_id FROM molecule WHERE label = '-'; 
  SELECT COUNT(*) FROM molecule WHERE label = '+';
SELECT bond_type  FROM bond WHERE      LENGTH(molecule_id) = 5 AND -- Ensures the ID is in TRXXX format with exactly three digits after TR     CAST(SUBSTRING(molecule_id, 3) AS INTEGER) >= 0 AND      CAST(SUBSTRING(molecule_id, 3) AS INTEGER) <= 50; 
SELECT a.element  FROM atom a  INNER JOIN connected c ON a.atom_id = c.atom_id  WHERE c.bond_id = 'TR001_10_11'; 
  SELECT COUNT(DISTINCT `bond`.`bond_id`) FROM `atom` JOIN `bond` ON `atom`.`molecule_id` = `bond`.`molecule_id` WHERE `element` = 'i';
SELECT COUNT(molecule_id) as count, label FROM molecule WHERE molecule_id IN (SELECT DISTINCT molecule_id FROM atom WHERE element = 'ca') GROUP BY label; 
SELECT      (EXISTS (         SELECT 1          FROM connected c          JOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id         WHERE c.bond_id = 'TR001_1_8' AND a.element = 'cl'     ) AND EXISTS (         SELECT 1          FROM connected c          JOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id         WHERE c.bond_id = 'TR001_1_8' AND a.element = 'c'     )) AS has_both; 
  SELECT DISTINCT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN atom a ON m.molecule_id = a.molecule_id WHERE b.bond_type = '#' AND a.element = 'c' AND m.label = '-' LIMIT 2;
  SELECT      (SUM(CASE WHEN element = 'cl' THEN 1 ELSE 0 END) / COUNT(molecule_id)) * 100 AS percentage FROM atom WHERE molecule_id IN (     SELECT molecule_id FROM molecule WHERE label = '+' );
  SELECT `element` FROM `atom` WHERE `molecule_id` = 'TR001';
SELECT molecule_id  FROM bond  WHERE bond_type = '='; 
SELECT c.atom_id, c.atom_id2  FROM connected c  WHERE c.bond_id IN (     SELECT b.bond_id      FROM bond b      WHERE b.bond_type = '#' ); 
SELECT element  FROM atoms  WHERE atom_id IN (     SELECT atom_id      FROM connected      WHERE bond_id = 'TR000_1_2'     UNION     SELECT atom_id2      FROM connected      WHERE bond_id = 'TR000_1_2' ); 
SELECT COUNT(*) FROM `bond`  JOIN `molecule` ON `bond`.`molecule_id` = `molecule`.`molecule_id`  WHERE `bond`.`bond_type` = '-' AND `molecule`.`label` = '-'; 
SELECT m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_id = 'TR001_10_11'; 
  SELECT bond.bond_id, molecule.label   FROM bond   JOIN molecule ON bond.molecule_id = molecule.molecule_id   WHERE bond.bond_type = '#';
SELECT      `element` AS Toxicology_Element,     COUNT(*) AS Tally FROM      `atom` JOIN      `molecule` ON `atom`.`molecule_id` = `molecule`.`molecule_id` WHERE      `molecule`.`label` = '+'     AND SUBSTR(`atom`.`atom_ id`, 7, 1) = '4' GROUP BY      `element`; 
SELECT      (SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END) / COUNT(element)) AS h_ratio,      m.label  FROM      atom a  JOIN      molecule m ON a.molecule_id = m.molecule_id  WHERE      a.molecule_id = 'TR006'; 
SELECT a.molecule_id, m.label  FROM atom a  JOIN molecule m ON a.molecule_id = m.molecule_id  WHERE a.element = 'ca'  GROUP BY a.molecule_id  HAVING MAX(m.label) = '+'; 
  SELECT DISTINCT b.bond_type  FROM atom a  JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c(atom_id2)  JOIN bond b ON c.bond_id = b.bond_id  WHERE a.element = 'c';
  SELECT element FROM atom  WHERE atom_id IN (     SELECT atom_id FROM connected WHERE bond_id = 'TR001_10_11' );
  SELECT (COUNT(CASE WHEN bond_type = '#' THEN 1 END) / COUNT(*)) * 100 FROM bond;
SELECT      COUNT(bond_1.bond_id) AS total_bonds,     (COUNT(CASE WHEN bond_2.bond_type = '=' THEN 1 ELSE NULL END) / COUNT(bond_1.bond_id)) * 100 AS percent_double_bond FROM      bond AS bond_1 WHERE      bond_1.molecule_id = 'TR047' GROUP BY      bond_1.molecule_id; 
SELECT m.label  FROM atom a  JOIN molecule m ON a.molecule_id = m.molecule_id  WHERE a.atom_id = 'TR001_1'; 
  SELECT label FROM molecule WHERE molecule_id = 'TR151';
  SELECT      element AS toxic_element,     CASE         WHEN element = 'cl' THEN 'Chlorine'     END AS description FROM atom WHERE molecule_id = 'TR151';
  SELECT COUNT(*) FROM molecule WHERE label = '+';
  SELECT atom_id FROM atom WHERE element = 'c' AND molecule_id LIKE 'TR%' AND substr(molecule_id, 3, 3) >= '10' AND substr(molecule_id, 3, 3) <= '50';
  SELECT COUNT(`atom_id`) AS number_of_atoms FROM `atom` INNER JOIN `molecule` ON `atom`.`molecule_id` = `molecule`.`molecule_id` WHERE `label` = '+' GROUP BY `molecule`.`molecule_id`;
SELECT bond.bond_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '=' AND molecule.label = '+'; 
  SELECT COUNT(*)  FROM `atom` AS a  JOIN `molecule` AS m ON a.`molecule_id` = m.`molecule_id`  WHERE a.`element` = 'h' AND m.`label` = '+';
  SELECT molecule_id FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.bond_id = 'TR000_1_2' AND (connected.atom_id = 'TR000_1' OR connected.atom_id2 = 'TR000_1');
SELECT atom.*, molecule.*  FROM atom  JOIN molecule ON atom.molecule_id = molecule.molecule_id  WHERE atom.element = 'c' AND molecule.label = '-'; 
SELECT      (COUNT(*) / (SELECT COUNT(molecule_id) FROM molecules)) * 100 AS percentage FROM (     SELECT m.molecule_id     FROM elements e     JOIN molecules m ON e.molecule_id = m.id     WHERE m.label = '+' AND e.element = 'H'     GROUP BY m.molecule_id ) qualified_entries; 
  SELECT * FROM molecule WHERE molecule_id = 'TR124';  The answer is that there is no entry for molecule TR124 in the database, so its carcinogenicity cannot be determined from this data.
  SELECT atom_id FROM atom WHERE molecule_id = 'TR186';
  SELECT bond_id FROM bond WHERE bond_type = 'TR007_4_19';
  SELECT DISTINCT a.element FROM atom AS a INNER JOIN connected AS c ON a.atom_id = c.atom_id WHERE c.bond_id = 'TR000_2_4';
SELECT      COUNT(*) AS double_bond_count,     CASE WHEN m.label = '+' THEN 'Yes' ELSE 'No' END AS is_carcinogenic FROM      bond b INNER JOIN molecule m ON b.molecule_id = m.molecule_id WHERE      b.bond_type = '=' AND m.molecule_id = 'TR006'; 
SELECT m.molecule_id, a.element FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+'; 
SELECT bond.bond_id, group_concat(connected.atom_id ORDER BY connected.atom_id) AS atoms  FROM bond  JOIN connected ON bond.bond_id = connected.bond_id  WHERE bond.bond_type = '-'  GROUP BY bond.bond_id; 
  WITH triple_bond_molecules AS (     SELECT          molecule_id     FROM          bond     WHERE          bond_type = '#'     GROUP BY          molecule_id ) SELECT      t.molecule_id,     GROUP_CONCAT(a.element) AS elements FROM      triple_bond_molecules t JOIN      atom a ON t.molecule_id = a.molecule_id GROUP BY      t.molecule_id;
SELECT element FROM atom WHERE atom_id IN (SELECT atom_id FROM connected WHERE bond_id = 'TR000_2_3'); 
