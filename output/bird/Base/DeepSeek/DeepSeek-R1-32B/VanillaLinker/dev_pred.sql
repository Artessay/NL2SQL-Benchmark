SELECT `frpm`.`Free Meal Count (K-12)` / `frpm`.`Enrollment (K-12)` AS eligible_free_rate  FROM `frpm`  JOIN `schools` ON `frpm`.`CDSCode` = `schools`.`CDSCode`  WHERE `schools`.`County` = 'Alameda'  ORDER BY eligible_free_rate DESC  LIMIT 1; 
SELECT CDSCode, `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` AS eligible_free_rate  FROM frpm  WHERE `School Type` = 'Continuation' AND `Enrollment (Ages 5-17)` > 0  ORDER BY eligible_free_rate ASC  LIMIT 3; 
SELECT DISTINCT s.Zip FROM schools AS s JOIN frpm AS f ON s.CDSCode = f.CDSCode WHERE f.[Charter School (Y/N)] = 1 AND f.[County Name] = 'Fresno' AND f.[District Type] = 'County Office of Education'; 
SELECT s.MailStreet FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode ORDER BY f.`FRPM Count (K-12)` DESC LIMIT 1; 
SELECT s.Phone  FROM schools s  INNER JOIN frpm f ON s.CDSCode = f.CDSCode  WHERE f.`Charter School (Y/N)` = 1 AND f.`Charter Funding Type` = 'Direct' AND s.OpenDate > '2000-01-01'; 
SELECT COUNT(*)  FROM satscores  JOIN schools ON satscores.cds = schools.CDSCode  WHERE AvgScrMath > 400 AND Virtual = 'F'; 
SELECT satscores.sname  FROM satscores  JOIN schools ON satscores.cds = schools.CDSCode  WHERE satscores.NumTstTakr > 500 AND schools.Magnet = 1  ORDER BY satscores.sname; 
SELECT `Phone`  FROM `schools`  WHERE `CDSCode` = (     SELECT `cds`      FROM `satscores`      WHERE `NumGE1500` = (         SELECT MAX(`NumGE1500`)          FROM `satscores`     )      LIMIT 1 ); 
SELECT s.NumTstTakr  FROM frpm f  INNER JOIN satscores s ON f.CDSCode = s.cds  ORDER BY f.`FRPM Count (K-12)` DESC  LIMIT 1; 
SELECT COUNT(*) AS directly_charter_funded_count FROM satscores JOIN frpm ON satscores.CDSCode = frpm.CDSCode WHERE AvgScrMath > 560 AND `Charter Funding Type` = 'Direct'; 
SELECT frpm.`FRPM Count (Ages 5-17)`  FROM frpm  JOIN satscores ON frpm.CDSCode = satscores.cds  WHERE satscores.AvgScrRead = (     SELECT MAX(AvgScrRead)      FROM satscores ) LIMIT 1; 
SELECT `CDSCode` FROM `frpm` WHERE (`Enrollment  (K-12)` + `Enrollment  (Ages 5-17)`) > 500; 
SELECT MAX(frpm.`Free Meal Count  (Ages 5-17)` / frpm.`Enrollment  (Ages 5-17)`) AS max_eligible_free_rate  FROM frpm  JOIN satscores ON frpm.CDSCode = satscores.cds  WHERE satscores.NumGE1500 / satscores.NumTstTakr > 0.3; 
SELECT s.Phone  FROM satscores sc  JOIN schools s ON sc.cds = s.CDSCode  WHERE sc.NumTstTakr > 0  ORDER BY (sc.NumGE1500 * 1.0 / sc.NumTstTakr) DESC  LIMIT 3; 
SELECT s.NCESSchool AS NCES_School_ID, f.`Enrollment  (Ages 5-17)` AS Enrollment FROM frpm f INNER JOIN schools s ON f.CDSCode = s.CDSCode ORDER BY `Enrollment  (Ages 5-17)` DESC LIMIT 5; 
SELECT s.dname AS DistrictName,        AVG(s.AvgScrRead) AS AvgReadingScore FROM satscores s INNER JOIN schools sc ON s.cds = sc.CDSCode WHERE sc.StatusType = 'Active' GROUP BY s.dname ORDER BY AvgReadingScore DESC LIMIT 1; 
SELECT COUNT(*) FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.County = 'Alameda' AND satscores.NumTstTakr < 100; 
SELECT      s.School,     ss.dname AS DistrictName,     ss.cname AS CountyName,     ss.AvgScrWrite,     s.CharterNum FROM      satscores ss INNER JOIN      schools s ON ss.cds = s.CDSCode WHERE      ss.AvgScrWrite > 499 AND s.CharterNum IS NOT NULL ORDER BY      RANK() OVER (ORDER BY ss.AvgScrWrite DESC); 
SELECT COUNT(*)  FROM satscores s  JOIN schools sc ON s.cds = sc.CDSCode  WHERE sc.County = 'Fresno' AND (sc.FundingType LIKE '%State Direct%' OR sc.FundingType LIKE '%Direct%') AND s.NumTstTakr <= 250; 
SELECT sc.Phone  FROM satscores s  JOIN schools sc ON s.cds = sc.CDSCode  WHERE s.AvgScrMath = (     SELECT MAX(satscores.AvgScrMath)      FROM satscores ); 
<think> Alright, so I need to figure out how to write an SQL query based on the user's question. The question is asking: "How many schools in Amador which the Low Grade is 9 and the High Grade is 12?"   First, I should understand the database schema provided. There are three tables: `frpm`, `satscores`, and `schools`. Since the question mentions schools in Amador with specific grade levels, I think the relevant table here is `frpm` because it contains information about grade levels (Low Grade and High Grade).   Looking at the `frpm` table, I see columns like `County Name`, `Low Grade`, and `High Grade`. So, to find schools in Amador with Low Grade 9 and High Grade 12, I need to query this table.   I remember that when writing SQL queries, we use the SELECT statement to specify what data we want. Since the question is asking for a count of schools, I'll use COUNT(*) which counts all rows that meet the criteria.  Next, I need to set up the WHERE clause to filter the results. The conditions are: 1. `County Name` should be 'Amador'. 2. `Low Grade` should be 9. 3. `High Grade` should be 12.  Putting it all together, my query structure would look like this:  SELECT COUNT(*) FROM frpm WHERE County Name = 'Amador' AND Low Grade = 9 AND High Grade = 12;  I also need to make sure that the column names are correctly referenced. Since `County Name`, `Low Grade`, and `High Grade` have spaces, I should enclose them in backticks or quotes depending on the SQL dialect. In this case, since the user didn't specify, I'll assume standard syntax where string literals are enclosed in single quotes.  Wait, actually, column names with spaces need to be handled carefully. In MySQL, you can use backticks around column names that have spaces. So, it might be better to write them as `County Name`, `Low Grade`, and `High Grade` to avoid any syntax errors.  So the final query would be: SELECT COUNT(*) FROM frpm WHERE `County Name` = 'Amador' AND `Low Grade` = 9 AND `High Grade` = 12;  Yes, that makes sense. This query will count all rows in the `frpm` table where the county is Amador and the school's low grade is 9 and high grade is 12, which should give the number of such schools. </think>  SELECT COUNT(*) FROM frpm WHERE `County Name` = 'Amador' AND `Low Grade` = 9 AND `High Grade` = 12;
<think> Okay, so I need to figure out how to write an SQL query based on the user's question. The question is asking: "In Los Angeles, how many schools have more than 500 free meals but less than 700 free or reduced price meals for K-12?"  First, let me break down what the user is asking for. They want to count the number of schools in Los Angeles where the total number of free and reduced-price meals (FRPM) for K-12 students is between 501 and 699.  Looking at the database schema provided, there are three tables: frpm, satscores, and schools. Since the question involves data about meal counts, I should focus on the frpm table because it contains fields related to free meals and FRPM counts.  The frpm table has a column called 'FRPM Count (K-12)', which seems relevant here. The user wants this count to be more than 500 and less than 700, so I'll need to filter the records where this condition is met.  Next, I need to ensure that we are only considering schools in Los Angeles. To get the location information, I should look into the schools table because it contains details about each school's county and district. The 'County' column in the schools table will help identify which schools are located in Los Angeles.  Since the frpm table is linked to the schools table via the CDSCode (as a foreign key), I can join these two tables on that column. This way, I can filter by both the meal counts and the county location.  Putting this together, I'll need to write an SQL query that joins the frpm and schools tables on CDSCode. Then, I'll apply the following conditions: 1. The 'County' from the schools table must be 'Los Angeles'. 2. The 'FRPM Count (K-12)' from the frpm table must be greater than 500 and less than 700.  Finally, I'll count the number of records that meet these criteria to get the answer.  I should also consider any potential issues, such as data types or null values. For example, if 'FRPM Count (K-12)' is a REAL type, comparing it with integers should be fine, but I might need to ensure there are no nulls in that column if they could affect the count.  So, step by step: 1. Select the CDSCode from frpm where FRPM Count (K-12) is between 501 and 699. 2. Join this with schools on CDSCode to get the county information. 3. Filter for schools in Los Angeles. 4. Count the number of such schools.  I think that's the approach. Now, I'll translate this into an SQL query without comments as per the user's request. </think>  SELECT COUNT(*)  FROM frpm  JOIN schools ON frpm.CDSCode = schools.CDSCode  WHERE schools.County = 'Los Angeles'  AND frpm.`FRPM Count (K-12)` > 500  AND frpm.`FRPM Count (K-12)` < 700;  The SQL query joins the `frpm` and `schools` tables on their common column `CDSCode`. It filters for schools in Los Angeles with a FRPM count between 501 and 699, then counts these records to provide the answer.
<think> Alright, I need to figure out how to write an SQL query that answers the question: "Which school in Contra Costa has the highest number of test takers?"   First, let's break down the problem. The goal is to find a specific school within a particular county (Contra Costa) that has the maximum number of students who took a test. This suggests I need to look for a table that contains information about test takers and their associated schools.  Looking at the database schema provided, there are three tables: `frpm`, `satscores`, and `schools`.   - The `frpm` table seems to contain data related to free and reduced-price meal programs but doesn't directly mention test takers. - The `satscores` table includes columns like `enroll12`, `NumTstTakr`, which are likely the number of students taking the SAT. This is a promising lead since the question is about test takers, probably referring to the SAT. - The `schools` table contains general information about each school, including its county.  So, I'll need to join the `satscores` and `schools` tables to get both the number of test takers and the county information.   Next, I should identify the relevant columns: - From `satscores`, I need `NumTstTakr` (number of test takers) and `cds` (the school code). - From `schools`, I need the `County` to filter for Contra Costa and probably the `School` name or another identifier to know which school it is.  The SQL query should: 1. Select the necessary columns: likely the school name, county, and number of test takers. 2. Filter the results to include only schools in Contra Costa. 3. Order the results by the number of test takers in descending order so that the highest comes first. 4. Limit the result to just one row since we're interested in the highest.  I also need to ensure that I'm joining the tables correctly using the `cds` column from `satscores` and the `CDSCode` from `schools` since these are primary keys that reference each other.  Putting it all together, the query should join `satscores` and `schools`, filter by county, order by test takers descending, and limit to one result. This will give me the school in Contra Costa with the highest number of test takers. </think>  SELECT schools.School, satscores.NumTstTakr FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.County = 'Contra Costa' ORDER BY NumTstTakr DESC LIMIT 1;
SELECT      s.School,     s.Street,     s.City,     s.State,     s.Zip FROM      frpm f JOIN      schools s ON f.CDSCode = s.CDSCode WHERE      ABS(f.`Enrollment  (K-12)` - f.`Enrollment  (Ages 5-17)`) > 30; 
<think> Alright, I need to figure out how to write an SQL query based on the user's question. The question is asking for the names of schools where two conditions are met: first, the percentage of students eligible for free meals in K-12 is more than 0.1 (which is 10%), and second, the number of test takers who scored 1500 or above on the SAT.  First, I'll break down the problem into parts. The user wants two conditions to be satisfied simultaneously, so I need to join the relevant tables and apply these conditions.  Looking at the database schema provided, there are three tables: `frpm`, `satscores`, and `schools`.   The `frpm` table contains information about free meals eligibility, including 'Free Meal Count (K-12)' and 'Enrollment (K-12)'. The percentage is calculated as Free Meal Count divided by Enrollment. So, the condition here is when this ratio exceeds 0.1.  Next, the `satscores` table has data about SAT test takers. The column 'NumGE1500' represents the number of students who scored 1500 or above. Therefore, we need to ensure that this number is greater than zero because we're interested in schools where at least one student achieved this score.  The `schools` table holds the names of the schools under the 'School' column and also contains other details like addresses, phone numbers, etc., which might not be necessary for this query. However, since we need the school names, joining with `schools` is essential.  Now, considering how to join these tables: both `frpm` and `satscores` have a foreign key reference to `schools` via 'CDSCode' and 'cds', respectively. So, I'll perform inner joins on `frpm` and `satscores` with the `schools` table using their respective primary keys.  The next step is applying the conditions. For the free meals percentage, I'll calculate it by dividing 'Free Meal Count (K-12)' by 'Enrollment (K-12)' and check if this value is greater than 0.1. Since both fields are REAL types, division should work without issues.  For SAT scores, I'll directly use the 'NumGE1500' column from `satscores` and ensure it's greater than or equal to 1. This ensures that at least one student scored 1500 or above.  The final part is selecting the school names. Since we're joining with `schools`, I can directly select the 'School' column from this table.  Putting it all together, the SQL query will join `frpm` and `satscores` with `schools`, apply the two conditions on their respective columns, and return the school names that meet both criteria. </think>  SELECT schools.School  FROM frpm  JOIN schools ON frpm.CDSCode = schools.CDSCode  JOIN satscores ON frpm.CDSCode = satscores.cd  WHERE (frpm.[Free Meal Count (K-12)] / frpm.[Enrollment (K-12)]) > 0.1  AND satscores.NumGE1500 >= 1;
SELECT      frpm.Name,     frpm.[Charter Funding Type] FROM      frpm JOIN      satscores  ON      frpm.CDSCode = satscores.cdscode WHERE      frpm.CountyName = 'Riverside'      AND satscores.AvgScrMath > 400; 
SELECT s.Name AS SchoolName, s.Street, s.City, s.State, s.ZipCode AS Zip FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.County = 'Monterey'   AND (f.FRPM_Count_Ages_5_17 > 800)   AND s.Name LIKE '%High School%'; 
<think> Okay, I need to figure out how to write an SQL query based on the user's question. Let me break down what they're asking for.  The question is: What is the average score in writing for schools opened after 1991 or closed before 2000? They want the school names along with the scores and also include any communication numbers, which I know refers to phone numbers.  Looking at the database schema, there are three tables: frpm, satscores, and schools. The schools table has information about each school, including when they opened (OpenDate) and closed (ClosedDate), as well as their phone number under 'Phone'. The satscores table contains SAT scores, specifically AvgScrWrite for the average writing score.  So, I need to join the schools and satscores tables. Since both have a CDSCode (primary key in schools) and cds (which is the same as CDSCode), I'll use that to link them.  The condition is that the school was opened after 1991 or closed before 2000. That translates to OpenDate > '1991-12-31' or ClosedDate < '2000-01-01'. I need to make sure the date format matches what's in the database.  I should select the school name from schools, the average writing score from satscores, and the phone number. If there's no phone number, it should show NULL instead of an error, so using COALESCE might be helpful but isn't strictly necessary as SQL handles NULLs gracefully.  Putting it all together, I'll write a SELECT statement that joins schools and satscores on their respective CDS codes, filters the rows based on the date conditions, and orders them by school name for clarity. The result will include the school name, average writing score, and phone number if available. </think>  SELECT s.`School`, ss.`AvgScrWrite`, s.`Phone`  FROM `schools` AS s  JOIN `satscores` AS ss ON s.`CDSCode` = ss.`cds`  WHERE (s.`OpenDate` > '1991-12-31' OR s.`ClosedDate` < '2000-01-01')  ORDER BY s.`School`;
SELECT      `School Name`,      `DOCType`  FROM      `frpm`  WHERE      `Charter Funding Type` = 'Local'      AND (`Enrollment  (K-12)` - `Enrollment  (Ages 5-17)`) > (         SELECT              AVG(`Enrollment  (K-12)` - `Enrollment  (Ages 5-17)`)          FROM              `frpm`          WHERE              `Charter Funding Type` = 'Local'     ) 
<think> Okay, I need to figure out how to write an SQL query based on the user's question. The question is: "When did the first-though-twelfth-grade school with the largest enrollment open?"   First, let me break down what the user is asking for. They want the opening date of the K-12 school that has the highest enrollment. Since K-12 refers to grades 1 through 12, I need to focus on schools that cover this range.  Looking at the database schema provided, there are three tables: frpm, satscores, and schools. The relevant information seems to be in the frpm table because it contains enrollment data for K-12 students under the column 'Enrollment (K-12)'.  So, my plan is to query the frpm table to find the school with the maximum 'Enrollment (K-12)'. Once I have that school's CDSCode, I can join it with the schools table to get the opening date from the 'OpenDate' column.  I remember that in SQL, to get the maximum value of a column, I use the MAX() function. Also, since there might be ties for the largest enrollment, but we only need one school, perhaps the first one encountered.  Wait, but how do I ensure that I'm selecting the correct row? Maybe using a subquery where I select the CDSCode from frpm where Enrollment is equal to the maximum value.  Alternatively, I can use ORDER BY and LIMIT to get the top result. That might be more efficient. Let me think: I'll order by 'Enrollment (K-12)' in descending order and take the first row.  Wait, but if two schools have the same enrollment, which one should be picked? The question doesn't specify, so perhaps any is acceptable, but for this case, we can just pick the first one.  So, I'll write a query that joins frpm and schools on CDSCode. Then, order by 'Enrollment (K-12)' descending and limit 1. Then select the OpenDate from that result.  Wait, but in SQL, when you want to get the maximum value along with other columns, sometimes it's better to use a subquery or a window function. Alternatively, I can just join the tables, group by CDSCode, and then order by enrollment descending.  But let me think about the structure:  SELECT OpenDate FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode ORDER BY(frpm.'Enrollment (K-12)' DESC) LIMIT 1  Wait, but does this give me the correct school? Because I'm ordering by enrollment descending and taking the first row. That should be the school with the largest enrollment.  But wait, what if there are multiple schools with the same maximum enrollment? The LIMIT 1 will just pick the first one in that case, which is acceptable unless more specific criteria is needed.  Alternatively, to make sure I'm getting the exact maximum, perhaps use a subquery where I find the max enrollment and then select all schools with that enrollment. But that might complicate things because there could be multiple schools, but since we just need one, maybe it's okay.  Wait, let me structure this step by step:  1. Identify the table with K-12 enrollment: frpm. 2. The column is 'Enrollment (K-12)'. 3. Find the maximum value in that column. 4. Get the CDSCode of the school(s) with that maximum enrollment. 5. Join with schools to get OpenDate.  So, perhaps using a subquery:  SELECT OpenDate FROM schools WHERE CDSCode = (     SELECT CDSCode     FROM frpm     ORDER BY 'Enrollment (K-12)' DESC     LIMIT 1 ) LIMIT 1;  But wait, that might not be the most efficient way. Alternatively, I can order the joined tables by enrollment descending and select OpenDate from the first row.  So, perhaps:  SELECT schools.OpenDate FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode ORDER BY frpm.'Enrollment (K-12)' DESC LIMIT 1;  That seems more straightforward. This query joins the two tables and orders by enrollment in descending order, then takes the first row's OpenDate.  I think that covers it. Now, let me write this as SQL without any comments. </think>  SELECT schools.OpenDate  FROM schools  JOIN frpm ON schools.CDSCode = frpm.CDSCode  ORDER BY frpm.'Enrollment (K-12)' DESC  LIMIT 1;
SELECT s.City, SUM(f.`Enrollment  (K-12)`) AS TotalEnrollment FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode GROUP BY s.City ORDER BY TotalEnrollment ASC LIMIT 5; 
SELECT `CDSCode`, (`Free Meal Count (K-12)` / `Enrollment (K-12)`) AS eligible_free_rate  FROM frpm  ORDER BY `Enrollment (K-12)` DESC  LIMIT 2 OFFSET 9; 
SELECT f.CDSCode AS School_ID,        f.`FRPM Count  (K-12)` / f.`Enrollment  (K-12)` AS Eligible_Rate  FROM frpm f  JOIN schools s ON f.CDSCode = s.CDSCode  WHERE s.Magnet = 66  ORDER BY f.`FRPM Count  (K-12)` DESC  LIMIT 5; 
SELECT `frpm`.`School Name`, `schools`.`Website`  FROM `frpm`  INNER JOIN `schools` ON `frpm`.`CDSCode` = `schools`.`CDSCode`  WHERE `frpm`.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000; 
SELECT      `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` AS free_rate  FROM      frpm  JOIN      schools ON frpm.CDSCode = schools.CDSCode  WHERE      (AdmFName1 LIKE '%Kacey%' OR AdmFName2 LIKE '%Kacey%')      AND (AdmLName1 LIKE '%Gibson%' OR AdmLName2 LIKE '%Gibson%'); 
SELECT AdmEmail1, AdmEmail2, AdmEmail3  FROM schools  INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode  WHERE `Charter School (Y/N)` = 1  ORDER BY `Enrollment  (K-12)` ASC  LIMIT 1; 
SELECT      CONCAT(s.AdmFName1, ' ', s.AdmLName1) AS Admin1,     CONCAT(s.AdmFName2, ' ', s.AdmLName2) AS Admin2,     CONCAT(s.AdmFName3, ' ', s.AdmLName3) AS Admin3 FROM      schools s WHERE      s.CDSCode = (         SELECT cds          FROM satscores          WHERE NumGE1500 = (             SELECT MAX(NumGE1500)              FROM satscores         )     ); 
<think> Okay, I need to figure out how to write an SQL query that answers the question: "What is the complete address of the school with the lowest excellence rate? Indicate the Street, City, Zip and State."   First, let's understand what the "excellence rate" is. From the extra knowledge provided, it's calculated as NumGE1500 divided by NumTstTakr. So, I need to compute this value for each school.  The goal is to find the school with the lowest excellence rate. Once we identify that school, we'll retrieve its complete address from the schools table, which includes Street, City, Zip, and State.  Looking at the database schema:  - The satscores table contains NumGE1500 and NumTstTakr, along with cds (which is the CDSCode). This seems to be where the excellence rate can be calculated. - The schools table has all the address details we need: Street, City, Zip, State.  So, I'll need to join these two tables on the cds/CDSCode field.   Step by step:  1. Calculate the Excellence Rate for each school using satscores.NumGE1500 / satscores.NumTstTakr. 2. Order the schools based on this rate in ascending order so that the lowest comes first. 3. Limit the result to just one record, which will be the school with the lowest excellence rate.  Wait, but I should consider if there are any NULL values or division by zero issues. However, since the question doesn't mention handling such edge cases, I'll proceed under the assumption that all necessary data is present and valid.  Next, structure the SQL query:  - SELECT the required address fields from schools. - JOIN with satscores on cds = CDSCode. - Calculate ExcellenceRate in the SELECT clause. - ORDER BY ExcellenceRate ASC to get the lowest first. - LIMIT 1 to get only that school's details.  Putting it all together, I think the correct SQL would be as follows. It selects the address fields from schools and joins with satscores to calculate the excellence rate, then orders and limits appropriately. </think>  SELECT `Street`, `City`, `Zip`, `State` FROM `schools`  JOIN `satscores` ON `schools`.`CDSCode` = `satscores`.`cds`  ORDER BY (`satscores`.`NumGE1500` / `satscores`.`NumTstTakr`) ASC LIMIT 1;
SELECT `Website` FROM `schools`  INNER JOIN `satscores` ON `schools`.`CDSCode` = `satscores`.`cds`  WHERE `County` = 'Los Angeles' AND `NumTstTakr` BETWEEN 2000 AND 3000; 
<think> Alright, I need to figure out how to answer the user's question using SQL. The question is: "What is the average number of test takers from Fresno schools that opened between 1/1/1980 and 12/31/1980?"   First, let's break down the requirements. I need to calculate the average number of test takers, which means I'll use the AVG() function in SQL. The data related to test takers is likely found in the satscores table, specifically the NumTstTakr column.  Next, the schools should be located in Fresno. Looking at the schema, the County field in the schools table indicates this. So, I'll include a condition where County equals 'Fresno'.  The schools must have opened between January 1, 1980, and December 31, 1980. The OpenDate field in the schools table captures this information. Therefore, I need to filter records where OpenDate falls within that date range.  Now, considering the database schema, the satscores table references schools via the cds (CDSCode) as a foreign key. So, I'll need to join these two tables on CDSCode.  Putting it all together, my SQL query should: 1. Select the average of NumTstTakr from the satscores table. 2. Join with the schools table on CDSCode. 3. Filter for schools in Fresno County. 4. Ensure the OpenDate is within 1980. 5. Group by or not, since we're just taking an overall average.  Wait, do I need to group by anything? Since it's a straightforward average and no grouping is required beyond the conditions, I can proceed without a GROUP BY clause.  I should also make sure that the date comparison correctly captures all of 1980. Using '1980-01-01' as the start and '1980-12-31' as the end covers the entire year accurately.  Finally, ensuring that the SQL syntax is correct, using proper table aliases for readability if needed, but since there are only two tables, it's manageable without them. </think>  SELECT AVG(s.NumTstTakr) AS Avg_Test_Takers   FROM satscores s   JOIN schools sc ON s.cds = sc.CDSCode   WHERE sc.County = 'Fresno' AND sc.OpenDate BETWEEN '1980-01-01' AND '1980-12-31';
SELECT s.Phone  FROM schools s  JOIN satscores sc ON s.CDSCode = sc.cds  WHERE s.District = 'Fresno Unified'  ORDER BY sc.AvgScrRead ASC  LIMIT 1; 
<think> Alright, I need to write an SQL query based on the user's question. Let me break down what they're asking for.  The user wants a list of names of virtual schools that are among the top 5 in their respective counties based on average reading scores. They also provided some extra knowledge: "Exclusively virtual refers to Virtual = 'F'; respective counties means PARTITION BY County." So, I need to make sure I incorporate these points.  First, let me look at the database schema they provided. There are three tables: frpm, satscores, and schools. The relevant columns for this query seem to be in the schools and satscores tables.  The schools table has a column called 'Virtual', which should be set to 'F' for exclusively virtual schools. So, I'll need to filter where Virtual = 'F'.  Next, the satscores table contains information about average reading scores. The columns are cds (which is the primary key and references CDSCode in schools), AvgScrRead, and other details. I need to join this with the schools table on CDSCode.  The main task is to rank schools within each county based on their average reading scores. For that, I'll use the RANK() function with a window partitioned by County. The window will order the scores in descending order so that higher scores get a lower (better) rank.  Now, considering the counties are specified by the 'County' column in the schools table, each county's top 5 schools should be identified. So, after ranking, I'll select only those rows where the rank is <=5.  Putting it all together:  1. Join the satscores and schools tables on CDSCode. 2. Filter for virtual schools by checking schools.Virtual = 'F'. 3. Partition the results by County and order each partition by AvgScrRead in descending order to get the highest scores first. 4. Assign ranks within each county. 5. Select only those rows where the rank is 1 through 5. 6. Finally, select the school names from these ranked schools.  I should also make sure that all necessary columns are included for ranking and selection. The County column is needed to partition by it, and the School name is required in the output.  Potential issues I might encounter:  - Ensuring that the join between satscores and schools is correct. - Correctly applying the window function with the right partitioning and ordering. - Making sure only virtual schools are considered.  I think the query should be something like this:   Start by selecting from schools, joining with satscores on cds = CDSCode. Then filter where Virtual = 'F'. Use a window function to rank each school within its county based on AvgScrRead descending. Finally, select the top 5 in each county and output their names.  Wait, I should also consider if there are enough schools in a county. For example, counties with fewer than 5 virtual schools would still show all of them. The RANK() function naturally handles that since it will only assign ranks up to the number of available rows.  I think this covers everything the user needs. </think>  SELECT s.School  FROM (     SELECT *, RANK() OVER (PARTITION BY County ORDER BY AvgScrRead DESC) AS rank     FROM schools      JOIN satscores ON schools.CDSCode = satscores.cds     WHERE Virtual = 'F' ) s WHERE s.rank <= 5;
SELECT f.`Educational Option Type` FROM satscores s JOIN frpm f ON s.cds = f.CDSCode ORDER BY s.AvgScrMath DESC LIMIT 1; 
SELECT s.AvgScrMath AS average_math_score, sc.County  FROM satscores s JOIN schools sc ON s.cds = sc.CDSCode  WHERE (s.AvgScrMath + s.AvgScrRead + s.AvgScrWrite) = (     SELECT MIN(s2.AvgScrMath + s2.AvgScrRead + s2.AvgScrWrite)     FROM satscores s2 ); 
SELECT sc.AvgScrWrite AS avg_writing_score, sch.City  FROM satscores sc  JOIN schools sch ON sc.cds = sch.CDSCode  WHERE sc.NumGE1500 >= 1 AND sc.NumGE1500 = (     SELECT MAX(sc2.NumGE1500)      FROM satscores sc2      WHERE sc2.NumGE1500 > 0 ); 
SELECT s.School AS SchoolName, ss.AvgScrWrite AS AverageWritingScore  FROM schools s  JOIN satscores ss ON s.CDSCode = ss.cds  WHERE (AdmFName1 = 'Ricci' AND AdmLName1 = 'Ulrich')  OR (AdmFName2 = 'Ricci' AND AdmLName2 = 'Ulrich')  OR (AdmFName3 = 'Ricci' AND AdmLName3 = 'Ulrich'); 
<think> Alright, I need to figure out how to write an SQL query that answers the question: "Which state special schools have the highest number of enrollees from grades 1 through 12?"   First, let me break down what's needed here. The question is asking about state special schools, which, according to the extra knowledge provided, refers to schools where DOC = 31. So I need to filter the schools table for records where DOC is 31.  Next, the grades in question are 1 through 12, which corresponds to K-12 education. Looking at the database schema, there's an Enrollment (K-12) column in the frpm table that seems relevant here. So I should select this column for the enrollment count.  The goal is to find the schools with the highest number of enrollees, so I'll need to sort the results in descending order based on the Enrollment (K-12) value and limit the output to the top entries.  Now, considering the tables involved: frpm, satscores, and schools. Since we're looking for state special schools, the primary table will be schools because it contains the DOC field. I'll need to join this with the frpm table to get the enrollment data.  So, the plan is: 1. Select the School Name from the schools table. 2. Join with the frpm table on CDSCode since that's the common key. 3. Filter where DOC = 31 in the schools table. 4. Order by Enrollment (K-12) in descending order to get the highest first. 5. Limit the results to a reasonable number, say top 10, unless specified otherwise.  I should make sure all joins are correctly referencing the primary keys and that the aliases for tables are clear. Also, need to ensure that the columns selected are appropriate—probably just the school name and enrollment count.  Wait, looking again at the schema, schools have CDSCode as the primary key, which is also referenced in frpm and satscores. So, joining schools with frpm on CDSCode makes sense.  So putting it all together: SELECT School Name from schools joined with frpm where DOC=31, order by Enrollment (K-12) descending, limit 10.  I think that covers everything. Now, translating this into SQL syntax. </think>  SELECT s.`School` AS `State Special School`, f.`Enrollment  (K-12)` AS `Total Enrollees K-12` FROM `schools` s JOIN `frpm` f ON s.`CDSCode` = f.`CDSCode` WHERE s.`DOC` = 31 ORDER BY f.`Enrollment  (K-12)` DESC LIMIT 10;
SELECT COUNT(*) / 12 AS MonthlyAverage  FROM schools  WHERE County = 'Alameda'      AND DOC = 52      AND YEAR(OpenDate) = 1980; 
SELECT      (COUNT(CASE WHEN DOC = 54 THEN 1 END) / COUNT(CASE WHEN DOC = 52 THEN 1 END)) AS Ratio FROM      schools WHERE      County = 'Orange'; 
SELECT County, School, ClosedDate  FROM schools  WHERE StatusType = 'Closed'  GROUP BY County, School, ClosedDate  ORDER BY COUNT(*) DESC; 
SELECT sc.School AS SchoolName,         (sc.Street || ', ' || sc.City) AS PostalStreetAddress  FROM satscores s  INNER JOIN schools sc ON s.cds = sc.CDSCode  WHERE s.cds IN (     SELECT cds      FROM satscores      ORDER BY AvgScrMath DESC      LIMIT 1 OFFSET 6 ); 
SELECT s.MailStreet AS MailingStreetAddress, s.School AS SchoolName  FROM schools s  INNER JOIN satscores sc ON s.CDSCode = sc.cds  ORDER BY sc.AvgScrRead ASC  LIMIT 1; 
<think> Alright, I'm trying to figure out how to answer this SQL query question. The user wants the total number of schools where the total SAT score is greater than or equal to 1500 and whose mailing city is Lakeport.  First, I need to understand the database schema provided. There are three tables: frpm, satscores, and schools. Since the question involves SAT scores, I should look at the satscores table. This table has columns like cds (which is the primary key), rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, and NumGE1500.  The user mentioned that the total SAT score is computed by adding AvgScrRead, AvgScrMath, and AvgScrWrite. So I'll need to sum these three columns in the satscores table.  Next, I have to consider the mailing city being Lakeport. The mailing city information is located in the schools table under the MailCity column. Since the cds in satscores corresponds to CDSCode in schools (as per the foreign key constraints), I'll need to join these tables on cds = CDSCode.  Now, putting it all together, I should write an SQL query that joins satscores and schools, filters by MailCity = 'Lakeport', calculates the total SAT score, checks if it's >=1500, and then counts those schools.  I need to make sure that the join is correct and that only the relevant records are considered. Also, since the user wants the count, I'll use COUNT(*) after applying all filters.  So, the steps in the query would be:  1. SELECT COUNT(*) as the result. 2. FROM satscores table. 3. JOIN with schools on cds = CDSCode. 4. WHERE MailCity = 'Lakeport'. 5. AND (AvgScrRead + AvgScrMath + AvgScrWrite) >= 1500.  I should also ensure that all column names are correctly referenced and that any potential null values in the SAT scores don't affect the calculation, but since the question doesn't specify handling nulls, I'll proceed under the assumption that the data is clean.  Finally, putting it into SQL syntax without comments as per the user's request. </think>  SELECT COUNT(*) FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.MailCity = 'Lakeport' AND (satscores.AvgScrRead + satscores.AvgScrMath + satscores.AvgScrWrite) >= 1500;
SELECT SUM(s.NumTstTakr) AS TotalTestTakers  FROM satscores s  JOIN schools sch ON s.cds = sch.CDSCode  WHERE sch.MailCity = 'Fresno'; 
<think> Okay, I need to figure out how to write an SQL query based on the user's question. Let me start by understanding what they're asking for.  The user wants all schools and their related mailing zip codes that are under Avetik Atoian's administration. So, I'm looking for schools where one of the administrators is Avetik Atoian, specifically focusing on the mailing zip code associated with those schools.  Looking at the database schema provided, there are three tables: frpm, satscores, and schools. The relevant table here seems to be the 'schools' table because it contains information about each school's administration and mailing details.  In the 'schools' table, I see fields like CDSCode (which is the primary key), various administrative fields such as AdmFName1, AdmLName1, etc., and mailing zip codes under MailZip. So, to find schools administered by Avetik Atoian, I need to check if either of the administrators' first and last names match.  The query should select the school name (School) and the mailing zip code (MailZip). The WHERE clause needs to look for cases where either AdmFName1 and AdmLName1 match 'Avetik Atoian', or AdmFName2 and AdmLName2 do, or AdmFName3 and AdmLName3. So, I'll have to use OR conditions for each possible administrator slot.  I should make sure that the query only selects distinct entries in case a school has multiple administrators with the same name, but it's likely each school will be listed once even if multiple admins match. However, using DISTINCT ensures no duplicates.  Putting it together, the SELECT statement grabs School and MailZip from schools where any of the administrator fields match Avetik Atoian. The WHERE clause is structured to check each possible admin pair with OR conditions.  I also need to ensure that the SQL syntax is correct. Each condition in the WHERE clause should correctly reference the columns and use string literals for comparison. Since the names are case-sensitive, I'll assume 'Avetik' and 'Atoian' are exact matches as provided.  Finally, I'll structure the query without any comments, as per the user's request. </think>  SELECT DISTINCT `School`, `MailZip` FROM `schools` WHERE (`AdmFName1` = 'Avetik' AND `AdmLName1` = 'Atoian') OR (`AdmFName2` = 'Avetik' AND `AdmLName2` = 'Atoian') OR (`AdmFName3` = 'Avetik' AND `AdmLName3` = 'Atoian');
SELECT      (COUNT(CASE WHEN `County` = 'Colusa' THEN 1 END) / COUNT(CASE WHEN `County` = 'Humboldt' THEN 1 END)) AS ratio FROM      schools WHERE      `MailState` = 'CA'; 
SELECT COUNT(*) FROM schools WHERE MailState = 'CA' AND City = 'San Joaquin' AND StatusType = 'Active'; 
WITH RankedScores AS (     SELECT          s.cds,         ss.AvgScrWrite,         ROW_NUMBER() OVER (ORDER BY ss.AvgScrWrite DESC) AS rn     FROM          schools s     JOIN          satscores ss ON s.CDSCode = ss.cds ) SELECT      s.Phone,      s.Ext FROM      RankedScores rs JOIN      schools s ON rs.cds = s.CDSCode WHERE      rs.rn = 333; 
<think> Okay, I need to figure out how to write an SQL query based on the user's question. The question asks for the phone number and extension of a school with the zip code 95203-3704 and also wants the school's name.  First, I'll look at the database schema provided. There are three tables: frpm, satscores, and schools. Since the user is asking about the school's phone number and extension, I should check which table contains this information.  Looking at the 'schools' table, it has columns like Phone and Ext, which seem relevant. The primary key here is CDSCode, so any query referencing other tables would probably need to join on this field. But since the question only asks about the school's details, I don't think we need to involve the other tables unless there are missing pieces.  Next, the user provided a zip code: 95203-3704. In the 'schools' table, there's a Zip column that could hold this value. So I can use a WHERE clause to filter by this Zip.  So the structure of my query will be selecting Phone and Ext from the schools table where Zip equals 95203-3704. But wait, the user also wants the school's name. The 'School' column in the schools table should provide that, so I'll include it as well.  Putting this together, the SELECT statement will include School, Phone, and Ext. The FROM clause is just the schools table. The WHERE condition is on Zip being equal to 95203-3704.  I need to make sure about the data types. Since Zip is a TEXT field in the 'schools' table, the value should be treated as a string in SQL. So I'll put it in quotes as '95203-3704'.  Now, considering if there are multiple schools with that zip code, but since the user didn't specify any further details, we can assume they just want all matching records.  So the final query will be:  SELECT School, Phone, Ext FROM schools WHERE Zip = '95203-3704';  I think this should retrieve the necessary information without joining other tables since all required columns are in the 'schools' table. </think>  SELECT `School`, `Phone`, `Ext` FROM `schools` WHERE `Zip` = '95203-3704';
SELECT Website FROM schools WHERE (AdmFName1 = 'Mike' AND AdmLName1 = 'Larson') OR (AdmFName2 = 'Mike' AND AdmLName2 = 'Larson') OR (AdmFName3 = 'Mike' AND AdmLName3 = 'Larson') OR (AdmFName1 = 'Dante' AND AdmLName1 = 'Alvarez') OR (AdmFName2 = 'Dante' AND AdmLName2 = 'Alvarez') OR (AdmFName3 = 'Dante' AND AdmLName3 = 'Alvarez'); 
<think> Alright, let's tackle this SQL problem step by step. The user is asking for the websites of all the partially virtual chartered schools located in San Joaquin.   First, I need to understand the database schema provided. There are three tables: `frpm`, `satscores`, and `schools`. The relevant table here seems to be `schools` since it contains information about each school, including whether they're a charter school and their virtual status.  Looking at the `schools` table, I see columns like `CDSCode`, `County`, `Charter`, and `Virtual`. The user mentioned that Charter schools are indicated by `Charter = 1` and partially virtual is represented by `Virtual = 'P'`. So, I'll need to filter rows where both these conditions are met.  Next, the location is San Joaquin County. Therefore, I should include a condition where `County = 'San Joaquin'`.  The goal is to retrieve the websites of these schools. The `Website` column in the `schools` table holds this information, so that's what I'll select.  Putting it all together, my SQL query will select the `Website` from the `schools` table where `County` is 'San Joaquin', `Charter` is 1, and `Virtual` is 'P'.  I should also consider if there are any potential issues. For example, ensuring that the column names match exactly as in the schema (case-sensitive) and that the values for `Charter` and `Virtual` are correctly specified.  Finally, I'll structure the SQL query accordingly, making sure to use proper syntax and quotation marks where necessary. </think>  SELECT Website FROM schools WHERE County = 'San Joaquin' AND Charter = 1 AND Virtual = 'P';
SELECT COUNT(*) FROM schools WHERE Charter = 1 AND DOC = '52' AND City = 'Hickman'; 
<think> Okay, I need to figure out how to write the SQL query based on the user's question. Let me break it down step by step.  First, the question asks for the total number of non-chartered schools in Los Angeles County where the percentage of eligible free meals for K-12 is less than 0.18%.   So, I should start by identifying which tables to use. The question mentions schools and their eligibility for free meals, so I'll look at the 'frpm' table because it contains data about meal eligibility. It also refers to the county name, so maybe I need information from the 'schools' table as well.  Wait, but looking at the schema, the 'frpm' table already has a 'County Name' field. So perhaps I can get everything from the 'frpm' table without joining other tables unless necessary.  Next, non-chartered schools are those where Charter = 0. In the 'frpm' table, there's a field called 'Charter School (Y/N)' which might be an integer. Since Y/N is often represented as Yes/No or 1/0 in databases, I think this field should be checked for 0 to indicate non-chartered schools.  The county of interest is Los Angeles, so I need to filter where `County Name` = 'Los Angeles'.  Now, the percentage of eligible free meals is calculated as (Free Meal Count (K-12) / Enrollment (K-12)) * 100. The question wants this percentage to be less than 0.18%. So, I'll write a condition where ((`Free Meal Count (K-12)` / `Enrollment (K-12)`) * 100) < 0.18.  I should also make sure that neither 'Free Meal Count' nor 'Enrollment' is zero to avoid division by zero errors, but the question might imply that these values are valid since they're asking for eligible percentages.  Putting it all together, I'll select from the 'frpm' table where County Name is Los Angeles, Charter School (Y/N) is 0, and the calculated percentage is less than 0.18%. Then, count the number of such schools using COUNT(*).  Wait a second, looking at the schema again, the 'Charter School (Y/N)' field in 'frpm' is an INTEGER. So I should ensure that it's 0 for non-chartered. Also, the condition on the percentage needs to handle cases where Enrollment might be zero to avoid division by zero. But since the question specifies K-12, maybe we can assume valid enrollments.  So, the final SQL query will join conditions on County Name, Charter status, and the calculated percentage, then count the rows that meet all these criteria. </think>  SELECT COUNT(*) FROM frpm  WHERE `County Name` = 'Los Angeles'  AND `Charter School (Y/N)` = 0  AND ((`Free Meal Count (K-12)` / `Enrollment (K-12)`) * 100) < 0.18;
SELECT      s.School AS SchoolName,     s.City,     COALESCE(s.AdmFName1 || ' ', '') || COALESCE(s.AdmLName1, '') AS Administrator1,     COALESCE(s.AdmFName2 || ' ', '') || COALESCE(s.AdmLName2, '') AS Administrator2,     COALESCE(s.AdmFName3 || ' ', '') || COALESCE(s.AdmLName3, '') AS Administrator3 FROM      schools s JOIN      frpm f ON s.CDSCode = f.CDSCode WHERE      s.Charter = 1     AND f.CharterSchoolNumber = '00D2'; 
SELECT COUNT(CDSCode) FROM schools WHERE MailCity = 'Hickman' AND CharterNum = '00D4'; 
SELECT      (COUNT(CASE WHEN frpm."Charter Funding Type" = 'Local' THEN 1 END) / COUNT(frpm."Charter Funding Type") * 100) AS ratio_percentage FROM      frpm JOIN      schools ON frpm."CDSCode" = schools."CDSCode" WHERE      schools.County = 'Santa Clara'; 
SELECT COUNT(*)  FROM schools  WHERE County = 'Stanislaus' AND FundingType = 'Directly Funded' AND OpenDate BETWEEN '2000-01-01' AND '2005-12-31'; 
<think> Okay, I need to figure out how to answer the user's question using SQL. The question is asking for the total amount of Community College District closures in 1989 within San Francisco.  First, I'll look at the database schema provided. There are three tables: `frpm`, `satscores`, and `schools`. It seems that the `schools` table contains information about school closures because it has columns like `OpenDate` and `ClosedDate`.  The user is asking specifically about Community College District closures, so I should check if there's a way to identify community colleges in the schema. The `schools` table might have a field indicating the type of institution. Looking at the columns, I see `StatusType`, which could be useful here.  Next, focusing on San Francisco: the city name is in the `City` column of the `schools` table. So I'll need to filter where `City = 'San Francisco'`.  For the year 1989, I need to extract the year from `ClosedDate`. Assuming `ClosedDate` is a date type, using `YEAR(ClosedDate)` would give me the year. Then, I can check if this year equals 1989.  The total amount of closures might refer to the count of schools that closed in that year and city. So I'll use `COUNT(*)` as the aggregate function to get the number of closures.  Putting it all together, my SQL query should select from the `schools` table where the city is San Francisco, the status type indicates a closure (I'm not exactly sure what value this would have, but perhaps 'Closed' or similar), and the year of closure is 1989.  Wait, does the `StatusType` field specifically indicate closures? The schema description doesn't specify that. Maybe I should consider if there's another column that indicates whether a school is closed or not. Looking again at the `schools` table, I see `ClosedDate`, which would be non-null for closed schools. So perhaps instead of checking `StatusType`, I can check if `ClosedDate` is not null and extract the year from it.  So, the query should filter on `City = 'San Francisco'`, `ClosedDate IS NOT NULL`, and `YEAR(ClosedDate) = 1989`. Then count those records.  I think that's a solid approach. So the SQL will be:  SELECT COUNT(*) FROM schools WHERE City = 'San Francisco' AND ClosedDate IS NOT NULL AND YEAR(ClosedDate) = 1989;  This should give me the total number of closures in San Francisco for 1989. </think>  SELECT COUNT(*) FROM schools WHERE City = 'San Francisco' AND ClosedDate IS NOT NULL AND YEAR(ClosedDate) = 1989;
SELECT County, COUNT(*) AS ClosureCount FROM schools WHERE YEAR(ClosedDate) BETWEEN 1980 AND 1989     AND SOC = '11' GROUP BY County ORDER BY ClosureCount DESC LIMIT 1; 
<think> Alright, let's break down how I arrived at the SQL query for this user's request.  First, the user wants the National Center for Educational Statistics (NCES) district ID for all schools classified as State Special Schools. From the extra knowledge provided, I know that State Special Schools are identified by a School Ownership Code (SOC) of 31.  Looking at the database schema, there are three tables: frpm, satscores, and schools. The relevant information here is in the schools table because it contains the CDSCode (which acts as a primary key) and other details about each school, including SOC.  The user's request specifically asks for the NCES district ID, which maps to the 'NCESDist' column in the schools table. So, I need to select that column.  Next, the condition is that the School Ownership Code (SOC) must be 31. The schools table has a 'DOCType' column, but since SOC is the key here, and it's specified as 31, I'll filter using 'WHERE SOC = 31'.  I also need to consider if there are any other conditions or joins necessary. However, since all the required information is in the schools table, no joins with frpm or satscores are needed.  Finally, I construct the SQL query by selecting 'NCESDist' and applying the filter for SOC = 31. </think>  SELECT `NCESDist` FROM `schools` WHERE `SOC` = 31;
SELECT COUNT(*) FROM schools WHERE County = 'Alpine' AND DOCType = 'Community Day School' AND StatusType IN ('Active', 'Closed'); 
SELECT frpm.District_Code  FROM frpm  JOIN schools ON frpm.CDSCode = schools.CDSCode  WHERE schools.City = 'Fresno'  AND schools.Magnet = 0; 
SELECT `Enrollment (Ages 5-17)`  FROM frpm  JOIN schools ON frpm.CDSCode = schools.CDSCode  WHERE frpm.`Academic Year` = '2014-2015'  AND schools.EdOpsCode = 'SSS'  AND schools.City = 'Fremont'; 
<think> Alright, I need to figure out how to write an SQL query based on the user's question. The question is asking for the free or reduced price meal count for ages 5 to 17 in a specific school located at PO Box 1040 as their mailing address.  First, I'll look at the database schema provided. There are three tables: frpm, satscores, and schools. Since the question is about meal counts, which are related to FRPM (Free or Reduced Price Meals), I should focus on the frpm table. But since we're looking for a specific school, I might need to join this with the schools table.  The user mentioned the mailing street address as PO Box 1040. In the schools table, there's a column called MailStreet which likely holds the mailing address. So I'll use that condition.  I also notice that there are two relevant columns in the frpm table: FRPM Count (Ages 5-17) and Percent (%) Eligible FRPM (Ages 5-17). The user is asking for the count, so I'll select FRPM Count (Ages 5-17).  Now, how do I connect these tables? Both frpm and schools have a CDSCode column. In frpm, it's the primary key, and in schools, it's also the primary key. So I can join them on CDSCode.  Putting this together, I'll write a SELECT statement that joins the frpm and schools tables on CDSCode. Then, I'll filter where MailStreet is 'PO Box 1040'. Since the user wants just the count, I'll select that specific column from the frpm table.  I should also consider if there are any other conditions or potential issues. For example, do I need to handle cases where CDSCode might be NULL? But since it's a primary key in both tables, it shouldn't be NULL. Also, ensuring that the join is correct and that the condition on MailStreet accurately targets the specific school.  So, the final query should select FRPM Count (Ages 5-17) from frpm where the joined schools table has MailStreet as 'PO Box 1040'. </think>  SELECT `FRPM Count (Ages 5-17)` FROM `frpm` AS f JOIN `schools` AS s ON f.`CDSCode` = s.`CDSCode` WHERE s.`MailStreet` = 'PO Box 1040';
SELECT `frpm`.`Low Grade` FROM `frpm` INNER JOIN `schools` ON `frpm`.`CDSCode` = `schools`.`CDSCode` WHERE `schools`.`EdOpsCode` = 'SPECON' AND `schools`.`NCESDist` = '0613360'; 
<think> Okay, I need to figure out how to answer the user's question using SQL. The question is asking for the educational level name and school names where the Breakfast Provision is 2 in county code 37.  First, I'll look at the database schema provided. There are three tables: frpm, satscores, and schools. The relevant table seems to be 'frpm' because it contains information about meal provisions, including 'NSLP Provision Status', which might relate to breakfast provision.  The user mentioned "Breakfast Provision 2", so I'm guessing that corresponds to a specific value in the NSLP Provision Status field. In the frpm table, this column is of type TEXT, so it's likely a string value like '2' or maybe a description. But since the question specifies 'Provision 2', I'll use '2' as the filter.  Next, the county code is given as 37. The 'County Code' in the frpm table is an INTEGER, so that should be straightforward to match with 37.  The user wants the educational level name and school name. Looking at the frpm table, I don't see an 'Educational Level Name' column. Wait, perhaps they meant the 'Educational Option Type', which is a TEXT field in frpm. That could indicate the type of education or program offered. Alternatively, maybe it's referring to something else, but given the options, that seems like the closest match.  So, I'll need to select 'Educational Option Type' and 'School Name' from the frpm table where NSLP Provision Status is '2' and County Code is 37.  I should also ensure that School Name isn't null because we want actual names. So adding a condition where School Name is not null would be good.  Putting it all together, the SQL query will select those two columns from frpm where NSLP Provision Status is '2', County Code is 37, and School Name exists. </think>  SELECT `Educational Option Type`, `School Name` FROM `frpm` WHERE `NSLP Provision Status` = 'Breakfast Provision 2' AND `County Code` = 37 AND `School Name` IS NOT NULL;
SELECT `City`  FROM `frpm`  INNER JOIN `schools` ON `frpm`.`CDSCode` = `schools`.`CDSCode`  WHERE `EILCode` = 'HS'      AND `NSLP Provision Status` = '2'      AND `Low Grade` = '9'      AND `High Grade` = '12'      AND `County Name` = 'Merced'; 
<think> Alright, so I need to figure out the SQL query based on the user's question. Let's break it down step by step.  First, the user is asking for schools in Los Angeles County that serve grades Kindergarten through 9th grade. They also want to know the percentage of eligible FRPM (Free and Reduced Price Meals) for ages 5-17.  Looking at the database schema, there are three tables: frpm, satscores, and schools. The relevant information seems to be in the frpm and schools tables since they contain details about enrollment, meal eligibility, and school locations.  The user mentioned that the percentage is calculated by dividing FRPM Count (Ages 5-17) by Enrollment (Ages 5-17) and multiplying by 100. In SQL, I can compute this using a CASE statement to handle any division by zero errors, but since the question doesn't specify handling that, maybe it's optional.  Next, I need to join the tables. The frpm table has a CDSCode which is the primary key and references schools.CDSCode. So, an INNER JOIN between frpm and schools on CDSCode makes sense.  Now, filtering by Los Angeles County: schools.County should be 'Los Angeles'.  For the grade span Kindergarten to 9th grade, I think that means the Low Grade is 'K' and High Grade is '9'. Both conditions need to be met, so I'll include WHERE frpm.LowGrade = 'K' AND frpm.HighGrade = '9'.  Putting it all together, I'll SELECT the School Name from schools and calculate the percentage from frpm. The JOIN ensures we get the right data, and the WHERE clauses filter by county, low grade, and high grade.  I should make sure that the column names match exactly as they are in the schema. Also, since CDSCode is a TEXT type, I don't need to worry about data type conversions there.  So, the final query will join frpm and schools on CDSCode, filter by Los Angeles County, grades K-9, and calculate the FRPM percentage for ages 5-17. </think>  SELECT s.School Name, (f.`FRPM Count  (Ages 5-17)` / f.`Enrollment  (Ages 5-17)`) * 100 AS `Percent (%) Eligible FRPM (Ages 5-17)` FROM schools s INNER JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.County = 'Los Angeles' AND f.Low Grade = 'K' AND f.High Grade = '9';
SELECT      CONCAT(`Low Grade`, '-', `High Grade`) AS grade_span,     COUNT(*) AS frequency FROM      schools WHERE      City = 'Adelanto' GROUP BY      grade_span ORDER BY      frequency DESC LIMIT 1; 
SELECT COUNT(*) AS CountOfNonPhysicalSchools FROM schools WHERE County IN ('San Diego', 'Santa Barbara')  AND Virtual = 'F'; 
SELECT      s.SchoolName,      f.`School Type` AS SchoolType,     s.Latitude FROM      schools s JOIN      frpm f ON s.CDSCode = f.CDSCode ORDER BY      s.Latitude DESC LIMIT 1; 
SELECT `City`, `School`, `Low Grade` FROM `schools` WHERE `State` = 'CA' ORDER BY `Latitude` ASC LIMIT 1; 
  SELECT CDSCode FROM schools    WHERE ABS(Longitude) = (SELECT MAX(ABS(Longitude)) FROM schools)   
SELECT      frpm.City AS City,     COUNT(DISTINCT frpm.CDSCode) AS NumberOfSchools FROM      frpm JOIN      schools ON frpm.CDSCode = schools.CDSCode WHERE      schools.Magnet = 1     AND frpm.LowGrade = 'Kindergarten'     AND frpm.HighGrade = '8'     AND frpm.`NSLP Provision Status` = 'Multiple Provision Types' GROUP BY      frpm.City ORDER BY      City; 
WITH AdminData AS (     SELECT AdmFName1 AS FirstName, District FROM Employees     UNION ALL     SELECT AdmFName2 AS FirstName, District FROM Employees     UNION ALL     SELECT AdmFName3 AS FirstName, District FROM Employees ), NamedCounts AS (     SELECTFirstName,            COUNT(*) as TotalCount,            DENSE_RANK() OVER (ORDER BY COUNT(*) DESC) as Rank     FROM AdminData     GROUP BYFirstName ) SELECT DISTINCT N.FirstName, A.District FROM NamedCounts N JOIN AdminData A ON N.FirstName = A.FirstName WHERE N.Rank <= 2; 
<think> Okay, I need to figure out how to write an SQL query based on the user's question. Let me start by understanding what they're asking for.  The question is: "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine? List the district code of the school."  First, I need to break this down into parts. The main goal is to find the percentage eligible for free meals in K-12 for a specific school. Additionally, I need to list the district code of that school.  Looking at the database schema provided, there are three tables: frpm, satscores, and schools. The schools table seems relevant because it contains information about administrators, which is crucial since the question specifies an administrator's first name.  In the schools table, there are columns like AdmFName1, AdmLName1, etc., which store the names of administrators. So, I'll need to filter the rows where AdmFName1 equals 'Alusine'.  Next, the percentage calculation is given as (Free Meal Count / Enrollment) * 100%. This data is in the frpm table under the columns 'Free Meal Count (K-12)' and 'Enrollment (K-12)'. So, I'll need to join the schools table with the frpm table using their common key, which is CDSCode.  Now, considering how to structure the SQL query:  1. **SELECT Clause**: I need to calculate the percentage. That can be done using a CASE statement to handle division by zero. The formula would be (Free Meal Count / Enrollment) * 100. Also, I need to include the district code from the schools table.  2. **FROM Clause**: Start with the schools table since that's where the administrator information is.  3. **JOIN Clause**: Perform an INNER JOIN with the frpm table on CDSCode because each school in the schools table has a corresponding entry in frpm.  4. **WHERE Clause**: Filter where AdmFName1 is 'Alusine'.  Putting this together, I need to make sure that all necessary columns are selected and joined correctly. Also, handle any potential division by zero errors by using a CASE statement in the calculation.  I should also consider if there are multiple administrators per school (like AdmFName2, AdmFName3), but since the question specifies "administered by an administrator whose first name is Alusine," it implies at least one such admin. So, checking AdmFName1 seems sufficient unless the database allows for multiple admins with the same first name, but I think handling at least one occurrence is enough here.  Finally, ensure that the SQL syntax is correct, using proper aliases and table names as per the schema. </think>  SELECT      (frpm.`Free Meal Count  (K-12)` / frpm.`Enrollment  (K-12)`) * 100 AS `Percent (%) Eligible Free (K-12)`,     schools.`District Code` FROM     schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE     schools.AdmFName1 = 'Alusine';
<think> Okay, so I need to figure out how to write an SQL query based on the user's question. The question is asking for the administrator's last name that oversees a school with a specific charter number, which is 40. Additionally, they want to know the district, county, and name of that school.  First, I'll look at the database schema provided to understand where each piece of information is stored. There are three tables: `frpm`, `satscores`, and `schools`.   The `schools` table seems crucial because it contains details about each school, including whether they're a charter school, their CDSCode (which might be used as an identifier), and possibly the administrator's information.  Looking at the `schools` table, I see columns like `CharterNum`, which is likely where the charter number is stored. The user wants the school with Charter number 40, so that's a condition we'll need in our WHERE clause: `WHERE CharterNum = 40`.  Next, we need to find the administrator's last name. The `schools` table has columns like `AdmLName1`, `AdmLName2`, and `AdmLName3`. These probably represent the last names of up to three administrators. Since the question specifies "the administrator," I'm assuming there might be only one, but it's safer to include all possible fields in case multiple are present.  Then, we need the district name. The `District` column in the `schools` table should provide that information. Similarly, the `County` column will give us the county where the school is located. The `School` column gives the name of the school.  Putting this all together, the SQL query needs to select these specific columns: `AdmLName1`, `AdmLName2`, `AdmLName3` for the last names, `District` for the district, `County` for the county, and `School` for the school name. The FROM clause will specify the `schools` table since all necessary data is there.  The WHERE clause filters the results to only include the row where `CharterNum = 40`. I don't think we need any JOINs because all required fields are in the `schools` table, so no other tables are involved here.  I should make sure that the column names match exactly as they are in the schema. For example, it's `AdmLName1`, not `AdminLastName` or something else. Also, I need to ensure that the CDSCode is correctly used if needed elsewhere, but in this case, since we're filtering by CharterNum, which is a direct field, no joins are necessary.  Finally, I'll write the SQL query without any comments as per the user's instruction. </think>  SELECT `AdmLName1`, `AdmLName2`, `AdmLName3`, `District`, `County`, `School` FROM `schools` WHERE `CharterNum` = 40;
SELECT `CDSCode`, `AdmEmail1`, `AdmEmail2`, `AdmEmail3`  FROM `schools`  WHERE `County` = 'San Bernardino'  AND `District` = 'City of San Bernardino Unified'  AND `OpenDate` BETWEEN '2009-01-01' AND '2010-12-31' AND (`DOC` = 54 OR `SOC` = 62); 
SELECT sch.School AS SchoolName, sch.AdmEmail1 AS AdministratorEmail FROM satscores scs JOIN schools sch ON scs.cds = sch.CDSCode WHERE scs.NumGE1500 = (SELECT MAX(scs2.NumGE1500) FROM satscores scs2) ORDER BY scs.NumGE1500 DESC; 
SELECT COUNT(DISTINCT t.account_id) AS CountAccounts FROM trans t JOIN account a ON t.account_id = a.account_id WHERE t.operation = 'POPLATEK PO OBRATU' AND a.A3 = 'East Bohemia'; 
SELECT COUNT(DISTINCT a.account_id) AS eligible_accounts FROM account a JOIN loan l ON a.account_id = l.account_id WHERE a.A3 = 'Prague' AND l.status = 'A'; 
SELECT AVG(A12) AS avg_1995, AVG(A13) AS avg_1996 FROM district; 
SELECT COUNT(*) AS number_of_districts FROM district WHERE gender = 'F' AND a11 > 6000 AND a11 < 10000; 
SELECT COUNT(*) AS NumberOfCustomers FROM customer WHERE gender = 'M' AND region = 'North Bohemia' AND average_salary > 8000; 
SELECT      c.account_id,     (MAX(d.A11) - MIN(d.A11)) AS gap FROM      client c JOIN      district d ON c.district_id = d.district_id WHERE      c.gender = 'F' AND      c.birthdate = (         SELECT MIN(birthdate)          FROM client          WHERE gender = 'F'     ) AND      d.A11 = (         SELECT MIN(A11)          FROM district          WHERE district_id IN (             SELECT district_id              FROM client              WHERE gender = 'F' AND birthdate = (                 SELECT MIN(birthdate)                  FROM client                  WHERE gender = 'F'             )         )     ) GROUP BY      c.account_id; 
SELECT a.account_id FROM account a JOIN client c ON a.client_id = c.client_id WHERE c.birthdate = (SELECT MAX(birthdate) FROM client) AND c.A11 = (     SELECT MAX(A11)      FROM client      WHERE birthdate = (SELECT MAX(birthdate) FROM client) ); 
SELECT COUNT(DISTINCT account_id) AS Num_Owners_WeeklyIssuance FROM trans WHERE type = 'POPLATEK TYDNE'; 
SELECT DISTINCT a.client_id FROM account a JOIN trans t ON a.account_id = t.account_id WHERE t.k_symbol = 'POPLATEK PO OBRATU'; 
WITH MinLoanAmount AS (     SELECT MIN(amount) as min_amount     FROM loan     WHERE date LIKE '1997%' ) SELECT t.* FROM trans t JOIN loan l ON t.account_id = l.account_id WHERE l.date LIKE '1997%'  AND l.amount = (SELECT min_amount FROM MinLoanAmount) AND t.k_symbol = 'POPLATEK TYDNE'; 
