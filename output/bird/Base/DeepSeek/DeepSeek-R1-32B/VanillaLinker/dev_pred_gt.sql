SELECT `frpm`.`Free Meal Count (K-12)` / `frpm`.`Enrollment (K-12)` AS eligible_free_rate  FROM `frpm`  JOIN `schools` ON `frpm`.`CDSCode` = `schools`.`CDSCode`  WHERE `schools`.`County` = 'Alameda'  ORDER BY eligible_free_rate DESC  LIMIT 1;	california_schools
SELECT CDSCode, `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` AS eligible_free_rate  FROM frpm  WHERE `School Type` = 'Continuation' AND `Enrollment (Ages 5-17)` > 0  ORDER BY eligible_free_rate ASC  LIMIT 3;	california_schools
SELECT DISTINCT s.Zip FROM schools AS s JOIN frpm AS f ON s.CDSCode = f.CDSCode WHERE f.[Charter School (Y/N)] = 1 AND f.[County Name] = 'Fresno' AND f.[District Type] = 'County Office of Education';	california_schools
SELECT s.MailStreet FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode ORDER BY f.`FRPM Count (K-12)` DESC LIMIT 1;	california_schools
SELECT s.Phone  FROM schools s  INNER JOIN frpm f ON s.CDSCode = f.CDSCode  WHERE f.`Charter School (Y/N)` = 1 AND f.`Charter Funding Type` = 'Direct' AND s.OpenDate > '2000-01-01';	california_schools
SELECT COUNT(*)  FROM satscores  JOIN schools ON satscores.cds = schools.CDSCode  WHERE AvgScrMath > 400 AND Virtual = 'F';	california_schools
SELECT satscores.sname  FROM satscores  JOIN schools ON satscores.cds = schools.CDSCode  WHERE satscores.NumTstTakr > 500 AND schools.Magnet = 1  ORDER BY satscores.sname;	california_schools
SELECT `Phone`  FROM `schools`  WHERE `CDSCode` = (     SELECT `cds`      FROM `satscores`      WHERE `NumGE1500` = (         SELECT MAX(`NumGE1500`)          FROM `satscores`     )      LIMIT 1 );	california_schools
SELECT s.NumTstTakr  FROM frpm f  INNER JOIN satscores s ON f.CDSCode = s.cds  ORDER BY f.`FRPM Count (K-12)` DESC  LIMIT 1;	california_schools
SELECT COUNT(*) AS directly_charter_funded_count FROM satscores JOIN frpm ON satscores.CDSCode = frpm.CDSCode WHERE AvgScrMath > 560 AND `Charter Funding Type` = 'Direct';	california_schools
SELECT frpm.`FRPM Count (Ages 5-17)`  FROM frpm  JOIN satscores ON frpm.CDSCode = satscores.cds  WHERE satscores.AvgScrRead = (     SELECT MAX(AvgScrRead)      FROM satscores ) LIMIT 1;	california_schools
SELECT `CDSCode` FROM `frpm` WHERE (`Enrollment  (K-12)` + `Enrollment  (Ages 5-17)`) > 500;	california_schools
SELECT MAX(frpm.`Free Meal Count  (Ages 5-17)` / frpm.`Enrollment  (Ages 5-17)`) AS max_eligible_free_rate  FROM frpm  JOIN satscores ON frpm.CDSCode = satscores.cds  WHERE satscores.NumGE1500 / satscores.NumTstTakr > 0.3;	california_schools
SELECT s.Phone  FROM satscores sc  JOIN schools s ON sc.cds = s.CDSCode  WHERE sc.NumTstTakr > 0  ORDER BY (sc.NumGE1500 * 1.0 / sc.NumTstTakr) DESC  LIMIT 3;	california_schools
SELECT s.NCESSchool AS NCES_School_ID, f.`Enrollment  (Ages 5-17)` AS Enrollment FROM frpm f INNER JOIN schools s ON f.CDSCode = s.CDSCode ORDER BY `Enrollment  (Ages 5-17)` DESC LIMIT 5;	california_schools
SELECT s.dname AS DistrictName,        AVG(s.AvgScrRead) AS AvgReadingScore FROM satscores s INNER JOIN schools sc ON s.cds = sc.CDSCode WHERE sc.StatusType = 'Active' GROUP BY s.dname ORDER BY AvgReadingScore DESC LIMIT 1;	california_schools
SELECT COUNT(*) FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.County = 'Alameda' AND satscores.NumTstTakr < 100;	california_schools
SELECT      s.School,     ss.dname AS DistrictName,     ss.cname AS CountyName,     ss.AvgScrWrite,     s.CharterNum FROM      satscores ss INNER JOIN      schools s ON ss.cds = s.CDSCode WHERE      ss.AvgScrWrite > 499 AND s.CharterNum IS NOT NULL ORDER BY      RANK() OVER (ORDER BY ss.AvgScrWrite DESC);	california_schools
SELECT COUNT(*)  FROM satscores s  JOIN schools sc ON s.cds = sc.CDSCode  WHERE sc.County = 'Fresno' AND (sc.FundingType LIKE '%State Direct%' OR sc.FundingType LIKE '%Direct%') AND s.NumTstTakr <= 250;	california_schools
SELECT sc.Phone  FROM satscores s  JOIN schools sc ON s.cds = sc.CDSCode  WHERE s.AvgScrMath = (     SELECT MAX(satscores.AvgScrMath)      FROM satscores );	california_schools
SELECT COUNT(*) FROM frpm WHERE `County Name` = 'Amador' AND `Low Grade` = 9 AND `High Grade` = 12;	california_schools
SELECT COUNT(*)  FROM frpm  JOIN schools ON frpm.CDSCode = schools.CDSCode  WHERE schools.County = 'Los Angeles'  AND frpm.`FRPM Count (K-12)` > 500  AND frpm.`FRPM Count (K-12)` < 700;  The SQL query joins the `frpm` and `schools` tables on their common column `CDSCode`. It filters for schools in Los Angeles with a FRPM count between 501 and 699, then counts these records to provide the answer.	california_schools
SELECT schools.School, satscores.NumTstTakr FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.County = 'Contra Costa' ORDER BY NumTstTakr DESC LIMIT 1;	california_schools
SELECT      s.School,     s.Street,     s.City,     s.State,     s.Zip FROM      frpm f JOIN      schools s ON f.CDSCode = s.CDSCode WHERE      ABS(f.`Enrollment  (K-12)` - f.`Enrollment  (Ages 5-17)`) > 30;	california_schools
SELECT schools.School  FROM frpm  JOIN schools ON frpm.CDSCode = schools.CDSCode  JOIN satscores ON frpm.CDSCode = satscores.cd  WHERE (frpm.[Free Meal Count (K-12)] / frpm.[Enrollment (K-12)]) > 0.1  AND satscores.NumGE1500 >= 1;	california_schools
SELECT      frpm.Name,     frpm.[Charter Funding Type] FROM      frpm JOIN      satscores  ON      frpm.CDSCode = satscores.cdscode WHERE      frpm.CountyName = 'Riverside'      AND satscores.AvgScrMath > 400;	california_schools
SELECT s.Name AS SchoolName, s.Street, s.City, s.State, s.ZipCode AS Zip FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.County = 'Monterey'   AND (f.FRPM_Count_Ages_5_17 > 800)   AND s.Name LIKE '%High School%';	california_schools
SELECT s.`School`, ss.`AvgScrWrite`, s.`Phone`  FROM `schools` AS s  JOIN `satscores` AS ss ON s.`CDSCode` = ss.`cds`  WHERE (s.`OpenDate` > '1991-12-31' OR s.`ClosedDate` < '2000-01-01')  ORDER BY s.`School`;	california_schools
SELECT      `School Name`,      `DOCType`  FROM      `frpm`  WHERE      `Charter Funding Type` = 'Local'      AND (`Enrollment  (K-12)` - `Enrollment  (Ages 5-17)`) > (         SELECT              AVG(`Enrollment  (K-12)` - `Enrollment  (Ages 5-17)`)          FROM              `frpm`          WHERE              `Charter Funding Type` = 'Local'     )	california_schools
SELECT schools.OpenDate  FROM schools  JOIN frpm ON schools.CDSCode = frpm.CDSCode  ORDER BY frpm.'Enrollment (K-12)' DESC  LIMIT 1;	california_schools
SELECT s.City, SUM(f.`Enrollment  (K-12)`) AS TotalEnrollment FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode GROUP BY s.City ORDER BY TotalEnrollment ASC LIMIT 5;	california_schools
SELECT `CDSCode`, (`Free Meal Count (K-12)` / `Enrollment (K-12)`) AS eligible_free_rate  FROM frpm  ORDER BY `Enrollment (K-12)` DESC  LIMIT 2 OFFSET 9;	california_schools
SELECT f.CDSCode AS School_ID,        f.`FRPM Count  (K-12)` / f.`Enrollment  (K-12)` AS Eligible_Rate  FROM frpm f  JOIN schools s ON f.CDSCode = s.CDSCode  WHERE s.Magnet = 66  ORDER BY f.`FRPM Count  (K-12)` DESC  LIMIT 5;	california_schools
SELECT `frpm`.`School Name`, `schools`.`Website`  FROM `frpm`  INNER JOIN `schools` ON `frpm`.`CDSCode` = `schools`.`CDSCode`  WHERE `frpm`.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000;	california_schools
SELECT      `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` AS free_rate  FROM      frpm  JOIN      schools ON frpm.CDSCode = schools.CDSCode  WHERE      (AdmFName1 LIKE '%Kacey%' OR AdmFName2 LIKE '%Kacey%')      AND (AdmLName1 LIKE '%Gibson%' OR AdmLName2 LIKE '%Gibson%');	california_schools
SELECT AdmEmail1, AdmEmail2, AdmEmail3  FROM schools  INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode  WHERE `Charter School (Y/N)` = 1  ORDER BY `Enrollment  (K-12)` ASC  LIMIT 1;	california_schools
SELECT      CONCAT(s.AdmFName1, ' ', s.AdmLName1) AS Admin1,     CONCAT(s.AdmFName2, ' ', s.AdmLName2) AS Admin2,     CONCAT(s.AdmFName3, ' ', s.AdmLName3) AS Admin3 FROM      schools s WHERE      s.CDSCode = (         SELECT cds          FROM satscores          WHERE NumGE1500 = (             SELECT MAX(NumGE1500)              FROM satscores         )     );	california_schools
SELECT `Street`, `City`, `Zip`, `State` FROM `schools`  JOIN `satscores` ON `schools`.`CDSCode` = `satscores`.`cds`  ORDER BY (`satscores`.`NumGE1500` / `satscores`.`NumTstTakr`) ASC LIMIT 1;	california_schools
SELECT `Website` FROM `schools`  INNER JOIN `satscores` ON `schools`.`CDSCode` = `satscores`.`cds`  WHERE `County` = 'Los Angeles' AND `NumTstTakr` BETWEEN 2000 AND 3000;	california_schools
SELECT AVG(s.NumTstTakr) AS Avg_Test_Takers   FROM satscores s   JOIN schools sc ON s.cds = sc.CDSCode   WHERE sc.County = 'Fresno' AND sc.OpenDate BETWEEN '1980-01-01' AND '1980-12-31';	california_schools
SELECT s.Phone  FROM schools s  JOIN satscores sc ON s.CDSCode = sc.cds  WHERE s.District = 'Fresno Unified'  ORDER BY sc.AvgScrRead ASC  LIMIT 1;	california_schools
SELECT s.School  FROM (     SELECT *, RANK() OVER (PARTITION BY County ORDER BY AvgScrRead DESC) AS rank     FROM schools      JOIN satscores ON schools.CDSCode = satscores.cds     WHERE Virtual = 'F' ) s WHERE s.rank <= 5;	california_schools
SELECT f.`Educational Option Type` FROM satscores s JOIN frpm f ON s.cds = f.CDSCode ORDER BY s.AvgScrMath DESC LIMIT 1;	california_schools
SELECT s.AvgScrMath AS average_math_score, sc.County  FROM satscores s JOIN schools sc ON s.cds = sc.CDSCode  WHERE (s.AvgScrMath + s.AvgScrRead + s.AvgScrWrite) = (     SELECT MIN(s2.AvgScrMath + s2.AvgScrRead + s2.AvgScrWrite)     FROM satscores s2 );	california_schools
SELECT sc.AvgScrWrite AS avg_writing_score, sch.City  FROM satscores sc  JOIN schools sch ON sc.cds = sch.CDSCode  WHERE sc.NumGE1500 >= 1 AND sc.NumGE1500 = (     SELECT MAX(sc2.NumGE1500)      FROM satscores sc2      WHERE sc2.NumGE1500 > 0 );	california_schools
SELECT s.School AS SchoolName, ss.AvgScrWrite AS AverageWritingScore  FROM schools s  JOIN satscores ss ON s.CDSCode = ss.cds  WHERE (AdmFName1 = 'Ricci' AND AdmLName1 = 'Ulrich')  OR (AdmFName2 = 'Ricci' AND AdmLName2 = 'Ulrich')  OR (AdmFName3 = 'Ricci' AND AdmLName3 = 'Ulrich');	california_schools
SELECT s.`School` AS `State Special School`, f.`Enrollment  (K-12)` AS `Total Enrollees K-12` FROM `schools` s JOIN `frpm` f ON s.`CDSCode` = f.`CDSCode` WHERE s.`DOC` = 31 ORDER BY f.`Enrollment  (K-12)` DESC LIMIT 10;	california_schools
SELECT COUNT(*) / 12 AS MonthlyAverage  FROM schools  WHERE County = 'Alameda'      AND DOC = 52      AND YEAR(OpenDate) = 1980;	california_schools
SELECT      (COUNT(CASE WHEN DOC = 54 THEN 1 END) / COUNT(CASE WHEN DOC = 52 THEN 1 END)) AS Ratio FROM      schools WHERE      County = 'Orange';	california_schools
SELECT County, School, ClosedDate  FROM schools  WHERE StatusType = 'Closed'  GROUP BY County, School, ClosedDate  ORDER BY COUNT(*) DESC;	california_schools
SELECT sc.School AS SchoolName,         (sc.Street || ', ' || sc.City) AS PostalStreetAddress  FROM satscores s  INNER JOIN schools sc ON s.cds = sc.CDSCode  WHERE s.cds IN (     SELECT cds      FROM satscores      ORDER BY AvgScrMath DESC      LIMIT 1 OFFSET 6 );	california_schools
SELECT s.MailStreet AS MailingStreetAddress, s.School AS SchoolName  FROM schools s  INNER JOIN satscores sc ON s.CDSCode = sc.cds  ORDER BY sc.AvgScrRead ASC  LIMIT 1;	california_schools
SELECT COUNT(*) FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.MailCity = 'Lakeport' AND (satscores.AvgScrRead + satscores.AvgScrMath + satscores.AvgScrWrite) >= 1500;	california_schools
SELECT SUM(s.NumTstTakr) AS TotalTestTakers  FROM satscores s  JOIN schools sch ON s.cds = sch.CDSCode  WHERE sch.MailCity = 'Fresno';	california_schools
SELECT DISTINCT `School`, `MailZip` FROM `schools` WHERE (`AdmFName1` = 'Avetik' AND `AdmLName1` = 'Atoian') OR (`AdmFName2` = 'Avetik' AND `AdmLName2` = 'Atoian') OR (`AdmFName3` = 'Avetik' AND `AdmLName3` = 'Atoian');	california_schools
SELECT      (COUNT(CASE WHEN `County` = 'Colusa' THEN 1 END) / COUNT(CASE WHEN `County` = 'Humboldt' THEN 1 END)) AS ratio FROM      schools WHERE      `MailState` = 'CA';	california_schools
SELECT COUNT(*) FROM schools WHERE MailState = 'CA' AND City = 'San Joaquin' AND StatusType = 'Active';	california_schools
WITH RankedScores AS (     SELECT          s.cds,         ss.AvgScrWrite,         ROW_NUMBER() OVER (ORDER BY ss.AvgScrWrite DESC) AS rn     FROM          schools s     JOIN          satscores ss ON s.CDSCode = ss.cds ) SELECT      s.Phone,      s.Ext FROM      RankedScores rs JOIN      schools s ON rs.cds = s.CDSCode WHERE      rs.rn = 333;	california_schools
SELECT `School`, `Phone`, `Ext` FROM `schools` WHERE `Zip` = '95203-3704';	california_schools
SELECT Website FROM schools WHERE (AdmFName1 = 'Mike' AND AdmLName1 = 'Larson') OR (AdmFName2 = 'Mike' AND AdmLName2 = 'Larson') OR (AdmFName3 = 'Mike' AND AdmLName3 = 'Larson') OR (AdmFName1 = 'Dante' AND AdmLName1 = 'Alvarez') OR (AdmFName2 = 'Dante' AND AdmLName2 = 'Alvarez') OR (AdmFName3 = 'Dante' AND AdmLName3 = 'Alvarez');	california_schools
SELECT Website FROM schools WHERE County = 'San Joaquin' AND Charter = 1 AND Virtual = 'P';	california_schools
SELECT COUNT(*) FROM schools WHERE Charter = 1 AND DOC = '52' AND City = 'Hickman';	california_schools
SELECT COUNT(*) FROM frpm  WHERE `County Name` = 'Los Angeles'  AND `Charter School (Y/N)` = 0  AND ((`Free Meal Count (K-12)` / `Enrollment (K-12)`) * 100) < 0.18;	california_schools
SELECT      s.School AS SchoolName,     s.City,     COALESCE(s.AdmFName1 || ' ', '') || COALESCE(s.AdmLName1, '') AS Administrator1,     COALESCE(s.AdmFName2 || ' ', '') || COALESCE(s.AdmLName2, '') AS Administrator2,     COALESCE(s.AdmFName3 || ' ', '') || COALESCE(s.AdmLName3, '') AS Administrator3 FROM      schools s JOIN      frpm f ON s.CDSCode = f.CDSCode WHERE      s.Charter = 1     AND f.CharterSchoolNumber = '00D2';	california_schools
SELECT COUNT(CDSCode) FROM schools WHERE MailCity = 'Hickman' AND CharterNum = '00D4';	california_schools
SELECT      (COUNT(CASE WHEN frpm."Charter Funding Type" = 'Local' THEN 1 END) / COUNT(frpm."Charter Funding Type") * 100) AS ratio_percentage FROM      frpm JOIN      schools ON frpm."CDSCode" = schools."CDSCode" WHERE      schools.County = 'Santa Clara';	california_schools
SELECT COUNT(*)  FROM schools  WHERE County = 'Stanislaus' AND FundingType = 'Directly Funded' AND OpenDate BETWEEN '2000-01-01' AND '2005-12-31';	california_schools
SELECT COUNT(*) FROM schools WHERE City = 'San Francisco' AND ClosedDate IS NOT NULL AND YEAR(ClosedDate) = 1989;	california_schools
SELECT County, COUNT(*) AS ClosureCount FROM schools WHERE YEAR(ClosedDate) BETWEEN 1980 AND 1989     AND SOC = '11' GROUP BY County ORDER BY ClosureCount DESC LIMIT 1;	california_schools
SELECT `NCESDist` FROM `schools` WHERE `SOC` = 31;	california_schools
SELECT COUNT(*) FROM schools WHERE County = 'Alpine' AND DOCType = 'Community Day School' AND StatusType IN ('Active', 'Closed');	california_schools
SELECT frpm.District_Code  FROM frpm  JOIN schools ON frpm.CDSCode = schools.CDSCode  WHERE schools.City = 'Fresno'  AND schools.Magnet = 0;	california_schools
SELECT `Enrollment (Ages 5-17)`  FROM frpm  JOIN schools ON frpm.CDSCode = schools.CDSCode  WHERE frpm.`Academic Year` = '2014-2015'  AND schools.EdOpsCode = 'SSS'  AND schools.City = 'Fremont';	california_schools
SELECT `FRPM Count (Ages 5-17)` FROM `frpm` AS f JOIN `schools` AS s ON f.`CDSCode` = s.`CDSCode` WHERE s.`MailStreet` = 'PO Box 1040';	california_schools
SELECT `frpm`.`Low Grade` FROM `frpm` INNER JOIN `schools` ON `frpm`.`CDSCode` = `schools`.`CDSCode` WHERE `schools`.`EdOpsCode` = 'SPECON' AND `schools`.`NCESDist` = '0613360';	california_schools
SELECT `Educational Option Type`, `School Name` FROM `frpm` WHERE `NSLP Provision Status` = 'Breakfast Provision 2' AND `County Code` = 37 AND `School Name` IS NOT NULL;	california_schools
SELECT `City`  FROM `frpm`  INNER JOIN `schools` ON `frpm`.`CDSCode` = `schools`.`CDSCode`  WHERE `EILCode` = 'HS'      AND `NSLP Provision Status` = '2'      AND `Low Grade` = '9'      AND `High Grade` = '12'      AND `County Name` = 'Merced';	california_schools
SELECT s.School Name, (f.`FRPM Count  (Ages 5-17)` / f.`Enrollment  (Ages 5-17)`) * 100 AS `Percent (%) Eligible FRPM (Ages 5-17)` FROM schools s INNER JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.County = 'Los Angeles' AND f.Low Grade = 'K' AND f.High Grade = '9';	california_schools
SELECT      CONCAT(`Low Grade`, '-', `High Grade`) AS grade_span,     COUNT(*) AS frequency FROM      schools WHERE      City = 'Adelanto' GROUP BY      grade_span ORDER BY      frequency DESC LIMIT 1;	california_schools
SELECT COUNT(*) AS CountOfNonPhysicalSchools FROM schools WHERE County IN ('San Diego', 'Santa Barbara')  AND Virtual = 'F';	california_schools
SELECT      s.SchoolName,      f.`School Type` AS SchoolType,     s.Latitude FROM      schools s JOIN      frpm f ON s.CDSCode = f.CDSCode ORDER BY      s.Latitude DESC LIMIT 1;	california_schools
SELECT `City`, `School`, `Low Grade` FROM `schools` WHERE `State` = 'CA' ORDER BY `Latitude` ASC LIMIT 1;	california_schools
SELECT CDSCode FROM schools    WHERE ABS(Longitude) = (SELECT MAX(ABS(Longitude)) FROM schools)	california_schools
SELECT      frpm.City AS City,     COUNT(DISTINCT frpm.CDSCode) AS NumberOfSchools FROM      frpm JOIN      schools ON frpm.CDSCode = schools.CDSCode WHERE      schools.Magnet = 1     AND frpm.LowGrade = 'Kindergarten'     AND frpm.HighGrade = '8'     AND frpm.`NSLP Provision Status` = 'Multiple Provision Types' GROUP BY      frpm.City ORDER BY      City;	california_schools
WITH AdminData AS (     SELECT AdmFName1 AS FirstName, District FROM Employees     UNION ALL     SELECT AdmFName2 AS FirstName, District FROM Employees     UNION ALL     SELECT AdmFName3 AS FirstName, District FROM Employees ), NamedCounts AS (     SELECTFirstName,            COUNT(*) as TotalCount,            DENSE_RANK() OVER (ORDER BY COUNT(*) DESC) as Rank     FROM AdminData     GROUP BYFirstName ) SELECT DISTINCT N.FirstName, A.District FROM NamedCounts N JOIN AdminData A ON N.FirstName = A.FirstName WHERE N.Rank <= 2;	california_schools
SELECT      (frpm.`Free Meal Count  (K-12)` / frpm.`Enrollment  (K-12)`) * 100 AS `Percent (%) Eligible Free (K-12)`,     schools.`District Code` FROM     schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE     schools.AdmFName1 = 'Alusine';	california_schools
SELECT `AdmLName1`, `AdmLName2`, `AdmLName3`, `District`, `County`, `School` FROM `schools` WHERE `CharterNum` = 40;	california_schools
SELECT `CDSCode`, `AdmEmail1`, `AdmEmail2`, `AdmEmail3`  FROM `schools`  WHERE `County` = 'San Bernardino'  AND `District` = 'City of San Bernardino Unified'  AND `OpenDate` BETWEEN '2009-01-01' AND '2010-12-31' AND (`DOC` = 54 OR `SOC` = 62);	california_schools
SELECT sch.School AS SchoolName, sch.AdmEmail1 AS AdministratorEmail FROM satscores scs JOIN schools sch ON scs.cds = sch.CDSCode WHERE scs.NumGE1500 = (SELECT MAX(scs2.NumGE1500) FROM satscores scs2) ORDER BY scs.NumGE1500 DESC;	california_schools
SELECT COUNT(DISTINCT t.account_id) AS CountAccounts FROM trans t JOIN account a ON t.account_id = a.account_id WHERE t.operation = 'POPLATEK PO OBRATU' AND a.A3 = 'East Bohemia';	financial
SELECT COUNT(DISTINCT a.account_id) AS eligible_accounts FROM account a JOIN loan l ON a.account_id = l.account_id WHERE a.A3 = 'Prague' AND l.status = 'A';	financial
SELECT AVG(A12) AS avg_1995, AVG(A13) AS avg_1996 FROM district;	financial
SELECT COUNT(*) AS number_of_districts FROM district WHERE gender = 'F' AND a11 > 6000 AND a11 < 10000;	financial
SELECT COUNT(*) AS NumberOfCustomers FROM customer WHERE gender = 'M' AND region = 'North Bohemia' AND average_salary > 8000;	financial
SELECT      c.account_id,     (MAX(d.A11) - MIN(d.A11)) AS gap FROM      client c JOIN      district d ON c.district_id = d.district_id WHERE      c.gender = 'F' AND      c.birthdate = (         SELECT MIN(birthdate)          FROM client          WHERE gender = 'F'     ) AND      d.A11 = (         SELECT MIN(A11)          FROM district          WHERE district_id IN (             SELECT district_id              FROM client              WHERE gender = 'F' AND birthdate = (                 SELECT MIN(birthdate)                  FROM client                  WHERE gender = 'F'             )         )     ) GROUP BY      c.account_id;	financial
SELECT a.account_id FROM account a JOIN client c ON a.client_id = c.client_id WHERE c.birthdate = (SELECT MAX(birthdate) FROM client) AND c.A11 = (     SELECT MAX(A11)      FROM client      WHERE birthdate = (SELECT MAX(birthdate) FROM client) );	financial
SELECT COUNT(DISTINCT account_id) AS Num_Owners_WeeklyIssuance FROM trans WHERE type = 'POPLATEK TYDNE';	financial
SELECT DISTINCT a.client_id FROM account a JOIN trans t ON a.account_id = t.account_id WHERE t.k_symbol = 'POPLATEK PO OBRATU';	financial
WITH MinLoanAmount AS (     SELECT MIN(amount) as min_amount     FROM loan     WHERE date LIKE '1997%' ) SELECT t.* FROM trans t JOIN loan l ON t.account_id = l.account_id WHERE l.date LIKE '1997%'  AND l.amount = (SELECT min_amount FROM MinLoanAmount) AND t.k_symbol = 'POPLATEK TYDNE';	financial
WITH MaxLoanAmount AS (     SELECT MAX(amount) AS max_amount     FROM loan     WHERE duration > 12 ) SELECT DISTINCT a.account_id FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.duration > 12 AND l.amount = (SELECT max_amount FROM MaxLoanAmount) AND a.date LIKE '1993%';	financial
SELECT COUNT(DISTINCT c.client_id) AS customer_count FROM account a JOIN client c ON a.owner_id = c.client_id JOIN district d ON c.district_id = d.id WHERE c.gender = 'F'   AND c.date_of_birth < '1950-01-01'   AND d.name = 'Sokolov';	financial
SELECT account_id, MIN(date) AS earliest_trading_date  FROM trans  WHERE YEAR(date) = 1995  GROUP BY account_id;	financial
SELECT a.account_id FROM account a WHERE a.opening_date < '1997-01-01' AND (     SELECT t.balance     FROM trans t     WHERE t.account_id = a.account_id     ORDER BY t.trans_date DESC     LIMIT 1 ) > 3000;	financial
SELECT a.client_id  FROM trans t  INNER JOIN account a ON t.account_id = a.account_id  WHERE t.date = '1994-03-03';	financial
SELECT a.opened  FROM trans t INNER JOIN account a ON t.account_id = a.account_aid WHERE t.amount = 840 AND t.date = '1998-10-14';	financial
SELECT a.district_id  FROM loan l  JOIN account a ON l.account_aid = a.account_aid  WHERE l.date = '1994-08-25';	financial
SELECT MAX(t.amount) AS max_transaction_amount  FROM trans t  WHERE t.account_id IN (     SELECT c.account_id      FROM card c      WHERE c.issue_date = '1996-10-21' );	financial
WITH HighestBranch AS (     SELECT branch_id     FROM branches     WHERE A11 = (SELECT MAX(A11) FROM branches) ), EligibleAccounts AS (     SELECT a.client_id     FROM accounts a     JOIN HighestBranch hb ON a.branch_id = hb.branch_id ) SELECT c.gender FROM clients c JOIN EligibleAccounts ea ON c.client_id = ea.client_id ORDER BY c.date_of_birth ASC LIMIT 1;	financial
SELECT t.amount FROM trans t WHERE t.account_id IN (     SELECT l.account_id      FROM loan l      WHERE l.amount = (SELECT MAX(amount) FROM loan) ) ORDER BY t.date ASC LIMIT 1;	financial
SELECT COUNT(DISTINCT c.client_id) AS NumberOfWomen FROM client c JOIN account a ON c.client_id = a.client_id JOIN trans t ON a.account_id = t.account_id WHERE t.bank = 'Jesenik'  AND c.gender = 'F';	financial
SELECT a.disposition_id  FROM account a  JOIN trans t ON a.account_id = t.account_id  WHERE t.amount = 5100 AND t.date = '1998-09-02';	financial
SELECT COUNT(*)  FROM account  JOIN district ON account.district_id = district.district_id  WHERE YEAR(account.open_date) = 1996 AND district.A2 = 'Litomerice';	financial
SELECT A2 AS district FROM account WHERE gender = 'F' AND birthdate = '1976-01-29';	financial
SELECT c.birthdate  FROM loan l  JOIN account a ON l.account_id = a.account_id  JOIN client c ON a.client_id = c.client_id  WHERE l.amount = 98832 AND l.date = '1996-01-03';	financial
SELECT account_id  FROM accounts  WHERE city = 'Prague'  ORDER BY open_date ASC  LIMIT 1;	financial
SELECT      (COUNT(CASE WHEN c.gender = 'M' THEN 1 END) / COUNT(c.client_id)) * 100 AS male_percentage FROM      client c JOIN      branch b ON c.branch_id = b.branch_id WHERE      b.A3 = 'South Bohemia' GROUP BY      b.branch_id HAVING      MAX(b.A4)	financial
SELECT      (later_balance - earlier_balance) / earlier_balance * 100 AS increase_rate FROM (     SELECT          (SELECT balance FROM trans WHERE account_id = l.account_id AND date <= '1998-12-27' ORDER BY date DESC LIMIT 1) as later_balance,         (SELECT balance FROM trans WHERE account_id = l.account_id AND date <= '1993-03-22' ORDER BY date DESC LIMIT 1) as earlier_balance     FROM loan l      WHERE l.status = 'A' AND l.date = '1993-07-05' ) AS balances;	financial
WITH total_loan_amount AS (     SELECT SUM(amount) AS total_amount      FROM loan ), paid_loans AS (     SELECT SUM(amount) AS paid_amount      FROM loan      WHERE status = 'A' ) SELECT (paid_amount / total_amount::float) * 100 AS percentage_paid  FROM total_loan_amount, paid_loans;	financial
SELECT     (SUM(CASE WHEN status = 'C' THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS percentage_running_accounts FROM loan WHERE amount < 100000;	financial
SELECT      a.account_id,     d.A2 AS district_name,     d.A3 AS district_region FROM      account a JOIN      district d ON a.district_id = d.id WHERE      YEAR(a.opening_date) = 1993 AND      EXISTS (         SELECT              1          FROM              trans t          WHERE              t.account_id = a.account_id              AND t.type = 'POPLATEK PO OBRATU'     );	financial
SELECT      a.account_id,      COUNT(t.transaction_id) AS statement_count FROM      trans t JOIN      account a ON t.account_id = a.account_id WHERE      t.date >= '1995-01-01'      AND t.date <= '2000-12-31'     AND a.owner LIKE '%East Bohemia%' GROUP BY      a.account_id;	financial
SELECT a.account_id, a.date FROM account a JOIN account_district ad ON a.account_id = ad.account_id JOIN district d ON ad.district_id = d.district_id WHERE d.A2 = 'Prachatice';	financial
SELECT d.A2 AS District, d.A3 AS Region FROM district d JOIN loan l ON d.id = l.district_id WHERE l.loan_id = 4990;	financial
SELECT      l.account_id,     d.A2 AS district,     d.A3 AS region FROM      loan l JOIN      account a ON l.account_id = a.account_id JOIN      district d ON a.district_id = d.id WHERE      l.amount > 300000;	financial
SELECT l.loan_id, d.A3 AS district_region, d.A11 AS average_salary FROM loan l JOIN account a ON l.account_id = a.account_id JOIN district d ON a.district_id = d.id WHERE l.duration = 60;	financial
SELECT DISTINCT d.name AS district_name,                 d.country_code AS state,                 ((d.A13 - d.A12) / d.A12 * 100) AS unemployment_increment_percentage FROM loan l JOIN account a ON l.account_id = a.account_id JOIN client c ON a.client_id = c.client_id JOIN district d ON c.district_id = d.district_id WHERE l.status = 'D';	financial
SELECT COUNT(DISTINCT a.account_id) AS num_accounts FROM account a JOIN district_info di ON a.account_id = di.account_id WHERE YEAR(a.date) = 1993 AND di.district_code = 'A2';	financial
SELECT account_id FROM account WHERE issue = 'POPLATEK MESICNE';	financial
SELECT A2 AS District, COUNT(*) AS Female_Count FROM account WHERE gender = 'F' GROUP BY District ORDER BY Female_Count DESC LIMIT 9;	financial
SELECT d.A2 AS DistrictName, SUM(t.Amount) as TotalWithdrawals FROM trans t JOIN account a ON t.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE t.type = 'VYDAJ' AND t.date LIKE '1996-01%' GROUP BY d.A2 ORDER BY TotalWithdrawals DESC LIMIT 10;	financial
SELECT COUNT(*) AS num_accounts_without_credit_cards FROM account acc WHERE acc.region = 'South Bohemia' AND NOT EXISTS (     SELECT 1      FROM loan l      WHERE l.account_id = acc.account_id );	financial
SELECT a.databank_code AS district_id, COUNT(*) AS total_active_loans FROM loan l JOIN account a ON l.account_id = a.id WHERE l.status IN ('C', 'D') GROUP BY a.databank_code ORDER BY total_active_loans DESC LIMIT 1;	financial
SELECT AVG(l.amount) AS avg_loan_amount  FROM loan l JOIN account a ON l.account_id = a.account_id JOIN persons p ON a.person_id = p.person_id WHERE p.gender = 'M';	financial
SELECT A2 AS DistrictName, A13 AS UnemploymentRate FROM district WHERE A13 = (SELECT MAX(A13) FROM district);	financial
SELECT MAX(A16) AS max_crimes FROM branch;	financial
WITH  withdrawals AS (     SELECT account_id      FROM trans      WHERE operation = 'VYBER KARTA' ), payments AS (     SELECT account_id      FROM orders      WHERE k_symbol = 'POPLATEK MESICNE' ), balances AS (     SELECT          t.account_id,         COALESCE(SUM(CASE WHEN type = 'PRIJEM' THEN amount ELSE -amount END), 0) +          COALESCE((SELECT SUM(amount) FROM orders WHERE k_symbol = 'POPLATEK MESICNE' AND account_id = t.account_id), 0) AS current_balance     FROM trans t     GROUP BY t.account_id ) SELECT DISTINCT w.account_id FROM withdrawals w JOIN payments p ON w.account_id = p.account_id JOIN balances b ON w.account_id = b.account_id WHERE b.current_balance < 0;	financial
SELECT COUNT(*)  FROM loan l WHERE amount >= 250000  AND date BETWEEN '1995-01-01' AND '1997-12-31' AND EXISTS (     SELECT 1      FROM trans t      WHERE t.account_id = l.account_id      AND operation = 'POPLATEK MESICNE' );	financial
SELECT COUNT(DISTINCT l.account_id)  FROM loan l  JOIN order o ON l.account_id = o.account_aid  WHERE o.bank_to = 'ST' AND (l.status = 'C' OR l.status = 'D');	financial
WITH CrimeCounts AS (     SELECT bid, A15,            ROW_NUMBER() OVER (ORDER BY A15 DESC) as rn     FROM branch ) SELECT COUNT(*) as MaleCustomersCount FROM account a JOIN client c ON a.ownerid = c.client_id WHERE a.bid IN (     SELECT bid      FROM CrimeCounts      WHERE rn = 2 );	financial
SELECT COUNT(*) AS NumberOfGoldOwnerCards FROM card c JOIN disposition d ON c.account_id = d.account_id WHERE c.type = 'gold' AND d.type = 'OWNER';	financial
SELECT COUNT(a.acc_id) AS account_count FROM account a JOIN district d ON a.district_id = d.A1 WHERE d.A2 = 'Pisek';	financial
SELECT DISTINCT a.district  FROM trans t JOIN account a ON t.account_id = a.account_id WHERE YEAR(t.date) = '1997' AND t.amount > 10000;	financial
SELECT DISTINCT account_id FROM `order` WHERE k_symbol = 'SIPO';	financial
SELECT account_id  FROM card  WHERE type = 'gold';	financial
SELECT      DATE_TRUNC('month', date) AS month,     AVG(amount) AS average_withdrawal FROM      trans WHERE      operation = 'VYBER KARTOU' AND     date >= '2021-01-01' AND date <= '2021-12-31' GROUP BY      month;	financial
WITH avg_credit_card AS (     SELECT          AVG(amount) AS average_amount     FROM          trans     WHERE          date LIKE '1998%' AND operation = 'VYBER KARTOU' ) SELECT DISTINCT      t.account_id FROM      trans t, avg_credit_card ac WHERE      t.date LIKE '1998%'      AND t.operation = 'VYBER KARTOU'      AND t.amount < ac.average_amount;	financial
SELECT DISTINCT l.account_id FROM loan l JOIN account a ON l.account_id = a.account_id WHERE l.status = 'A'  -- Assuming 'status' indicates active loans and gender is inferred from another table (e.g., 'customer.gender') AND EXISTS (     SELECT 1      FROM order o      WHERE o.account_id = l.account_id      AND o.type = 'credit' );	financial
SELECT COUNT(*)  FROM clients  WHERE gender = 'F' AND A3 = 'south Bohemia';	financial
SELECT a.account_id  FROM account a  JOIN district d ON a.district = d.id  WHERE d.A2 = 'Tabor' AND a.type = 'OWNER';	financial
SELECT      a.id AS account_id,     a.name AS account_name,     a.type AS account_type FROM      account a WHERE      a.type != 'OWNER';	financial
SELECT COUNT(DISTINCT d.account_id) AS count_accounts FROM database d  JOIN trans t ON d.account_id = t.account_id  WHERE d.A3 = 'North Bohemia' AND t.bank = 'AB';	financial
SELECT DISTINCT d.A2  FROM trans t JOIN account a ON t.account_id = a.id JOIN districts d ON a.district_id = d.id WHERE t.type = 'VYDAJ';	financial
SELECT AVG(db.A15) as Average_A15 FROM databse db WHERE db.A15 > 4000   AND EXISTS (     SELECT 1     FROM account acc     WHERE acc.date >= '1997-01-01'       AND acc.region_id = db.region_id -- Assuming region_id is the linking column   );	financial
SELECT COUNT(*)  FROM card  WHERE type = 'classic'  AND EXISTS (     SELECT 1      FROM account      WHERE account.account_id = card.account_id      AND type = 'OWNER' );	financial
SELECT COUNT(*)  FROM client  WHERE gender = 'M' AND A2 = 'Hl. m. Praha';	financial
SELECT (COUNT(CASE WHEN type = 'Gold' AND issued < '1998-01-01' THEN 1 END) / COUNT(*)) * 100 AS gold_card_percentage FROM cards;	financial
SELECT c.name AS account_holder FROM client c JOIN account a ON c.id = a.client_id WHERE a.id IN (     SELECT l.account_id      FROM loan l      WHERE l.amount = (SELECT MAX(amount) FROM loan) );	financial
SELECT d.A15 AS Crimes_1995 FROM account a JOIN district d ON a.district_id = d.district_id WHERE a.account_id = 532;	financial
SELECT d.district_id  FROM order o JOIN account a ON o.account_id = a.account_id JOIN customer c ON a.customer_id = c.customer_id JOIN district d ON c.district_id = d.district_id WHERE o.order_id = 33333;	financial
SELECT t.* FROM trans AS t JOIN account AS a ON t.account_id = a.account_id WHERE a.client_id = 3356 AND t.operation = 'VYBER';	financial
SELECT COUNT(DISTINCT a.account_id) AS weekly_loan_count FROM account a JOIN loan l ON a.account_id = l.account_id WHERE a.type = 'POPLATEK TYDNE' AND l.amount < 200000;	financial
SELECT c.type  FROM card c JOIN account a ON c.account_id = a.id WHERE a.client_id = 13539;	financial
SELECT c.region  FROM client c  JOIN databse d ON c.region_code = d.A3  WHERE c.client_id = 3541;	financial
SELECT a.district, COUNT(DISTINCT l.account_id) AS num_accounts_with_clean_loans FROM loan l JOIN account a ON l.account_id = a.account_id WHERE l.status = 'A' GROUP BY a.district ORDER BY num_accounts_with_clean_loans DESC LIMIT 1;	financial
SELECT account_id FROM `order` WHERE order_id = 32423;	financial
SELECT t.trans_id, t.account_aid, t.amount, t.date FROM trans t JOIN account a ON t.account_aid = a.aid WHERE a.district_id = 5;	financial
SELECT COUNT(*)  FROM account  JOIN customer ON account.customer_id = customer.customer_id  JOIN district ON customer.district_id = district.district_id  WHERE district.name = 'Jesenik';	financial
SELECT DISTINCT a.client_id  FROM trans t  JOIN account a ON t.account_id = a.id  WHERE t.type = 'KARTA' AND t.operation = 'JUNIOR' AND t.date >= '1997-01-01';	financial
SELECT      COUNT(c.id) AS total_clients,     COUNT(CASE WHEN c.gender = 'Female' THEN 1 END) AS female_clients,     (COUNT(CASE WHEN c.gender = 'Female' THEN 1 END) / COUNT(c.id)) * 100 AS percentage_female FROM      account a JOIN      district d ON a.district_id = d.district_id JOIN      account_client ac ON a.id = ac.account_id JOIN      client c ON ac.client_id = c.id WHERE      d.A11 > 10000;	financial
SELECT      (         (SUM(CASE WHEN YEAR(l.date) = 1997 THEN l.amount ELSE 0 END) -           SUM(CASE WHEN YEAR(l.date) = 1996 THEN l.amount ELSE 0 END))          / NULLIF(SUM(CASE WHEN YEAR(l.date) = 1996 THEN l.amount ELSE 0 END), 0)     ) * 100 AS growth_rate FROM      loan l JOIN      account a ON l.account_id = a.id JOIN      client c ON a.client_id = c.id WHERE      c.gender = 'M';	financial
SELECT COUNT(*) FROM trans WHERE operation = 'VYBER KARTOU' AND date > '1995-12-31';	financial
SELECT    (SELECT SUM(A16) FROM databse WHERE A3 = 'East Bohemia') -    (SELECT SUM(A16) FROM databse WHERE A3 = 'North Bohemia') AS difference;	financial
SELECT      SUM(CASE WHEN operation = 'VKLAD' THEN 1 ELSE 0 END) AS owner_dispositions,     SUM(CASE WHEN operation != 'VKLAD' THEN 1 ELSE 0 END) AS disponent_dispositions FROM trans WHERE account_id BETWEEN 1 AND 10;	financial
SELECT      COUNT(*) AS statement_requests,     (SELECT k_symbol FROM trans WHERE account_id = 3 AND amount = -3539) AS purpose_of_debit_3539 FROM      trans WHERE      account_id = 3 AND type = 'PRIJEM' AND operation = 'VKLAD';	financial
-- It is impossible to answer this question with the provided data.	financial
SELECT COUNT(DISTINCT a.account_id) AS num_accounts FROM `account` a JOIN `trans` t ON a.account_id = t.account_id WHERE t.k_symbol = 'POPLATEK PO OBRATU';	financial
SELECT      SUM(amount) AS total_debt,     MAX(status) AS payment_status FROM loan WHERE account_id = 992;	financial
SELECT      (SELECT balance FROM trans WHERE account_id = acc.account_id AND trans_id = 851) AS total_sum,     cli.gender FROM      account acc JOIN      client cli ON acc.client_id = cli.client_id WHERE      cli.client_id = 4;	financial
SELECT account_id  FROM client  WHERE client_id = 9;	financial
SELECT SUM(t.amount) as total_amount_paid FROM trans t JOIN account a ON t.account_aid = a.account_id WHERE a.account_id = 617  AND t.date >= '1998-01-01'  AND t.date < '1999-01-01';	financial
-- Unfortunately, the SQL query cannot be completed as the required data is not present in the provided tables.	financial
SELECT l.loan_id, l.amount FROM loan l JOIN account a ON l.account_id = a.account_id WHERE a.gender = 'F' ORDER BY l.amount DESC LIMIT 3;	financial
SELECT COUNT(DISTINCT c.id) AS male_customers_count FROM trans t JOIN account a ON t.account_id = a.id JOIN customer c ON a.owner = c.id WHERE t.k_symbol = 'SIPO'    AND t.amount > 4000    AND c.gender = 'M'    AND c.birth_year BETWEEN 1974 AND 1976;	financial
SELECT COUNT(DISTINCT a.account_id) AS count  FROM account a JOIN (     SELECT account_id, MIN(date) AS first_trans_date     FROM trans     GROUP BY account_id ) t ON a.account_id = t.account_id WHERE t.first_trans_date > '1996-01-01' AND EXISTS (     SELECT 1      FROM orders o      WHERE o.account_id = a.account_id      AND o.bank_to = 'Beroun' );	financial
SELECT COUNT(*)  FROM customer c  JOIN disp d ON c.id = d.customer_id  JOIN card crd ON d.id = crd.disp_id  WHERE c.gender = 'F' AND crd.type = 'junior';	financial
SELECT      (COUNT(DISTINCT c.client_id) * 100.0 / COUNT(DISTINCT a.account_id)) AS female_proportion FROM      client c JOIN      account a ON c.client_id = a.client_id WHERE      a.A3 = 'Prague';	financial
SELECT      (COUNT(CASE WHEN a.gender = 'M' THEN 1 END) / COUNT(*) * 100) AS male_percentage FROM      order o JOIN      account a ON o.account_id = a.account_id WHERE      o.k_symbol = 'POPLATEK TYDNE';	financial
SELECT COUNT(DISTINCT o.account_id) AS NumberOfOwnersWithWeeklyIssuance FROM orders o JOIN account_role ar ON o.account_id = ar.account_id WHERE o.k_symbol = 'POPLATEK TYDNE' AND ar.role = 'Owner';	financial
SELECT a.account_id, MIN(l.amount) AS minimum_approved_amount, a.open_date FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.duration > 24 AND a.open_date < '1997-01-01' GROUP BY a.account_id, a.open_date HAVING MIN(l.amount);	financial
WITH FemaleClients AS (     SELECT          d.account_id,         a.open_date     FROM          database_table d     LEFT JOIN          account a ON d.account_id = a.account_id     WHERE          gender = 'F' ), AvgTransaction AS (     SELECT          t.account_id,         AVG(t.amount) as avg_amount     FROM          trans t     GROUP BY          t.account_id ) SELECT      fc.account_id FROM      FemaleClients fc JOIN      AvgTransaction at ON fc.account_id = at.account_id WHERE      at.avg_amount = (         SELECT MIN(avg_amount)          FROM AvgTransaction          WHERE account_id IN (SELECT account_id FROM FemaleClients)     ) ORDER BY      fc.open_date ASC LIMIT 1;	financial
SELECT COUNT(*) FROM `database` WHERE A3 = 'East Bohemia' AND YEAR(A10) = 1920;	financial
SELECT COUNT(DISTINCT l.account_id) AS prepayment_loan_count FROM loan l JOIN account a ON l.account_id = a.id WHERE l.duration = 24 AND a.frequency = 'POPLATEK TYDNE';	financial
SELECT AVG(l.amount) AS average_loan_amount FROM loan l JOIN trans t ON l.account_id = t.account_id WHERE l.status IN ('C', 'D')  AND t.k_symbol = 'POPLATEK PO OBRATU';	financial
SELECT c.client_id, c.district  FROM account a JOIN (     SELECT DISTINCT account_id      FROM (         SELECT account_id FROM order          UNION          SELECT account_id FROM loan     ) AS t ) acc ON a.account_id = acc.account_id JOIN client c ON a.client_id = c.id;	financial
SELECT c.id, c.age FROM client c WHERE    -- Check if the client has at least one gold card.   (c.id IN (SELECT ca.client_id FROM card ca WHERE ca.type = 'gold'))    AND    -- Check if any of their accounts have a dispersion of type 'OWNER'.   (     EXISTS (       SELECT 1       FROM disp d       WHERE d.account_id IN (SELECT ca.account_id FROM card ca WHERE ca.client_id = c.id)         AND d.type = 'OWNER'     )   );	financial
SELECT bond_type  FROM (     SELECT bond_type, COUNT(*) AS cnt     FROM bond     GROUP BY bond_type ) AS counts WHERE cnt = (SELECT MAX(cnt) FROM (     SELECT COUNT(*) AS cnt     FROM bond     GROUP BY bond_type ));	toxicology
SELECT COUNT(DISTINCT m.molecule_id)  FROM molecule m  JOIN atom a ON m.molecule_id = a.molecule_id  WHERE m.label = '-' AND a.element = 'cl';	toxicology
WITH SingleBondedMolecules AS (     SELECT m.molecule_id     FROM molecule m     WHERE NOT EXISTS (         SELECT 1         FROM bond b         WHERE b.molecule_id = m.molecule_id AND b.bond_type != '-'     ) ) SELECT AVG(o_count) AS average_oxygen FROM (     SELECT a.molecule_id, COUNT(CASE WHEN element = 'O' THEN 1 END) AS o_count     FROM atom a     GROUP BY a.molecule_id ) o_counts JOIN SingleBondedMolecules sbm ON o_counts.molecule_id = sbm.molecule_id;	toxicology
SELECT      (COUNT(bond.bond_id) / COUNT(atom.atom_id)) AS average_single_bonds FROM      molecule JOIN      atom ON molecule.molecule_id = atom.molecule_id JOIN      connected ON atom.atom_id = connected.atom_id JOIN      bond ON connected.bond_id = bond.bond_id WHERE      molecule.label = '+' AND bond.bond_type = '-' GROUP BY      molecule.molecule_id;	toxicology
SELECT COUNT(*) FROM atom  INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id  WHERE element = 'na' AND label = '-';	toxicology
SELECT * FROM `molecule` WHERE `label` = '+' AND EXISTS (SELECT 1 FROM `bond` WHERE `molecule_	toxicology
SELECT (SUM(CASE WHEN element = 'c' THEN 1 ELSE 0 END) * 100 / COUNT(atom_id)) AS percentage FROM atom  WHERE molecule_id IN (     SELECT molecule_id      FROM bond      WHERE bond_type = '=' );	toxicology
SELECT COUNT(*) FROM bond WHERE bond_type = '#';	toxicology
SELECT COUNT(*) FROM atom WHERE element != 'br';	toxicology
SELECT COUNT(molecule_id) FROM molecule WHERE label = '+' AND molecule_id BETWEEN 'TR000' AND 'TR099';	toxicology
SELECT DISTINCT molecule.molecule_aid FROM molecule JOIN atom ON molecule.molecule_aid = atom.molecule_aid WHERE element = 'c';	toxicology
SELECT DISTINCT a.element  FROM atom a JOIN connected c ON a.atom_id = c.atom_1 OR a.atom_id = c.atom_2 WHERE c.bond_id = 'TR004_8_9';	toxicology
SELECT DISTINCT a.element  FROM atom a  JOIN connected c1 ON a.atom_id = c1.atom_id  JOIN bond b ON c1.bond_id = b.bond_id  WHERE b.bond_type = '=';	toxicology
SELECT molecule.label  FROM atom  JOIN molecule ON atom.molecule_id = molecule.molecule_id  WHERE atom.element = 'h'  GROUP BY molecule.label  ORDER BY COUNT(molecule.label) DESC  LIMIT 1;	toxicology
SELECT DISTINCT b.bond_type  FROM atom a1  JOIN connected c ON a1.atom_id = c.atom_1  JOIN bond b ON c.bond_id = b.bond_id  WHERE a1.element = 'cl';	toxicology
SELECT      a1.element AS element1,     a2.element AS element2 FROM      connected c JOIN      bond b ON c.bond_id = b.bond_id JOIN      atom a1 ON c.atom_id = a1.atom_id JOIN      atom a2 ON c.atom_id2 = a2.atom_id WHERE      b.bond_type = '-';	toxicology
SELECT * FROM connected JOIN atom AS a1 ON connected.atom_id = a1.atom_id JOIN atom AS a2 ON connected.atom_id2 = a2.atom_id WHERE a1.molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '-') AND a2.molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '-');	toxicology
SELECT element FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '-' GROUP BY element HAVING COUNT(*) = (     SELECT MIN(cnt)      FROM (         SELECT COUNT(*) as cnt          FROM atom a2          JOIN molecule m2 ON a2.molecule_id = m2.molecule_id          WHERE m2.label = '-'          GROUP BY a2.element     ) as min_counts ) ORDER BY COUNT(*);  The final answer is the element(s) with the least count. For example, if 'c' has the smallest count:  \boxed{C}	toxicology
SELECT bond.bond_type FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE (connected.atom_1 = 'TR004_8' AND connected.atom_2 = 'TR004_20') OR (connected.atom_1 = 'TR004_20' AND connected.atom_2 = 'TR004_8');	toxicology
SELECT l.label FROM (     SELECT DISTINCT label     FROM molecule ) l WHERE l.label NOT IN (     SELECT m.label     FROM molecule m     JOIN atom a ON m.molecule_id = a.molecule_id     WHERE a.element != 'sn' );	toxicology
WITH SingleBondAtoms AS (     SELECT DISTINCT          a.molecule_id,         a.atom_id     FROM          connected c     JOIN          bond b ON c.bond_id = b.bond_id     JOIN          atom a ON c.atom_id = a.atom_id     WHERE          b.bond_type = '-' ) SELECT      COUNT(DISTINCT sa.atom_id) AS total_atoms FROM      SingleBondAtoms sa JOIN      atom a ON sa.atom_id = a.atom_id WHERE      a.element IN ('i', 's');	toxicology
SELECT atom_id, atom_id2  FROM connected  JOIN bond ON connected.bond_id = bond.bond_id  WHERE bond.bond_type = '#';	toxicology
SELECT atom_id FROM atom WHERE molecule_id = 'TR181';	toxicology
SELECT (     (SELECT COUNT(DISTINCT m.molecule_id) FROM atom a RIGHT JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '+' AND a.element != 'f' GROUP BY m.molecule_id HAVING SUM(CASE WHEN a.element = 'f' THEN 1 ELSE 0 END) = 0)     /      (SELECT COUNT(DISTINCT m2.molecule_id) FROM molecule m2 WHERE m2.label = '+') ) * 100 AS percentage;	toxicology
SELECT      (SUM(CASE WHEN bond_type = '#' THEN 1 ELSE 0 END) * 100 / COUNT(bond_id)) AS percent  FROM      bond  WHERE      molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+');	toxicology
SELECT DISTINCT element FROM atom WHERE molecule_id = 'TR000' ORDER BY element ASC LIMIT 3;	toxicology
SELECT a.atom_id AS atom1, b.atom_id AS atom2  FROM connected c  JOIN atom a ON c.atom_id = a.atom_id  JOIN atom b ON c.atom_id2 = b.atom_id  WHERE c.bond_id = 'TR001_2_6' AND a.molecule_id = 'TR001';	toxicology
SELECT (SELECT COUNT(*) FROM molecule WHERE label = '+') - (SELECT COUNT(*) FROM molecule WHERE label = '-') AS difference;  The SQL query calculates the difference between the number of carcinogenic ('+') and non-carcinogenic '-' molecules by counting each category separately and subtracting their counts.	toxicology
SELECT atom_id, atom_id2 FROM connected WHERE bond_id = 'TR000_2_5';	toxicology
SELECT DISTINCT bond_id FROM connected WHERE atom_id2 = 'TR000_2';	toxicology
SELECT DISTINCT molecule_id FROM bond WHERE bond_type = '=' ORDER BY molecule_id ASC LIMIT 5;	toxicology
SELECT ROUND((COUNT(CASE WHEN bond_type = '=' THEN 1 END) / COUNT(bond_id)) * 100, 5) AS percent FROM bond WHERE molecule_id = 'TR008';	toxicology
SELECT (SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) / COUNT(molecule_id)) * 100 AS percent FROM molecule;	toxicology
SELECT COUNT(*) FROM `atom` WHERE `molecule_id` = 'TR206';	toxicology
SELECT bond_type FROM bond WHERE molecule_id = 'TR000';	toxicology
SELECT molecule.label AS Label, atom.element AS Element  FROM molecule  INNER JOIN atom ON molecule.molecule_id = atom.molecule_id  WHERE molecule.molecule_id = 'TR060';	toxicology
SELECT      bond_type,     COUNT(bond_type) AS count_bond_type,     MAX(COUNT(bond_type)) OVER() AS max_count FROM      bond WHERE      molecule_id = 'TR010' GROUP BY      bond_type;      SELECT      label FROM      molecule WHERE      molecule_id = 'TR010';	toxicology
SELECT m.molecule_id  FROM molecule m  JOIN bond b ON m.molecule_id = b.molecule_id  WHERE m.label = '-' AND b.bond_type = '-'  GROUP BY m.molecule_id  ORDER BY m.molecule_id  LIMIT 3;	toxicology
SELECT bond_id FROM bond WHERE molecule_id = 'TR006' ORDER BY bond_id ASC LIMIT 2;	toxicology
SELECT COUNT(*) FROM connected JOIN bond ON connected.bond_id = bond.bond_id WHERE (connected.atom_id = 'TR009_12' OR connected.atom_id2 = 'TR009_12') AND bond.molecule_id = 'TR009';	toxicology
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m LEFT JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+' AND a.element = 'br';	toxicology
SELECT b.bond_type AS BondType, c.atom_id AS Atom1, c.atom_id2 AS Atom2  FROM bond b  JOIN connected c ON b.bond_id = c.bond_id  WHERE c.bond_id = 'TR001_6_9';	toxicology
SELECT `molecule`.`molecule_id`, `molecule`.`label` FROM `atom` JOIN `molecule` ON `atom`.`molecule_id` = `molecule`.`molecule_id` WHERE `atom`.`atom_	toxicology
SELECT COUNT(DISTINCT molecule_id) AS count FROM bond WHERE bond_type = '#';	toxicology
SELECT COUNT(*) FROM connected WHERE atom_id LIKE 'TR%_19' OR atom_id2 LIKE 'TR%_19';	toxicology
SELECT element FROM atom WHERE molecule_id = 'TR004';	toxicology
SELECT COUNT(*) FROM molecule WHERE label = '-';	toxicology
SELECT DISTINCT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_ WHERE SUBSTR(a.atom_id,7,2) BETWEEN '21' AND '25' AND m.label = '+';	toxicology
SELECT DISTINCT c.bond_id  FROM connected c  JOIN atom a1 ON c.atom_id = a1.atom_id  JOIN atom a2 ON c.atom_id2 = a2.atom_id  WHERE (a1.element = 'p' AND a2.element = 'n') OR (a1.element = 'n' AND a2.element = 'p');	toxicology
SELECT (SELECT label FROM molecule WHERE molecule_id = (SELECT bond.molecule_id FROM bond WHERE bond_type = '=' GROUP BY molecule_id ORDER BY COUNT(bond_id) DESC LIMIT 1)) AS is_carcinogenic;	toxicology
WITH iodine_bonds AS (     SELECT a.id,            COUNT(DISTINCT b.id) AS num_bonds     FROM atoms a     LEFT JOIN bonds b ON a.id = b.atom1_id OR a.id = b.atom2_id     WHERE a.element = 'I'     GROUP BY a.id ) SELECT AVG(num_bonds) AS average_bonds_per_i FROM iodine_bonds;	toxicology
SELECT b.bond_ id AS bond_id, b.bond_type FROM connected c JOIN bond b ON c.bond_ id = b.bond_ id WHERE SUBSTR(c.atom_ id, 7, 2) = '45' OR SUBSTR(c.atom_id2, 7, 2) = '45';	toxicology
SELECT element FROM atom WHERE atom_id NOT IN (SELECT atom_id FROM connected);	toxicology
SELECT      a1.atom_id, a1.element,     a2.atom_id, a2.element FROM      bond b JOIN      connected c ON b.bond_id = c.bond_id JOIN      atom a1 ON c.atom_1 = a1.atom_id JOIN      atom a2 ON c.atom_2 = a2.atom_id WHERE      b.molecule_id = 'TR041' AND b.bond_type = '#';	toxicology
SELECT a.element FROM connected c JOIN atom a ON c.atom_id = a.atom_id WHERE c.bond_id = 'TR144_8_19' UNION SELECT a.element FROM connected c JOIN atom a ON c.atom_id2 = a.atom_id WHERE c.bond_id = 'TR144_8_19';	toxicology
SELECT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE m.label = '+' AND b.bond_type = '=' GROUP BY m.molecule_id ORDER BY COUNT(b.bond_id) DESC LIMIT 1;	toxicology
SELECT element, COUNT(*) AS count  FROM atom  JOIN molecule ON atom.molecule_id = molecule.molecule_id  WHERE label = '+'  GROUP BY element  ORDER BY count ASC  LIMIT 1;	toxicology
SELECT a.*  FROM atom a WHERE a.atom_id IN (     SELECT c1.atom_id2 FROM connected c1 WHERE c1(atom_id) IN (SELECT atom_id FROM atom WHERE element = 'pb')     UNION     SELECT c2.atom_id FROM connected c2 WHERE c2(atom_id2) IN (SELECT atom_id FROM atom WHERE element = 'pb') );	toxicology
SELECT DISTINCT element  FROM (     SELECT A.element AS element      FROM bond D      JOIN connected C ON D.bond_id = C.bond_id      JOIN atom A ON C.atom_id = A.atom_aid      WHERE D.bond_type = '#'      UNION ALL      SELECT B.element AS element      FROM bond D      JOIN connected C ON D.bond_id = C.bond_id      JOIN atom B ON C.atom_id2 = B.atom_aid      WHERE D.bond_type = '#' ) combined;	toxicology
WITH ElementPairs AS (     SELECT          bond_id,         CASE              WHEN a1.element <= a2.element THEN a1.element || '-' || a2.element             ELSE a2.element || '-' || a1.element         END AS element_pair     FROM connected c     JOIN atom a1 ON c.atom_id = a1.atom_id     JOIN atom a2 ON c.atom_id2 = a2.atom_id ), BondCounts AS (     SELECT          element_pair,         COUNT(*) as count,         RANK() OVER (ORDER BY COUNT(*) DESC) as rank     FROM ElementPairs     GROUP BY element_pair ) SELECT      (bc.count * 100.0 / total_bonds.total) AS percentage FROM BondCounts bc JOIN (     SELECT COUNT(DISTINCT bond_id) as total     FROM connected ) total_bonds ON 1=1 WHERE bc.rank = 1;	toxicology
SELECT      COUNT(CASE WHEN m.label = '+' THEN 1 END) * 100.0 / COUNT(*) AS proportion FROM      bond b JOIN      molecule m ON b.molecule_id = m.molecule_id WHERE      b.bond_type = '-';	toxicology
SELECT COUNT(*) FROM atom WHERE element IN ('c', 'h');	toxicology
SELECT connected.atom_id2 FROM connected JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 's';	toxicology
SELECT DISTINCT `bond`.`bond_type` FROM `connected`  JOIN `atom` AS `atom1` ON `connected`.`atom_1` = `atom1`.`atom_id`  JOIN `atom` AS `atom2` ON `connected`.`atom_2` = `atom2`.`atom_id`  JOIN `bond` ON `connected`.`bond_id` = `bond`.`bond_id`  WHERE `atom1`.`element` = 'sn' OR `atom2`.`element` = 'sn';	toxicology
SELECT COUNT(DISTINCT a.element) AS num_elements  FROM atom a  JOIN bond b ON a.molecule_id = b.molecule_id  WHERE b.bond_type = '-';	toxicology
SELECT COUNT(*) FROM atom WHERE element IN ('p', 'br') AND molecule_id IN (SELECT DISTINCT molecule_id FROM bond WHERE bond_type = '#');	toxicology
SELECT bond.bond_id FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+';	toxicology
SELECT m.molecule_id FROM `bond` AS b  JOIN `molecule` AS m ON b.molecule_id = m.molecule_id  WHERE b.bond_type = '-' AND m.label = '-';	toxicology
SELECT      (SUM(CASE WHEN element = 'cl' THEN 1 ELSE 0 END) / COUNT(atom_id)) * 100 AS percent FROM      atom WHERE      molecule_id IN (SELECT DISTINCT molecule_id FROM bond WHERE bond_type = '-');	toxicology
SELECT label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002');	toxicology
SELECT molecule_id FROM molecule WHERE label = '-';	toxicology
SELECT COUNT(molecule_id) AS total_carcinogenic_molecules FROM molecule WHERE label = '+' AND molecule_id BETWEEN 'TR000' AND 'TR030';	toxicology
SELECT bond_type FROM bond WHERE molecule_id BETWEEN 'TR000' AND 'TR050';	toxicology
SELECT a.element AS element1, b.element AS element2 FROM connected c JOIN atom a ON c.atom_id = a.atom_id JOIN atom b ON c.atom_id2 = b.atom_id WHERE c.bond_id = 'TR001_10_11';  The SQL query joins the `connected` table with the `atom` table twice to retrieve the elements of both atoms involved in the bond specified by 'TR001_10_11'. This effectively fetches the two elements connected by that bond.	toxicology
SELECT COUNT(DISTINCT c.bond_id) AS iodine_bonds_count FROM connected c JOIN atom a ON c.atom_id = a.atom_id WHERE a.element = 'i';	toxicology
SELECT CASE      WHEN COUNT(CASE(label WHEN '+' THEN 1 END)) > COUNT(CASE(label WHEN '-' THEN 1 END))      THEN 'mostly carcinogenic'      ELSE 'mostly non-carcinogenic'  END AS result FROM (     SELECT DISTINCT m.molecule_id, m.label     FROM atom a     JOIN molecule m ON a.molecule_id = m.molecule_id     WHERE a.element = 'ca' ) sub;	toxicology
SELECT * FROM connected  JOIN atom ON connected.atom_id = atom.atom_id  WHERE connected.bond_id = 'TR001_1_8' GROUP BY connected.bond_id  HAVING COUNT(DISTINCT CASE WHEN element = 'cl' THEN 1 END) > 0 AND COUNT(DISTINCT CASE WHEN element = 'c' THEN 1 END) > 0;	toxicology
SELECT DISTINCT m.molecule_id  FROM molecule m  JOIN bond b ON m.molecule_id = b.molecule_id  JOIN atom a ON b.molecule_id = a.molecule_id  WHERE m.label = '-' AND b.bond_type = '#' AND a.element = 'c';	toxicology
SELECT (SUM(CASE WHEN element = 'cl' THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS percentage FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '+';	toxicology
SELECT DISTINCT element FROM atom WHERE molecule_id = 'TR001';	toxicology
SELECT molecule_id FROM bond WHERE bond_type = '=';	toxicology
SELECT `atom_id`, `atom_id2` FROM `connected` WHERE `bond_id` IN (SELECT `bond_	toxicology
SELECT element FROM `atom` WHERE atom_id IN (SELECT atom_id FROM `connected` WHERE bond_id = 'TR000_1_2')   UNION ALL   SELECT element FROM `atom` WHERE atom_id IN (SELECT atom_id2 FROM `connected` WHERE bond_id = 'TR000_1_2');	toxicology
SELECT COUNT(DISTINCT m.molecule_id) AS count_non_carcinogenic_single_bond_molecules FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE m.label = '-' AND b.bond_type = '-';	toxicology
SELECT m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_id = 'TR001_10_11';	toxicology
SELECT b.bond_id, m.label  FROM bond b  INNER JOIN molecule m ON b.molecule_id = m.molecule_id  WHERE b.bond_type = '#';	toxicology
SELECT      atom.element, COUNT(atom.element) AS tally  FROM      molecule  JOIN      atom ON molecule.molecule_id = atom.molecule_aid  WHERE      molecule.label = '+'      AND substr(atom.atom_aid, 7, 1) = '4'  GROUP BY      atom.element;	toxicology
SELECT (COUNT(CASE WHEN element = 'h' THEN 1 END) / COUNT(element)) AS hydrogen_ratio, m.label FROM atom a INNER JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.molecule_id = 'TR006' GROUP BY a.molecule_id;	toxicology
SELECT m.molecule_id, m.label  FROM molecule m  JOIN atom a ON m.molecule_id = a.molecule_id  WHERE a.element = 'ca';	toxicology
SELECT DISTINCT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON (c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id) WHERE a.element = 'c';	toxicology
SELECT a.element AS element_1, a2.element AS element_2 FROM connected c JOIN atom a ON c.atom_id = a.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE c.bond_id = 'TR001_10_11';	toxicology
SELECT      ( (SELECT COUNT(DISTINCT molecule_id) FROM bond WHERE bond_type = '#') * 100.0 ) /      (SELECT COUNT(*) FROM molecule) AS percentage;	toxicology
SELECT (SUM(CASE WHEN bond_type = '=' THEN 1 ELSE 0 END) / COUNT(bond_id)) * 100 AS percent FROM bond WHERE molecule_id = 'TR047';	toxicology
SELECT m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.atom_id = 'TR001_1';	toxicology
SELECT * FROM molecule WHERE molecule_id = 'TR151' AND label = '+';	toxicology
SELECT element FROM atom WHERE molecule_id = 'TR151';	toxicology
SELECT COUNT(*) FROM molecule WHERE label = '+';	toxicology
SELECT a.atom_id FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'c' AND  SUBSTR(m.molecule_id, 3, 3) >= 10 AND SUBSTR(m.molecule_id, 3, 3) <=50;	toxicology
SELECT COUNT(*) FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+');	toxicology
SELECT bond.bond_id  FROM bond  JOIN molecule ON bond.molecule_ id = molecule.molecule_ id  WHERE molecule.label = '+' AND bond.bond_ type = '=';	toxicology
SELECT COUNT(*)  FROM atom  JOIN molecule ON atom.molecule_id = molecule.molecule_id  WHERE atom.element = 'h' AND molecule.label = '+';	toxicology
SELECT b.molecule_id FROM connected c  INNER JOIN bond b ON c.bond_id = b.bond_id  WHERE (c.atom_id = 'TR000_1' OR c.atom_id2 = 'TR000_1') AND c.bond_id = 'TR000_1_2';	toxicology
SELECT atom_id FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE element = 'c' AND label = '-';	toxicology
SELECT ROUND(     (         COUNT(*) /          (SELECT COUNT(*) FROM molecule)     ) * 100.0, 2 ) AS percentage FROM (     SELECT m.molecule_id     FROM atom a     JOIN molecule m ON a.molecule_id = m.molecule_id     WHERE m.label = '+'     GROUP BY m.molecule_id     HAVING SUM(CASE WHEN a.element = 'h' THEN 1 ELSE 0 END) > 0 );	toxicology
SELECT label FROM molecule WHERE molecule_id = 'TR124';	toxicology
SELECT atom_id FROM atom WHERE molecule_id = 'TR186';	toxicology
SELECT `bond_type` FROM `bond` WHERE `bond_id` = 'TR007_4_19';	toxicology
SELECT DISTINCT a.element  FROM connected c  JOIN atom a ON c.atom_id = a.atom_aid  WHERE c.bond_id = 'TR001_2_4';	toxicology
SELECT COUNT(*) AS double_bond_count  FROM bond  WHERE molecule_id = 'TR006' AND bond_type = '=';  UNION ALL  SELECT label AS carcinogenic_status  FROM molecule  WHERE molecule_id = 'TR006';	toxicology
SELECT m.molecule_id, GROUP_CONCAT(a.element) AS elements  FROM molecule m  JOIN atom a ON m.molecule_id = a.molecule_id  WHERE m.label = '+' AND a.element IS NOT NULL  GROUP BY m.molecule_id;	toxicology
SELECT      b.bond_id,     a1.element AS Atom1,     a2.element AS Atom2,     m.label AS MoleculeLabel FROM      bond b JOIN      connected c ON b.bond_id = c.bond_id JOIN      atom a1 ON c.atom_id = a1.atom_id JOIN      atom a2 ON c.atom_id2 = a2.atom_id LEFT JOIN      molecule m ON b.molecule_id = m.molecule_id WHERE      b.bond_type = '-';	toxicology
SELECT m.molecule_id AS molecule,        GROUP_CONCAT(DISTINCT a.element) AS elements FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON a.atom_id = c.atom_id JOIN molecule m ON m.molecule_id = b.molecule_id WHERE b.bond_type = '#' GROUP BY m.molecule_id;	toxicology
SELECT element FROM atom WHERE atom_id IN (SELECT atom_id FROM connected WHERE bond_id = 'TR000_2_3') OR atom_id IN (SELECT atom_id2 FROM connected WHERE bond_id = 'TR000_2_3');	toxicology
SELECT COUNT(DISTINCT c.bond_id) FROM connected c JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE a1.element = 'cl' OR a2.element = 'cl';	toxicology
SELECT `atom_id` FROM `atom` WHERE `molecule_id` = 'TR346';   SELECT COUNT(DISTINCT `bond_type`) FROM `bond` WHERE `molecule_id` = 'TR346';	toxicology
WITH double_bond_molecules AS (     SELECT DISTINCT molecule_id      FROM bond      WHERE bond_type = '=' ) SELECT COUNT(*)  FROM molecule  WHERE label = '+' AND molecule_id IN (SELECT molecule_id FROM double_bond_molecules);	toxicology
SELECT COUNT(molecule.molecule_id) FROM molecule  WHERE NOT EXISTS (     SELECT 1 FROM atom WHERE atom.molecule_id = molecule.molecule_id AND element = 's' )  AND NOT EXISTS (     SELECT 1 FROM bond WHERE bond.molecule_id = molecule.molecule_id AND bond_type = '=' );	toxicology
SELECT label FROM molecule WHERE molecule_id = (SELECT molecule_id FROM bond WHERE bond_id = 'TR001_2_4');	toxicology
SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR001';	toxicology
SELECT COUNT(*) FROM bond WHERE bond_type = '-';	toxicology
SELECT DISTINCT m.molecule_id FROM molecule m WHERE m.label = '+' AND m.molecule_id IN (SELECT a.molecule_id FROM atom a WHERE a.element = 'cl');	toxicology
SELECT m.molecule_id FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'c' AND m.label = '-';	toxicology
SELECT      (SUM(CASE WHEN EXISTS (         SELECT 1 FROM atom WHERE molecule_id = m.molecule_id AND element = 'cl'     ) THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS percentage FROM molecule m WHERE m.label = '+';	toxicology
SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7';	toxicology
SELECT COUNT(DISTINCT element)  FROM atom  WHERE atom_id IN (     SELECT atom_id FROM connected WHERE bond_id = 'TR001_3_4'     UNION     SELECT atom_id2 FROM connected WHERE bond_id = 'TR001_3_4' );	toxicology
SELECT b.bond_type  FROM connected c  JOIN bond b ON c.bond_id = b.bond_id  WHERE (c.atom_id = 'TR000_1' AND c.atom_id2 = 'TR000_2')     OR (c.atom_id = 'TR000_2' AND c.atom_id2 = 'TR000_1');	toxicology
SELECT * FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM atom WHERE atom_id = 'TR000_2') AND molecule_id IN (SELECT molecule_id FROM atom WHERE atom_id = 'TR000_4');	toxicology
SELECT element FROM atom WHERE atom_id = 'TR000_1';	toxicology
SELECT label FROM molecule WHERE molecule_id = 'TR000';	toxicology
SELECT      (SUM(CASE WHEN bond_type = '-' THEN 1 ELSE 0 END) / COUNT(bond_id)) * 100 AS percentage FROM      connected;	toxicology
SELECT COUNT(DISTINCT `molecule`.`molecule_id`) FROM `molecule` JOIN `atom` ON `molecule`.`molecule_id` = `atom`.`molecule_id` WHERE `atom`.`element` = 'n' AND `molecule`.`label` = '+';	toxicology
SELECT a.molecule_id  FROM atom a  JOIN connected c ON a.atom_id = c.atom_id  JOIN bond b ON c.bond_id = b.bond_id  WHERE a.element = 's' AND b.bond_type = '=';	toxicology
SELECT m.molecule_id  FROM molecule m JOIN (     SELECT molecule_id, COUNT(*) as atom_count      FROM atom      GROUP BY molecule_id      HAVING atom_count > 5 ) a ON m.molecule_id = a.molecule_id  WHERE m.label = '-';	toxicology
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.molecule_id = 'TR024' AND b.bond_type = '=';	toxicology
SELECT m.molecule_id, COUNT(a.atom_id) as atom_count    FROM molecule m    LEFT JOIN atom a ON m.molecule_id = a.molecule_id    WHERE m.label = '+'    GROUP BY m.molecule_id	toxicology
SELECT      (COUNT(DISTINCT m.molecule_id) /       (SELECT COUNT(DISTINCT m2.molecule_id)        FROM molecule m2        WHERE m2.label = '+')) * 100.0 AS percentage FROM      molecule m JOIN      atom a ON m.molecule_id = a.molecule_id AND a.element = 'h' JOIN      bond b ON m.molecule_id = b.molecule_id AND b.bond_type = '#' WHERE      m.label = '+';  SELECT COUNT(DISTINCT m1.molecule_id) / (COUNT(DISTINCT m2.molecule_id)) * 100.0 AS percentage FROM molecule m1, molecule m2 WHERE m1.label = '+' AND m2.label = '+' AND m1.molecule_id IN (SELECT a.molecule_aid FROM atom a WHERE a.element = 'h') AND m1.molecule_id IN (SELECT b.molecule_bid FROM bond b WHERE b.bond_type = '#');  SELECT COUNT(DISTINCT m.molecule_id) / (COUNT(DISTINCT m2.molecule_id)) * 100.0 AS percentage FROM molecule m, molecule m2 WHERE m.label = '+' AND m2.label = '+' AND m.molecule_id IN (SELECT a.molecule_aid FROM atom a WHERE a.element = 'h') AND m.molecule_id IN (SELECT b.molecule_bid FROM bond b WHERE b.bond_type = '#');  SELECT COUNT(DISTINCT m.molecule_id) / (COUNT(DISTINCT m2.molecule_id)) * 100.0 AS percentage FROM molecule m, molecule m2 WHERE m.label = '+' AND m2.label = '+' AND m.molecule_id IN (SELECT a.molecule_aid FROM atom a WHERE a.element = 'h') AND m.molecule_id IN (SELECT b.molecule_bid FROM bond b WHERE b.bond_type = '#');  SELECT COUNT(DISTINCT m.molecule_id) / (COUNT(DISTINCT m2.molecule_id)) * 100.0 AS percentage FROM molecule m, molecule m2 WHERE m.label = '+' AND m2.label = '+' AND m.molecule_id IN (SELECT a.molecule_aid FROM atom a WHERE a.element = 'h') AND m.molecule_id IN (SELECT b.molecule_bid FROM bond b WHERE b.bond_type = '#');  SELECT COUNT(DISTINCT m.molecule_id) / (COUNT(DISTINCT m2.molecule_id)) * 100.0 AS percentage FROM molecule m, molecule m2 WHERE m.label = '+' AND m2.label = '+' AND m.molecule_id IN (SELECT a.molecule_aid FROM atom a WHERE a.element = 'h') AND m.molecule_id IN (SELECT b.molecule_bid FROM bond b WHERE b.bond_type = '#');  SELECT COUNT(DISTINCT m.molecule_id) / (COUNT(DISTINCT m2.molecule_id)) * 100.0 AS percentage FROM molecule m, molecule m2 WHERE m.label = '+' AND m2.label = '+' AND m.molecule_id IN (SELECT a.molecule_aid FROM atom a WHERE a.element = 'h') AND m.molecule_id IN (SELECT b.molecule_bid FROM bond b WHERE b.bond_type = '#');  SELECT COUNT(DISTINCT m.molecule_id) / (COUNT(DISTINCT m2.molecule_id)) * 100.0 AS percentage FROM molecule m, molecule m2 WHERE m.label = '+' AND m2.label = '+' AND m.molecule_id IN (SELECT a.molecule_aid FROM atom a WHERE a.element = 'h') AND m.molecule_id IN (SELECT b.molecule_bid FROM bond b WHERE b.bond_type = '#');  SELECT COUNT(DISTINCT m.molecule_id) / (COUNT(DISTINCT m2.molecule_id)) * 100.0 AS percentage FROM molecule m, molecule m2 WHERE m.label = '+' AND m2.label = '+' AND m.molecule_id IN (SELECT a.molecule_aid FROM atom a WHERE a.element = 'h') AND m.molecule_id IN (SELECT b.molecule_bid FROM bond b WHERE b.bond_type = '#');  SELECT COUNT(DISTINCT m.molecule_id) / (COUNT(DISTINCT m2.molecule_id)) * 100.0 AS percentage FROM molecule m, molecule m2 WHERE m.label = '+' AND m2.label = '+' AND m.molecule_id IN (SELECT a.molecule_aid FROM atom a WHERE a.element = 'h') AND m.molecule_id IN (SELECT b.molecule_bid FROM bond b WHERE b.bond_type = '#');  SELECT COUNT(DISTINCT m.molecule_id) / (COUNT(DISTINCT m2.molecule_id)) * 100.0 AS percentage FROM molecule m, molecule m2 WHERE m.label = '+' AND m2.label = '+' AND m.molecule_id IN (SELECT a.molecule_aid FROM atom a WHERE a.element = 'h') AND m.molecule_id IN (SELECT b.molecule_bid FROM bond b WHERE b.bond_type = '#');  SELECT COUNT(DISTINCT m.molecule_id) / (COUNT(DISTINCT m2.molecule_id)) * 100.0 AS percentage FROM molecule m, molecule m2 WHERE m.label = '+' AND m2.label = '+' AND m.molecule_id IN (SELECT a.molecule_aid FROM atom a WHERE a.element = 'h') AND m.molecule_id IN (SELECT b.molecule_bid FROM bond b WHERE b.bond_type = '#');  SELECT COUNT(DISTINCT m.molecule_id) / (COUNT(DISTINCT m2.molecule_id)) * 100.0 AS percentage FROM molecule m, molecule m2 WHERE m.label = '+' AND m2.label = '+' AND m.molecule_id IN (SELECT a.molecule_aid FROM atom a WHERE a.element = 'h') AND m.molecule_id IN (SELECT b.molecule_bid FROM bond b WHERE b.bond_type = '#');  SELECT COUNT(DISTINCT m.molecule_id) / (COUNT(DISTINCT m2.molecule_id)) * 100.0 AS percentage FROM molecule m, molecule m2 WHERE m.label = '+' AND m2.label = '+' AND m.molecule_id IN (SELECT a.molecule_aid FROM atom a WHERE a.element = 'h') AND m.molecule_id IN (SELECT b.molecule_bid FROM bond b WHERE b.bond_type = '#');  SELECT COUNT(DISTINCT m.molecule_id) / (COUNT(DISTINCT m2.molecule_id)) * 100.0 AS percentage FROM molecule m, molecule m2 WHERE m.label = '+' AND m2.label = '+' AND m.molecule_id IN (SELECT a.molecule_aid FROM atom a WHERE a.element = 'h') AND m.molecule_id IN (SELECT b.molecule_bid FROM bond b WHERE b.bond_type = '#');  SELECT COUNT(DISTINCT m.molecule_id) / (COUNT(DISTINCT m2.molecule_id)) * 100.0 AS percentage FROM molecule m, molecule m2 WHERE m.label = '+' AND m2.label = '+' AND m.molecule_id IN (SELECT a.molecule_aid FROM atom a WHERE a.element = 'h') AND m.molecule_id IN (SELECT b.molecule_bid FROM bond b WHERE b.bond_type = '#');  SELECT COUNT(DISTINCT m.molecule_id) / (COUNT(DISTINCT m2.molecule_id)) * 100.0 AS percentage FROM molecule m, molecule m2 WHERE m.label = '+' AND m2.label = '+' AND m.molecule_id IN (SELECT a.molecule_aid FROM atom a WHERE a.element = 'h') AND m.molecule_id IN (SELECT b.molecule_bid FROM bond b WHERE b.bond_type = '#');  SELECT COUNT(DISTINCT m.molecule_id) / (COUNT(DISTINCT m2.molecule_id)) * 100.0 AS percentage FROM molecule m, molecule m2 WHERE m.label = '+' AND m2.label = '+' AND m.molecule_id IN (SELECT a.molecule_aid FROM atom a WHERE a.element = 'h') AND m.molecule_id IN (SELECT b.molecule_bid FROM bond b WHERE b.bond_type = '#');  SELECT COUNT(DISTINCT m.molecule_id) / (COUNT(DISTINCT m2.molecule_id)) * 100.0 AS percentage FROM molecule m, molecule m2 WHERE m.label = '+' AND m2.label = '+' AND m.molecule_id IN (SELECT a.molecule_aid FROM atom a WHERE a.element = 'h') AND m.molecule_id IN (SELECT b.molecule_bid FROM bond b WHERE b.bond_type = '#');  SELECT COUNT(DISTINCT m.molecule_id) / (COUNT(DISTINCT m2.molecule_id)) * 100.0 AS percentage FROM molecule m, molecule m2 WHERE m.label = '+' AND m2.label = '+' AND m.molecule_id IN (SELECT a.molecule_aid FROM atom a WHERE a.element = 'h') AND m.molecule_id IN (SELECT b.molecule_bid FROM bond b WHERE b.bond_type = '#');  SELECT COUNT(DISTINCT m.molecule_id) / (COUNT(DISTINCT m2.molecule_id)) * 100.0 AS percentage FROM molecule m, molecule m2 WHERE m.label = '+' AND m2.label = '+' AND m.molecule_id IN (SELECT a.molecule_aid FROM atom a WHERE a.element = 'h') AND m.molecule_id IN (SELECT b.molecule_bid FROM bond b WHERE b.bond_type = '#');  SELECT COUNT(DISTINCT m.molecule_id) / (COUNT(DISTINCT m2.molecule_id)) * 100.0 AS percentage FROM molecule m, molecule m2 WHERE m.label = '+' AND m2.label = '+' AND m.molecule_id IN (SELECT a.molecule_aid FROM atom a WHERE a.element = 'h') AND m.molecule_id IN (SELECT b.molecule_bid FROM bond b WHERE b.bond_type = '#');  SELECT COUNT(DISTINCT m.molecule_id) / (COUNT(DISTINCT m2.molecule_id)) * 100.0 AS percentage FROM molecule m, molecule m2 WHERE m.label = '+' AND m2.label = '+' AND m.molecule_id IN (SELECT a.molecule_aid FROM atom a WHERE a.element = 'h') AND m.molecule_id IN (SELECT b.molecule_bid FROM bond b WHERE b.bond_type = '#');  SELECT COUNT(DISTINCT m.molecule_id) / (COUNT(DISTINCT m2.molecule_id)) * 100.0 AS percentage FROM molecule m, molecule m2 WHERE m.label = '+' AND m2.label = '+' AND m.molecule_id IN (SELECT a.molecule_aid FROM atom a WHERE a.element = 'h') AND m.molecule_id IN (SELECT b.molecule_bid FROM bond b WHERE b.bond_type = '#');  SELECT COUNT(DISTINCT m.molecule_id) / (COUNT(DISTINCT m2.molecule_id)) * 100.0 AS percentage FROM molecule m, molecule m2 WHERE m.label = '+' AND m2.label = '+' AND m.molecule_id IN (SELECT a.molecule_aid FROM atom a WHERE a.element = 'h') AND m.molecule_id IN (SELECT b.molecule_bid FROM bond b WHERE b.bond_type = '#');  SELECT COUNT(DISTINCT m.molecule_id) / (COUNT(DISTINCT m2.molecule_id)) * 100.0 AS percentage FROM molecule m, molecule m2 WHERE m.label = '+' AND m2.label = '+' AND m.molecule_id IN (SELECT a.molecule_aid FROM atom a WHERE a.element = 'h') AND m.molecule_id IN (SELECT b.molecule_bid FROM bond b WHERE b.bond_type = '#');  SELECT COUNT(DISTINCT m.molecule_id) / (COUNT(DISTINCT m2.molecule_id)) * 100.0 AS percentage FROM molecule m, molecule m2 WHERE m.label = '+' AND m2.label = '+' AND m.molecule_id IN (SELECT a.molecule_aid FROM atom a WHERE a.element = 'h') AND m.molecule_id IN (SELECT b.molecule_bid FROM bond b WHERE b.bond_type = '#');  SELECT COUNT(DISTINCT m.molecule_id) / (COUNT(DISTINCT m2.molecule_id)) * 100.0 AS percentage FROM molecule m, molecule m2 WHERE m.label = '+' AND m2.label = '+' AND m.molecule_id IN (SELECT a.molecule_aid FROM atom a WHERE a.element = 'h') AND m.molecule_id IN (SELECT b.molecule_bid FROM bond b WHERE b.bond_type = '#');  SELECT COUNT(DISTINCT m.molecule_id) / (COUNT(DISTINCT m2.molecule_id)) * 100.0 AS percentage FROM molecule m, molecule m2 WHERE m.label = '+' AND m2.label = '+' AND m.molecule_id IN (SELECT a.molecule_aid FROM atom a WHERE a.element = 'h') AND m.molecule_id IN (SELECT b.molecule_bid FROM bond b WHERE b.bond_type = '#');	toxicology
SELECT COUNT(*) FROM molecule WHERE label = '+';	toxicology
SELECT COUNT(DISTINCT bond.molecule_id) FROM bond WHERE bond.bond_type = '-' AND bond.molecule_id BETWEEN 'TR004' AND 'TR010';	toxicology
SELECT COUNT(*)  FROM atom  JOIN molecule ON atom.molecule_id = molecule.molecule_id  WHERE molecule.molecule_id = 'TR008' AND atom.element = 'c';	toxicology
SELECT element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom_id = 'TR004_7' AND label = '-';	toxicology
SELECT COUNT(DISTINCT a.molecule_id) AS total_molecules FROM connected c JOIN bond b ON c.bond_id = b.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id LEFT JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_type = '=' AND (a1.element = 'o' OR a2.element = 'o');	toxicology
SELECT COUNT(*)  FROM molecule  WHERE label = '-'  AND molecule_id IN (     SELECT DISTINCT molecule_id      FROM bond      WHERE bond_type = '#' );	toxicology
SELECT element FROM atom WHERE molecule_id = 'TR002' UNION ALL SELECT bond_type FROM bond WHERE molecule_id = 'TR002';	toxicology
SELECT `atom`.`atom_id` FROM `atom` JOIN `connected` ON `atom`.`atom_id` = `connected`.`atom_1` WHERE `atom`.`element` = 'c' AND `connected`.`bond_id` IN (SELECT `bond`.`bond_id` FROM `bond` WHERE `bond`.`molecule_id` = 'TR012' AND `bond`.`bond_type` = '=');	toxicology
SELECT atom_id FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+') AND element = 'o';	toxicology
SELECT * FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;	card_games
SELECT * FROM cards WHERE borderColor IS NOT NULL AND (cardKingdomFoilId IS NULL OR cardKingdomId IS NULL);	card_games
SELECT name FROM cards WHERE faceConvertedManaCost > convertedManaCost AND faceConvertedManaCost IS NOT NULL;	card_games
SELECT name FROM cards WHERE frameVersion = '2015' AND edhrec_rank < 100;	card_games
SELECT c.*  FROM cards c  JOIN legalities l ON c.uuid = l.uuid  WHERE l.format = 'gladiator' AND l.status = 'Banned' AND c.rarity = 'mythic';	card_games
SELECT l.uuid, l.status FROM legalities l JOIN cards c ON l.uuid = c.uuid WHERE c.type = 'Artifact' AND c.side IS NULL AND l.format = 'vintage';	card_games
SELECT c.id AS card_id, c.artist  FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE (c.power = '*' OR c.power IS NULL) AND l.format = 'commander' AND l.status = 'Legal';	card_games
SELECT      c.card_id,     c.name,     r.text AS ruling_text,     CASE WHEN c.hasContentWarning = 1 THEN 'Missing or degraded properties' ELSE 'Properties are intact' END AS property_status FROM      cards c JOIN      rulings r ON c.uuid = r.uuid WHERE      c.artist = 'Stephen Daniel';	card_games
SELECT rulings.text FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.name = 'Sublime Epiphany' AND cards.number = '74s';	card_games
SELECT c.name AS card_name, c.artist, COUNT(r.id) AS ruling_count, c.isPromo FROM cards c JOIN rulings r ON c.uuid = r.uuid GROUP BY c.uuid, c.name, c.artist ORDER BY ruling_count DESC LIMIT 1;	card_games
SELECT st.language FROM set_translations st WHERE st.setCode = (     SELECT c.set_code     FROM cards c     WHERE c.name = 'Annul' AND c.number = '29' );	card_games
SELECT c.name  FROM cards c WHERE EXISTS (     SELECT 1      FROM set_translations st      WHERE st.setCode = c.code AND st.language = 'Japanese' );	card_games
SELECT      (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards)) AS chinese_simplified_percentage FROM      cards c WHERE      EXISTS (         SELECT 1          FROM set_translations st          WHERE st.language = 'Chinese Simplified' AND st.setCode = c.setCode     );	card_games
SELECT s.name, s.totalSetSize FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Italian' GROUP BY st.setCode;	card_games
SELECT COUNT(DISTINCT type) FROM cards WHERE artist = 'Aaron Boyd';	card_games
SELECT keywords FROM cards WHERE name = "Angel of Mercy";	card_games
SELECT COUNT(*) FROM cards WHERE power = '*';	card_games
SELECT promoTypes FROM cards WHERE name = 'Duress';	card_games
SELECT borderColor FROM cards WHERE name = 'Ancestor''s Chosen';	card_games
SELECT originalType AS type FROM cards WHERE name = 'Ancestor''s Chosen';	card_games
SELECT DISTINCT st.language FROM set_translations st WHERE st.setCode IN (     SELECT c.setCode     FROM cards c     WHERE c.name = 'Angel of Mercy' );	card_games
SELECT COUNT(*)  FROM cards  INNER JOIN legalities ON cards.uuid = legalities.uuid  WHERE legalities.status = 'restricted' AND cards.isTextless = 0;	card_games
SELECT r.text FROM rulings AS r  JOIN cards AS c ON r.uuid = c.uuid  WHERE c.name = 'Condemn';	card_games
SELECT COUNT(DISTINCT c.uuid) AS count FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.status = 'restricted' AND c.isStarter = 1;	card_games
SELECT l.status  FROM legalities l  JOIN cards c ON l.uuid = c.uuid  WHERE c.name = 'Cloudchaser Eagle';	card_games
SELECT type FROM cards WHERE name = 'Benalish Knight';	card_games
SELECT l.format, l.status  FROM legalities l  JOIN cards c ON l.uuid = c.uuid  WHERE c.name = "Benalish Knight";	card_games
SELECT DISTINCT ca.artist_name  FROM cards c  JOIN card_artists ca ON c.uuid = ca.uuid  WHERE c.language = 'Phyrexian';	card_games
SELECT ROUND((COUNT(*) FILTER (WHERE borderColor = 'borderless') / COUNT(*)) * 100, 2) AS borderless_percentage FROM cards;	card_games
SELECT COUNT(*) AS reprinted_german_cards FROM (     SELECT st.setCode      FROM set_translations st      WHERE st.language = 'German' ) german_sets JOIN sets s ON german_sets.setCode = s.code JOIN cards c ON c.set_code = s.code WHERE c.isReprint = 1;	card_games
SELECT COUNT(*) FROM cards  INNER JOIN foreign_parts ON cards.uuid = foreign_parts.cardUuid  WHERE cards.borderColor = 'borderless' AND foreign_parts.illustrationLanguage = 'Russian';	card_games
SELECT      ( (SELECT COUNT(*) FROM cards WHERE language = 'French' AND isStorySpotlight = 1) /        (SELECT COUNT(*) FROM cards WHERE isStorySpotlight = 1) ) * 100 AS percentage;	card_games
SELECT COUNT(*) FROM cards WHERE toughness = 99;	card_games
SELECT name FROM cards WHERE artist = 'Aaron Boyd';	card_games
SELECT COUNT(DISTINCT c.uuid) AS count FROM cards c JOIN card_sets cs ON c.uuid = cs.card_uuid JOIN sets s ON cs.set_code = s.code WHERE c.borderColor = 'black' AND s.mtgoCode IS NOT NULL AND NOT EXISTS (     SELECT 1     FROM card_sets cs2     JOIN sets s2 ON cs2.set_code = s2.code     WHERE cs2.card_uuid = c.uuid     AND s2.mtgoCode IS NULL );	card_games
SELECT id FROM cards WHERE convertedManaCost = 0;	card_games
SELECT layout FROM cards WHERE keywords LIKE '%flying%';	card_games
SELECT COUNT(*) AS card_count  FROM cards  WHERE original_type = 'Summon - Angel' AND subtype != 'Angel';	card_games
SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;	card_games
SELECT id FROM cards WHERE duelDeck = 'a';	card_games
SELECT edhrecRank FROM cards WHERE frameVersion = '2015';	card_games
SELECT DISTINCT c.artist FROM cards c JOIN sets s ON c.setCode = s.setCode JOIN set_translations st ON s.setCode = st.setCode WHERE st.language = 'Chinese Simplified';	card_games
SELECT c.*  FROM cards c  JOIN foreign_parts f ON c.uuid = f.card_uuid  WHERE f.availability = 'paper' AND f.language = 'Japanese' GROUP BY c.uuid HAVING COUNT(f.id) = 1;	card_games
SELECT COUNT(DISTINCT c.uuid) AS banned_white_border_cards_count  FROM cards c  JOIN legalities l ON c.uuid = l.uuid  WHERE l.status = 'Banned' AND c.borderColor = 'white';	card_games
SELECT l.uuid, f.language  FROM legalities l  JOIN foreign_data f ON l.uuid = f.uuid  WHERE l.format = 'legacy';	card_games
SELECT rulings.text  FROM rulings  JOIN cards ON rulings.uuid = cards.uuid  WHERE cards.name = 'Beacon of Immortality';	card_games
SELECT COUNT(*) AS total_cards  FROM cards  INNER JOIN legalities ON cards.uuid = legalities.uuid  WHERE cards.frameVersion = 'future' AND legalities.status = 'Legal';	card_games
SELECT c.name AS card_name, c.colors AS color FROM cards c WHERE c.setCode = 'OGW';	card_games
SELECT c.name AS CardName, st.language FROM cards c JOIN sets s ON c.code = s.code JOIN set_translations st ON s.code = st.setCode WHERE s.code = '10E'   AND c.convertedManaCost = 5;	card_games
SELECT c.name, r.date  FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.originalType = 'Creature - Elf';	card_games
SELECT c.id, c.colors, GROUP_CONCAT(l.status SEPARATOR ', ') AS formats FROM cards c LEFT JOIN legalities l ON c.uuid = l.uuid WHERE c.id BETWEEN 1 AND 20 GROUP BY c.id;	card_games
SELECT c.uuid FROM cards c JOIN foreign_data f ON c.uuid = f.card_uuid WHERE c.originalType = 'Artifact' AND c.colors LIKE '%B%';	card_games
SELECT name FROM cards JOIN rulings ON cards.uuid = rulings.uuid WHERE rarity = 'uncommon' ORDER BY date ASC LIMIT 3;	card_games
SELECT COUNT(*) FROM cards WHERE artist = 'John Avon' AND (cardKingdomId IS NULL OR cardKingdomFoilId IS NULL) ORDER BY id;	card_games
SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId IS NOT NULL;	card_games
SELECT COUNT(*) AS count_udon_mtgo_cards FROM cards c JOIN sets s ON c.set_code = s.set_code WHERE c.hand = -1 AND s.mtgo_code IS NOT NULL;	card_games
SELECT COUNT(*)  FROM cards  WHERE frameVersion = '1993'  AND hasContentWarning = 1;	card_games
SELECT manaCost  FROM cards  WHERE layout = 'normal'  AND frameVersion = 2003  AND borderColor = 'black'  AND availability LIKE '%paper%'  AND availability LIKE '%mtgo%';	card_games
SELECT SUM(manaCost) AS total_unconverted_mana FROM cards WHERE artist = 'Rob Alexander';	card_games
SELECT DISTINCT      c.subtypes AS type,     c.supertypes AS supertype FROM      cards c JOIN      legalities l ON c.uuid = l.uuid WHERE      l.format = 'arena' AND l.status = 'Legal' ORDER BY      type, supertype;	card_games
SELECT DISTINCT setCode FROM set_translations WHERE language = 'Spanish';	card_games
SELECT (COUNT(CASE WHEN isOnlineOnly = 1 AND frameEffects = 'legendary' THEN 1 END) / COUNT(frameEffects)) * 100 AS percentage FROM cards WHERE frameEffects = 'legendary';	card_games
WITH story_spotlight_counts AS (     SELECT          COUNT(*) FILTER (WHERE isStorySpotlight = 1 AND isTextless = 0) as story_spotlight_without_text,         COUNT(*) FILTER (WHERE isStorySpotlight = 1) as total_story_spotlight     FROM cards ) SELECT      id,      (story_spotlight_counts.story_spotlight_without_text * 1.0 / story_spotlight_counts.total_story_spotlight) * 100 AS percentage FROM      story_spotlight_counts,     cards WHERE      isStorySpotlight = 1 AND isTextless = 0;	card_games
SELECT      (COUNT(c.id) * 100 / (SELECT COUNT(*) FROM cards)) AS percentage,     c.name FROM      cards c JOIN      sets s ON c.set_id = s.id WHERE      EXISTS (         SELECT 1          FROM set_translations st          WHERE st.set_id = s.id AND st.language = 'Spanish'     ) GROUP BY      c.name;	card_games
SELECT st.language, st.translation FROM set_Translations st JOIN sets s ON st.setCode = s.code WHERE s.baseSetSize = 309;	card_games
SELECT COUNT(DISTINCT st.id) AS brazilian_portuguese_commander_sets  FROM set_translations st  JOIN sets s ON st.setCode = s.code  WHERE s.block = 'Commander' AND st.language = 'Portuguese (Brasil)';	card_games
SELECT c.id FROM cards c  JOIN legalities l ON c.uuid = l.uuid  WHERE c.types LIKE '%Creature%' AND l.status = 'Legal'  GROUP BY c.id;	card_games
SELECT DISTINCT subtype, supertype FROM cards WHERE subtype IS NOT NULL AND supertype IS NOT NULL;	card_games
SELECT COUNT(*) FROM cards WHERE (power IS NULL OR power = '*') AND text LIKE '%triggered ability%';	card_games
SELECT COUNT(*) AS Count  FROM cards c  JOIN legalities l ON c.uuid = l.uuid  WHERE l.format = 'premodern' AND l.status = 'Legal'  AND EXISTS (     SELECT 1      FROM rulings r      WHERE r.uuid = c.uuid      AND r.text = 'This is a triggered mana ability.' )  AND c.side IS NULL;	card_games
SELECT c.id AS card_id FROM cards c JOIN legalities l ON c.uuid = l.card_uuid WHERE c.artist = 'Erica Yang' AND l.format = 'Pauper' AND l.status = 'Legal';	card_games
SELECT artist FROM cards WHERE text = "Das perfekte Gegenmittel zu einer dichten Formation";	card_games
SELECT fn.name AS french_name FROM cards c JOIN foreign_names fn ON c.uuid = fn.uuid WHERE c.type = 'Creature'   AND c.layout = 'normal'   AND c.border_color = 'black'   AND c.artist = 'Matthew D. Wilson'   AND fn.language = 'French';	card_games
SELECT COUNT(DISTINCT c.uuid) FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.rarity = 'rare' AND r.date = '2007-02-01';	card_games
SELECT st.language FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.baseSetSize = 180 AND s.block = 'Ravnica';	card_games
SELECT (COUNT(c.hasContentWarning = 0) / COUNT(l.id)) * 100 AS percentage  FROM legalities l  JOIN cards c ON l.uuid = c.uuid  WHERE l.format = 'commander' AND l.status = 'Legal';	card_games
SELECT      (COUNT(*) * 100.0 /       (SELECT COUNT(*) FROM cards WHERE power IS NULL OR power = '')) AS french_powerless_percentage FROM      cards c WHERE      (c.power IS NULL OR c.power = '')     AND EXISTS (         SELECT 1         FROM sets s         JOIN set_translations st ON s.id = st.set_id         WHERE c.set_id = s.id AND st.language = 'French'     );	card_games
WITH japanese_translations AS (     SELECT COUNT(DISTINCT `setCode`) as total_japanese_sets      FROM `set_translations`      WHERE `language` = 'Japanese' ), expansion_japanese AS (     SELECT COUNT(DISTINCT `st`.`setCode`) as expansion_count      FROM `set_translations` AS `st`     JOIN `sets` AS `s` ON `st`.`setCode` = `s`.`code`     WHERE `st`.`language` = 'Japanese' AND `s`.`type` = 'expansion' ) SELECT (expansion_count / total_japanese_sets) * 100 as percentage FROM japanese_translations, expansion_japanese;	card_games
SELECT s.code AS set_code, s.name AS set_name,         s.isFoilOnly, s.isNonFoilOnly, s.isForeignOnly FROM cards c JOIN sets s ON c.setCode = s.code WHERE c.artist = 'Daren Bader';	card_games
SELECT COUNT(*) FROM cards  WHERE borderColor = 'borderless'  AND edhrecRank > 12000  AND (colorIdentity IS NOT NULL AND colorIdentity != '');	card_games
SELECT COUNT(*) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1;	card_games
SELECT name FROM cards WHERE (power IS NULL OR power = '*') AND promoTypes = 'arenaleague' ORDER BY name ASC LIMIT 3;	card_games
SELECT language FROM cards WHERE multiverseid = 149934;	card_games
SELECT cardKingdomFoilId, cardKingdomId  FROM cards  WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL  ORDER BY cardKingdomFoilId ASC  LIMIT 3;	card_games
SELECT      (COUNT(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 END) / COUNT(CASE WHEN isTextless = 1 THEN 1 END)) * 100 AS proportion FROM cards;	card_games
SELECT cardNumber  FROM cards  WHERE side IS NULL  AND subtypes LIKE '%Angel%'  AND subtypes LIKE '%Wizard%';	card_games
SELECT code, name FROM sets WHERE mtgoCode IS NULL OR mtgoCode = '' ORDER BY name ASC LIMIT 3;	card_games
SELECT DISTINCT t.language  FROM sets s  JOIN set_translations t ON s.code = t.setCode  WHERE s.mcmName = 'Archenemy' AND s.code = 'ARC';	card_games
SELECT sets.name AS setName, set_translations.translation  FROM sets  JOIN set_translations ON sets.code = set_translations.setCode  WHERE sets.id = 5;	card_games
SELECT s.type AS expansion_type, st.language  FROM sets s  JOIN set_translations st ON s.code = st.setCode  WHERE s.id = 206;	card_games
SELECT s.id AS setId, t.translation AS setName FROM sets s JOIN set_translations t ON s.code = t.setCode WHERE s.block = 'Shadowmoor' AND t.language = 'Italian' GROUP BY s.id, t<translation> ORDER BY t<translation> ASC LIMIT 2;	card_games
SELECT s.code, s.name FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.isForeignOnly = 0 AND s.isFoilOnly = 1 AND st.language = 'Japanese';	card_games
SELECT MAX(baseSetSize) AS max_base_set_size FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Russian';	card_games
WITH total_cards AS (     SELECT COUNT(DISTINCT uuid) as total FROM legalities ), filtered_cards AS (     SELECT          COUNT(DISTINCT l.uuid) as count     FROM          legalities l     JOIN          sets s ON l.setCode = s.code     JOIN          set_translations st ON s.code = st.set_code     WHERE          l.isOnlineOnly = 1 AND st.language = 'Chinese Simplified' ) SELECT      (filtered_cards.count * 100.0 / total_cards.total) AS percentage FROM      filtered_cards, total_cards;	card_games
SELECT COUNT(DISTINCT s.code) FROM sets s  JOIN set_translations st ON s.code = st.setCode  WHERE st.language = 'Japanese' AND (s.mtgoCode IS NULL OR s.mtgoCode = '');	card_games
SELECT COUNT(*) FROM cards WHERE borderColor = 'black';	card_games
SELECT COUNT(uuid) AS cnt FROM cards WHERE frameEffects = 'extendedart';	card_games
SELECT name, uuid FROM cards WHERE borderColor = 'black' AND isFullArt = 1;	card_games
SELECT st.language  FROM sets s  JOIN set_translations st ON s.code = st.setCode  WHERE s.id = '174';	card_games
SELECT name FROM sets WHERE code = "ALL";	card_games
SELECT      name,      JSON_EXTRACT(foreign_translations, '$.language') AS language,     JSON_EXTRACT(foreign_translations, '$.name') AS translated_name FROM      cards WHERE      name = 'A Pedra Fellwar';	card_games
SELECT code FROM sets WHERE releaseDate = '2007-07-13';	card_games
SELECT baseSetSize, code FROM sets WHERE block IN ('Masques', 'Mirage');	card_games
SELECT code FROM sets WHERE type = 'expansion';	card_games
SELECT c.type, f.name AS foreign_name FROM cards c JOIN foreign_translations f ON c.uuid = f.uuid WHERE c.watermark = 'Boros';	card_games
SELECT      flavor_text,     types FROM      cards WHERE      watermark = 'colorpie';	card_games
SELECT      (COUNT(CASE WHEN convertedManaCost = 10 THEN 1 END) / COUNT(*)) * 100 AS percentage FROM cards WHERE name = 'Abyssal Horror';	card_games
SELECT code FROM sets WHERE type = 'commander';	card_games
SELECT name AS foreign_name, type_line FROM cards WHERE watermark = 'abzan';	card_games
SELECT st.language, c.type FROM cards c JOIN set_translations st ON c.setCode = st.setCode WHERE c.watermark = 'Azorius';	card_games
SELECT COUNT(*) FROM cards WHERE artist = 'Aaron Miller' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;	card_games
SELECT COUNT(*) FROM cards WHERE availability LIKE '%paper%' AND hand = '3';	card_games
SELECT name FROM cards WHERE isTextless = 0;	card_games
SELECT manaCost FROM cards WHERE name = 'Ancestor\'s Chosen';	card_games
SELECT COUNT(*)  FROM cards  WHERE border_color = 'white'    AND (power = '*' OR power IS NULL);	card_games
SELECT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL;	card_games
SELECT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer';	card_games
WITH idx AS (     SELECT 0 AS i UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3      UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7      UNION ALL SELECT 8 UNION ALL SELECT 9 UNION ALL SELECT 10 UNION ALL SELECT 11      UNION ALL SELECT 12 UNION ALL SELECT 13 UNION ALL SELECT 14 UNION ALL SELECT 15      UNION ALL SELECT 16 UNION ALL SELECT 17 UNION ALL SELECT 18 UNION ALL SELECT 19 ) SELECT DISTINCT json_extract(purchaseUrls, '$[i]') AS website FROM cards, idx WHERE promoTypes = 'bundle' AND i < json_array_length(purchaseUrls);	card_games
SELECT COUNT(DISTINCT a.uuid) AS artist_count FROM cards c JOIN card_artist ca ON c.uuid = ca.cardUuid JOIN artists a ON ca.artistUuid = a.uuid WHERE c.borderColor = 'black' AND c.uuid IN (     SELECT uuid FROM printings WHERE type = 'arena'     INTERSECT     SELECT uuid FROM printings WHERE type = 'mtgo' );	card_games
SELECT name, convertedManaCost FROM cards WHERE name = 'Serra Angel' OR name = 'Shrine Keeper';	card_games
SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer';	card_games
SELECT name FROM cards WHERE frameVersion = '2003' ORDER BY convertedManaCost DESC LIMIT 3;	card_games
SELECT st.translation  FROM set_translations st  WHERE st.language = 'Italian'  AND st.setCode IN (     SELECT c.set_code      FROM cards c      WHERE c.name = "Ancestor's Chosen" );	card_games
SELECT COUNT(*)  FROM set_translations  WHERE setCode = (     SELECT code      FROM sets      WHERE id = (         SELECT setId          FROM cards          WHERE name = 'Angel of Mercy'     ) );	card_games
SELECT DISTINCT c.name FROM cards c  INNER JOIN set_translations st ON c.setCode = st.setCode  WHERE st.translation = 'Hauptset Zehnte Edition';	card_games
SELECT c.uuid, f.language FROM cards c WHERE c.name = 'Ancestor''s Chosen' AND EXISTS (     SELECT 1      FROM foreign_translations ft      WHERE ft.cardUuid = c.uuid      AND ft.language = 'Korean' );	card_games
SELECT COUNT(*)  FROM cards  WHERE artist = 'Adam Rex' AND        set = (SELECT setCode               FROM set_translations               WHERE translation = 'Hauptset Zehnte Edition');	card_games
SELECT baseSetSize FROM sets WHERE code = (SELECT setCode FROM set_translations WHERE translation = 'Hauptset Zehnte Edition' LIMIT 1);	card_games
SELECT st.translation  FROM set_translations st  INNER JOIN sets s ON st.setCode = s.code  WHERE s.name = 'Eighth Edition' AND st.language = 'Chinese Simplified';	card_games
SELECT * FROM cards WHERE name = 'Angel of Mercy' AND mtgoCode IS NOT NULL;	card_games
SELECT releaseDate FROM sets WHERE name = 'Ancestor''s Chosen';	card_games
SELECT type FROM sets WHERE code = (SELECT setCode FROM set_translations WHERE translation = 'Hauptset Zehnte Edition');	card_games
SELECT COUNT(*)  FROM sets  JOIN set_translations ON sets.code = set_translations.setCode  WHERE sets.block = 'Ice Age'  AND set_translations.language = 'Italian'  AND set_translations.translation IS NOT NULL;	card_games
SELECT COUNT(*) AS non_foreign_count FROM cards c JOIN sets s ON c.setCode = s.code WHERE c.name = 'Adarkar Valkyrie' AND s.isForeignOnly != 1;	card_games
SELECT COUNT(DISTINCT s.id)  FROM sets s  JOIN set_translations st ON s.code = st.setCode  WHERE st.language = 'Italian' AND st.translation IS NOT NULL AND s.baseSetSize < 10;	card_games
SELECT COUNT(*) FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Coldsnap' AND cards.borderColor = 'black';	card_games
SELECT c.name  FROM cards c JOIN sets s ON c.set_code = s.code WHERE s.name = 'Coldsnap' AND c.converted_mana_cost = (     SELECT MAX(c2.converted_mana_cost)      FROM cards c2      JOIN sets s2 ON c2.set_code = s2.code      WHERE s2.name = 'Coldsnap' );	card_games
SELECT DISTINCT c.artist FROM cards c WHERE c.set_name = 'Coldsnap' AND c.artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy');	card_games
SELECT c.name  FROM cards c JOIN sets s ON c.set_id = s.id WHERE s.name = 'Coldsnap' AND c.number = 4;	card_games
SELECT COUNT(*)  FROM cards c  JOIN sets s ON c.setCode = s.code  WHERE s.name = 'Coldsnap'  AND c.convertedManaCost > 5  AND (c.power = '*' OR c.power IS NULL);	card_games
SELECT flavorText FROM cards WHERE name = "Ancestor's Chosen";	card_games
SELECT DISTINCT uuid FROM cards WHERE name = 'Ancestor''s Chosen' AND flavorText IS NOT NULL;	card_games
SELECT `type` FROM cards WHERE name = 'Ancestor''s Chosen';	card_games
WITH coldsnap_set AS (     SELECT code      FROM sets      WHERE name = 'Coldsnap' ) SELECT r.text FROM rulings r JOIN cards c ON c.uuid = r.card_id WHERE c.set_code IN (SELECT code FROM coldsnap_set);	card_games
SELECT c.name, c.convertedManaCost FROM cards AS c JOIN sets AS s ON c.set_id = s.id WHERE s.setCode = 'CLN' AND c.convertedManaCost = (     SELECT MAX(convertedManaCost)     FROM cards     WHERE set_id = (SELECT id FROM sets WHERE setCode = 'CLN') );	card_games
SELECT r.date  FROM rulings r  JOIN cards c ON r.uuid = c.uuid  WHERE c.name = 'Reminisce';	card_games
SELECT      (COUNT(CASE WHEN convertedManaCost = 7 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM cards WHERE setName = 'Coldsnap';	card_games
SELECT      (COUNT(CASE WHEN c.cardKingdomFoilId IS NOT NULL AND c.cardKingdomId IS NOT NULL THEN 1 END) / COUNT(*)) * 100 AS percentage_incredibly_powerful FROM      cards c JOIN      sets s ON c.setCode = s.code WHERE      s.name = 'Coldsnap';	card_games
SELECT code FROM sets WHERE releaseDate = '2017-07-14';	card_games
SELECT keyruneCode FROM sets WHERE code = 'PKHC';	card_games
SELECT mcmId FROM sets WHERE code = 'SS2';	card_games
SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09';	card_games
SELECT type FROM sets WHERE name = "From the Vault: Lore";	card_games
SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized';	card_games
SELECT c.name, c.artist, r.text AS ruling_text,         CASE WHEN c.hasContentWarning = 1 THEN 'Yes' ELSE 'No' END AS missing_or_degraded_properties FROM cards c INNER JOIN rulings r ON c.uuid = r.uuid WHERE c.artist = 'Jim Pavelec';	card_games
SELECT s.releaseDate FROM sets s JOIN cards c ON s.code = c.setCode WHERE c.name = 'Evacuation';	card_games
SELECT s.baseSetSize FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.translation = 'Rinascita di Alara';	card_games
SELECT s.type  FROM sets s  WHERE EXISTS (     SELECT 1      FROM set_translations t      WHERE t.setCode = s.code AND t.translation = 'Huitième édition' );	card_games
SELECT st.set_translation  FROM cards c  JOIN sets s ON c.set_code = s.code  JOIN set_translations st ON s.code = st.set_code  WHERE c.name = 'Tendo Ice Bridge' AND st.language = 'French';	card_games
SELECT COUNT(*)  FROM set_Translations  WHERE setCode = (SELECT code FROM sets WHERE name = 'Tenth Edition')  AND translation IS NOT NULL;	card_games
SELECT st.translation  FROM set_translations st  JOIN (     SELECT c.set_code      FROM cards c      WHERE c.name = 'Fellwar Stone' ) AS sc ON st.setCode = sc.set_code  WHERE st.language = 'Japanese';	card_games
WITH SetCards AS (     SELECT c.name, c.cmc     FROM cards c     JOIN sets s ON c.setCode = s.code     WHERE s.name = 'Journey into Nyx Hero''s Path' ) SELECT name FROM SetCards WHERE cmc = (SELECT MAX(cmc) FROM SetCards);	card_games
SELECT s.releaseDate FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.translation = 'Ola de frío';	card_games
SELECT s.type  FROM cards c JOIN sets s ON c.set_code = s.code WHERE c.name = 'Samite Pilgrim';	card_games
SELECT COUNT(*)  FROM cards  WHERE setName = 'World Championship Decks 2004'  AND convertedManaCost = 3;	card_games
SELECT translation  FROM set_translations  WHERE language = 'Chinese Simplified'  AND setCode = (SELECT code FROM sets WHERE name = 'Mirrodin');	card_games
WITH japanese_sets AS (     SELECT DISTINCT set_code      FROM set_translations      WHERE language = 'Japanese' ) SELECT      (SUM(CASE WHEN s.isNonFoilOnly THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage FROM japanese_sets js JOIN sets s ON js.set_code = s.set_code;	card_games
SELECT      SUM(CASE WHEN s.isOnlineOnly = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(DISTINCT st.setCode) AS percentage FROM      set_translations st JOIN      sets s ON st.setCode = s.code WHERE      st.language = 'Portuguese (Brazil)';	card_games
SELECT DISTINCT l.type FROM Cards c JOIN Legalities l ON c.uuid = l.uuid WHERE c.isTextless = 1;	card_games
SELECT id FROM sets WHERE baseSetSize = (SELECT MAX(baseSetSize) FROM sets);	card_games
WITH max_mana AS (     SELECT MAX(convertedManaCost) as max_cmc     FROM cards     WHERE side IS NULL ) SELECT artist FROM cards WHERE convertedManaCost = (SELECT max_cmc FROM max_mana) AND side IS NULL;	card_games
SELECT frameEffects, COUNT(*) AS count  FROM cards  WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL  GROUP BY frameEffects  ORDER BY count DESC  LIMIT 1;	card_games
SELECT COUNT(*) FROM cards WHERE (power IS NULL OR power = '*') AND hasFoil = 0 AND duelDeck = 'a';	card_games
SELECT id FROM sets WHERE type = 'commander' ORDER BY totalSetSize DESC LIMIT 1;	card_games
SELECT c.name AS "Card Name", MAX(c.manaCost) AS "Mana Cost" FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.format = 'duel' AND l.status = 'Legal' GROUP BY c.uuid, c.name ORDER BY "Mana Cost" DESC LIMIT 10;	card_games
WITH earliest_mythic AS (     SELECT MIN(originalReleaseDate) as min_date     FROM cards     WHERE rarity = 'mythic' ) SELECT c.originalReleaseDate, l.format FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.rarity = 'mythic'  AND c.originalReleaseDate = (SELECT min_date FROM earliest_mythic) AND l.status = 'legal';	card_games
SELECT COUNT(*)  FROM cards  JOIN set_translations  ON cards.setCode = set_translations.setCode  WHERE artist = 'Volkan Baǵa' AND language = 'French';	card_games
SELECT COUNT(*)  FROM cards c  LEFT JOIN legalities l ON c.uuid = l.uuid  WHERE c.name = 'Abundance'  AND 'Enchantment' IN (c.types)  AND c.rarity = 'rare'  GROUP BY c.uuid  HAVING MIN(l.status) = 'Legal' AND MAX(l.status) = 'Legal';	card_games
WITH BannedCounts AS (     SELECT          l.format,         COUNT(*) as banned_count      FROM legalities l      WHERE l.status = 'Banned'      GROUP BY l.format ), MaxBanCount AS (     SELECT MAX(banned_count) as max_ban      FROM BannedCounts ) SELECT      bc.format,      c.name  FROM legalities l  JOIN cards c ON l.uuid = c.uuid  JOIN BannedCounts bc ON l.format = bc.format  WHERE l.status = 'Banned' AND bc.banned_count = (SELECT max_ban FROM MaxBanCount);	card_games
SELECT language FROM set_translations WHERE translation = 'Battlebond';	card_games
WITH artist_counts AS (     SELECT          artist,         COUNT(*) as total_cards     FROM cards     GROUP BY artist ), min_artist_count AS (     SELECT          MIN(total_cards) as min_count     FROM artist_counts ) SELECT      c.artist,     c.name as card_name,     s.format FROM cards c JOIN sets s ON c.setCode = s.code WHERE c.artist IN (     SELECT artist      FROM artist_counts      WHERE total_cards = (SELECT min_count FROM min_artist_count) ) ORDER BY c.artist, card_name;	card_games
SELECT l.status  FROM legalities l  JOIN cards c ON l.uuid = c.uuid  WHERE c.frameVersion = '1997'  AND (c.artist = 'D. Alexander Gregory')  AND c.hasContentWarning = 1  AND l.format = 'legacy';	card_games
SELECT c.name AS CardName, l.format AS BannedFormat  FROM cards c  LEFT JOIN legalities l ON c.uuid = l.uuid  WHERE c.edhrecRank = 1 AND l.status = 'Banned';	card_games
SELECT AVG(cnt_per_year) AS average_sets FROM (    SELECT YEAR(releaseDate) AS year, COUNT(id) AS cnt_per_year    FROM sets    WHERE releaseDate BETWEEN '2012-01-01' AND '2015-12-31'    GROUP BY year ) AS yearly_counts;	card_games
SELECT DISTINCT artist FROM cards WHERE bordercolor = 'black' AND availability = 'arena';	card_games
SELECT uuid FROM legalities WHERE format = 'oldschool' AND status IN ('banned', 'restricted');	card_games
SELECT COUNT(*) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper';	card_games
SELECT r.text  FROM rulings AS r  JOIN cards AS c ON r.uuid = c.uuid  WHERE c.artist = 'Kev Walker'  GROUP BY r.text  ORDER BY r.date DESC;	card_games
SELECT DISTINCT c.name, l.format FROM cards c JOIN sets s ON c.setCode = s.code JOIN legalities l ON c.uuid = l.uuid WHERE s.name = 'Hour of Devastation' AND l.status = 'Legal';	card_games
SELECT name FROM sets WHERE  EXISTS (SELECT 1 FROM set_translations WHERE language = 'Korean' AND setCode = sets.code)  AND NOT EXISTS (SELECT 1 FROM set_thumbnails WHERE language = 'Japanese' AND setCode = sets.code);	card_games
SELECT c.frameVersion AS frame_style,         c.name AS card_name,        CASE WHEN l.status = 'Banned' THEN 'Yes' ELSE 'No' END AS is_banned FROM cards c LEFT JOIN legalities l ON c.uuid = l.uuid WHERE c.artist = 'Allen Williams' GROUP BY c.frameVersion, c.name;	card_games
SELECTDisplayName, Reputation FROM users WHERE DisplayName = 'Harlan' OR DisplayName = 'Jarrod Dixon' ORDER BY Reputation DESC;	codebase_community
SELECT DisplayName  FROM users  WHERE YEAR(CreationDate) = 2011;	codebase_community
SELECT COUNT(*) FROM users WHERE LastAccessDate > '2014-09-01';	codebase_community
SELECT DisplayName FROM users WHERE Views = (SELECT MAX(Views) FROM users);	codebase_community
SELECT COUNT(*) FROM users WHERE UpVotes > 100 AND DownVotes > 1;	codebase_community
SELECT COUNT(*) FROM users WHERE Views > 10 AND YEAR(CreationDate) > 2013;	codebase_community
SELECT COUNT(*)  FROM posts  WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');	codebase_community
SELECT p.Title  FROM users u  JOIN posts p ON u.Id = p.OwnerUserId  WHERE u.DisplayName = 'csgillespie';	codebase_community
SELECT u.DisplayName  FROM posts p  JOIN users u ON p.OwnerUserId = u.Id  WHERE p.Title = 'Eliciting priors from experts';	codebase_community
SELECT p.Title  FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie' ORDER BY p.ViewCount DESC LIMIT 1;	codebase_community
SELECT DisplayName  FROM users  WHERE Id IN (     SELECT OwnerUserId      FROM posts      WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts) );	codebase_community
SELECT SUM(p.CommentCount) FROM posts p WHERE p.OwnerUserId = (SELECT u.Id FROM users u WHERE u.DisplayName = 'csgillespie');	codebase_community
SELECT p.AnswerCount  FROM posts p  JOIN users u ON p.OwnerUserId = u.Id  WHERE u.DisplayName = 'csgillespie'  ORDER BY p.AnswerCount DESC  LIMIT 1;	codebase_community
SELECT u.DisplayName  FROM users u  JOIN posts p ON u.Id = p.LastEditorUserId  WHERE p.Title = 'Examples for teaching: Correlation does not mean causation';	codebase_community
SELECT COUNT(*) FROM posts  WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND ParentId IS NULL;	codebase_community
SELECT DISTINCT u.DisplayName  FROM users u  JOIN posts p ON u.Id = p.OwnerUserId  WHERE p.ClosedDate IS NOT NULL;	codebase_community
SELECT COUNT(*)  FROM posts  JOIN users ON posts.OwnerUserId = users.Id  WHERE users.Age > 65 AND posts.Score >= 20;	codebase_community
SELECT u.Location  FROM users u  JOIN posts p ON u.Id = p.OwnerUserId  WHERE p.Title = 'Eliciting priors from experts';	codebase_community
SELECT Body FROM posts WHERE Id = (SELECT ExcerptPostId FROM tags WHERE TagName = 'bayesian');	codebase_community
SELECT Body FROM posts WHERE Id = (SELECT ExcerptPostId FROM tags ORDER BY Count DESC LIMIT 1);	codebase_community
SELECT COUNT(*) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');	codebase_community
SELECT b.BadgeName  FROM Badges b  JOIN Users u ON b.UserId = u.Id  WHERE u.DisplayName = 'csgillespie';	codebase_community
SELECT COUNT(*)  FROM badges  JOIN users ON badges.UserId = users.Id  WHERE users.DisplayName = 'csgillespie' AND YEAR(badges.Date) = 2011;	codebase_community
SELECT u.DisplayName FROM (     SELECT UserId, COUNT(Id) as BadgeCount     FROM badges     GROUP BY UserId     HAVING BadgeCount = (         SELECT MAX(BadgeCount)         FROM (             SELECT COUNT(*) as BadgeCount             FROM badges             GROUP BY UserId         ) as max_badges     ) ) as badge_counts JOIN users u ON badge_counts.UserId = u.Id;	codebase_community
SELECT AVG(p.Score) AS AverageScore FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie';	codebase_community
WITH BadgeCounts AS (     SELECT u.Id, COUNT(b.UserId) as badge_count     FROM users u     LEFT JOIN badges b ON u.Id = b.UserId     WHERE u.Views > 200     GROUP BY u.Id ) SELECT AVG(badge_count) AS average_badges FROM BadgeCounts;	codebase_community
SELECT      (COUNT(CASE WHEN p.OwnerUserId IN (         SELECT u.Id FROM users u WHERE u.Age > 65     ) THEN p.Id END) * 100.0 / COUNT(p.Id)) AS Percentage FROM posts p WHERE p.Score > 5;	codebase_community
SELECT COUNT(*) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19';	codebase_community
SELECT CreationDate  FROM votes  GROUP BY CreationDate  ORDER BY COUNT(Id) DESC  LIMIT 1;	codebase_community
SELECT COUNT(*) FROM badges WHERE Name = 'Revival';	codebase_community
SELECT Title  FROM Posts  WHERE Id IN (     SELECT PostId      FROM Comments      WHERE Score = (SELECT MAX(Score) FROM Comments) );	codebase_community
SELECT CommentCount FROM posts WHERE ViewCount = 1910;	codebase_community
SELECT p.FavoriteCount FROM posts p JOIN votes v ON p.Id = v.PostId WHERE v.UserId = 3025 AND v.CreationDate = '2014-04-23';	codebase_community
SELECT Body FROM posts WHERE ParentId = 107829;	codebase_community
SELECT      c.PostId,     p.ClosedDate IS NOT NULL AS IsWellFinished FROM      comments c JOIN      posts p ON c.PostId = p.Id WHERE      c.UserId = 23853 AND      c.CreationDate = '2013-07-12 09:08:18.0';	codebase_community
SELECT u.Reputation  FROM users u  WHERE u.Id = (SELECT p.OwnerUserId FROM posts p WHERE p.Id = 65041);	codebase_community
SELECT COUNT(*)  FROM posts  WHERE OwnerUserId = (     SELECT Id      FROM users      WHERE DisplayName = 'Tiago Pasqualini' );	codebase_community
SELECT u.DisplayName  FROM votes v  JOIN users u ON v.UserId = u.Id  WHERE v.Id = 6347;	codebase_community
SELECT p.PostId, COUNT(v.VoteId) AS NumberOfVotes FROM posts p JOIN votes v ON p.PostId = v.PostId WHERE p.Title LIKE '%data visualization%' GROUP BY p.PostId;	codebase_community
SELECT BadgeName FROM Badges WHERE UserId = (SELECT Id FROM Users WHERE DisplayName = 'DatEpicCoderGuyWhoPrograms')	codebase_community
SELECT      (SELECT COUNT(p.Id) FROM posts p WHERE p.OwnerUserId = 24) /      (SELECT COUNT(v.Id) FROM votes v WHERE v.UserId = 24) AS post_to_vote_ratio;	codebase_community
SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';	codebase_community
SELECT Text FROM comments WHERE Score = 17;	codebase_community
SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com';	codebase_community
SELECT Name FROM Badges WHERE UserId = (     SELECT Id     FROM Users     WHERE DisplayName = 'SilentGhost' );	codebase_community
SELECT u.DisplayName  FROM comments c  JOIN users u ON c.UserId = u.Id  WHERE c.Text = 'thank you user93!';	codebase_community
SELECT c.Text  FROM comments c  JOIN users u ON c.UserId = u.Id  WHERE u.DisplayName = 'A Lion';	codebase_community
SELECT u.DisplayName, u.Reputation  FROM users u  JOIN posts p ON u.Id = p.OwnerUserId  WHERE p.Title = 'Understanding what Dassault iSight is doing?';	codebase_community
SELECT c.Text  FROM comments AS c  JOIN posts AS p ON p.Id = c.PostId  WHERE p.Title = 'How does gentle boosting differ from AdaBoost?';	codebase_community
SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Necromancer' LIMIT 10;	codebase_community
SELECT LastEditorDisplayName FROM posts WHERE Title = 'Open source tools for visualizing multi-dimensional data?';	codebase_community
SELECT Title  FROM posts  WHERE LastEditorUserId = (     SELECT Id      FROM users      WHERE DisplayName = 'Vebjorn Ljosa' );	codebase_community
SELECT      u.WebsiteUrl,     COALESCE(SUM(CASE v.VoteTypeId WHEN 2 THEN 1 WHEN 3 THEN -1 ELSE 0 END), 0) AS TotalScore FROM      users u LEFT JOIN      posts p ON p.LastEditorUserId = u.Id LEFT JOIN      votes v ON v.PostId = p.Id WHERE      u.DisplayName = 'Yevgeny';	codebase_community
WITH EditedPost AS (     SELECT          Id,         LastEditorUserId     FROM         posts     WHERE         Title = 'Why square the difference instead of taking the absolute value in standard deviation?' ) SELECT      c.UserId,     c.Text,     c.CreationDate FROM     EditedPost ep JOIN      comments c ON ep.LastEditorUserId = c.UserId;	codebase_community
SELECT SUM(BountyAmount) AS TotalBounty  FROM votes  WHERE PostId IN (     SELECT Id FROM posts WHERE Title LIKE '%data%' );	codebase_community
SELECT u.DisplayName  FROM users u  JOIN votes v ON u.Id = v.UserId  JOIN posts p ON v.PostId = p.Id  WHERE v.BountyAmount = 50 AND p.Title LIKE '%variance%';	codebase_community
SELECT p.Title, p.Text, avg_view_count.Average_View_Count FROM Posts p JOIN PostTags pt ON p.Id = pt.PostId JOIN Tags t ON pt.TagId = t.Id CROSS JOIN (     SELECT AVG(p.ViewCount) AS Average_View_Count     FROM Posts p     JOIN PostTags pt ON p.Id = pt.PostId     JOIN Tags t ON pt.TagId = t.Id     WHERE t.TagName = 'humor' ) avg_view_count WHERE t.TagName = 'humor';	codebase_community
SELECT COUNT(*) FROM posts WHERE OwnerUserId = 13 AND ParentId IS NOT NULL;	codebase_community
SELECT Id FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users);	codebase_community
SELECT Id FROM Users WHERE Views = (SELECT MIN(Views) FROM Users);	codebase_community
SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Supporter' AND YEAR(Date) = 2011;	codebase_community
SELECT COUNT(*) AS NumberOfUsersWithMoreThanFiveBadges FROM (     SELECT UserId     FROM badges     GROUP BY UserId     HAVING COUNT(*) > 5 );	codebase_community
SELECT COUNT(DISTINCT u.UserId) AS NumberOfUsers FROM Users u WHERE u.Location = 'New York'   AND (     SELECT COUNT(*)      FROM Badges b      WHERE b.UserId = u.UserId        AND (b.BadgeName IN ('Teacher', 'Supporter'))   ) >= 2;	codebase_community
SELECT u.DisplayName AS UserName, u.Reputation  FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Id = 1;	codebase_community
COUNT(DISTINCT ph.PostId) = COUNT(1) AND (     SELECT COUNT(*)      FROM posthistory ph2      WHERE ph2.UserId = u.Id      GROUP BY ph2.PostId      HAVING COUNT(*) > 1 ) IS NULL	codebase_community
WITH CommentCounts AS (     SELECT OwnerUserId, COUNT(*) AS CommentCount     FROM Posts     WHERE ParentId IS NOT NULL     GROUP BY OwnerUserId ) SELECT      u.Id AS UserId,     u.DisplayName,     cc.CommentCount,     b.Name AS BadgeName FROM CommentCounts cc JOIN Users u ON cc.OwnerUserId = u.Id LEFT JOIN Badges b ON u.Id = b.UserId ORDER BY cc.CommentCount DESC, UserId ASC;	codebase_community
SELECT COUNT(DISTINCT u.Id) AS NumberOfUsers  FROM users u  JOIN badges b ON u.Id = b.UserId  WHERE u.Location = 'India' AND b.Name = 'Teacher';	codebase_community
WITH student_badges AS (     SELECT COUNT(*) as total_student_badges      FROM badges      WHERE name = 'Student' ), year_2010 AS (     SELECT COUNT(*) as count_2010      FROM badges      WHERE name = 'Student' AND YEAR(date) = 2010 ), year_2011 AS (     SELECT COUNT(*) as count_2011      FROM badges      WHERE name = 'Student' AND YEAR(date) = 2011 ) SELECT      ((count_2010 / total_student_badges * 100) - (count_2011 / total_student_badges * 100)) as percentage_difference FROM student_badges, year_2010, year_2011;	codebase_community
-- Unfortunately, this query cannot be completed with the given schema.	codebase_community
-- Retrieve all related posts including itself WITH RelatedPosts AS (     SELECT Id FROM posts WHERE Id = 61217     UNION     SELECT RelatedPostId FROM votes WHERE PostId = 61217     UNION     SELECT PostId FROM votes WHERE RelatedPostId = 61217 ) SELECT Id FROM RelatedPosts;  -- Get the view count of the main post SELECT ViewCount FROM posts WHERE Id = 61217;	codebase_community
SELECT p.Score, v.VoteTypeId  FROM posts p  LEFT JOIN votes v ON p.Id = v.PostId  WHERE p.Id = 395;	codebase_community
SELECT Id, OwnerUserId FROM posts WHERE Score > 60;	codebase_community
SELECT SUM(p.FavoriteCount) AS TotalFavorites FROM posts p WHERE p.OwnerUserId = 686 AND YEAR(p.CreationDate) = 2011;	codebase_community
SELECT      (SUM(u.UpVotes) / COUNT(u.Id)) AS AvgUpVotes,     (SUM(u.Age) / COUNT(u.Id)) AS AvgAge FROM      users u JOIN (     SELECT OwnerUserId, COUNT(*) as PostCount     FROM posts     GROUP BY OwnerUserId     HAVING PostCount > 10 ) p ON u.Id = p.OwnerUserId;	codebase_community
SELECT COUNT(DISTINCT UserId) AS NumberOfAnnouncerBadges FROM badges WHERE Name = 'Announcer';	codebase_community
SELECT Name  FROM badges  WHERE Date = '2010-07-19 19:39:08.0'  ORDER BY Name;	codebase_community
SELECT COUNT(*) AS PositiveCommentsCount FROM posts  WHERE ParentId IS NOT NULL AND Score > 60;	codebase_community
SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:25:47.0';	codebase_community
SELECT COUNT(Id) FROM posts WHERE Score = 10;	codebase_community
WITH MaxReputation AS (     SELECT MAX(Reputation) AS MaxRep     FROM Users ), TopUsers AS (     SELECT UserId     FROM Users     WHERE Reputation = (SELECT MaxRep FROM MaxReputation) ) SELECT Name FROM Badges WHERE UserId IN (SELECT UserId FROM TopUsers);	codebase_community
SELECT u.Reputation  FROM badges b  JOIN users u ON b.UserId = u.Id  WHERE b.Date = '2010-07-19 19:39:08.0';	codebase_community
SELECT Name FROM Badges  INNER JOIN Users ON Badges.UserId = Users.Id  WHERE DisplayName = 'Pierre';	codebase_community
SELECT Date  FROM Badges  JOIN Users ON Badges.UserId = Users.UserId  WHERE Users.Location = 'Rochester, NY';	codebase_community
SELECT      (COUNT(DISTINCT b.UserId) / COUNT(DISTINCT u.Id)) * 100 AS Percentage FROM      badges b JOIN      users u ON b.UserId = u.Id WHERE      b.Name = 'Teacher';	codebase_community
SELECT      (COUNT(CASE WHEN u.Age BETWEEN 13 AND 18 THEN 1 END) * 100.0 / COUNT(b.UserId)) AS Percentage FROM      badges b LEFT JOIN      users u ON b.UserId = u.Id WHERE      b.Name = 'Organizer';	codebase_community
SELECT      SUM(CASE WHEN V.VoteTypeId = 2 THEN 1 ELSE -1 END) AS RatingScore FROM      posts P JOIN      votes V ON P.Id = V.PostId WHERE      P.CreationDate = '2010-07-19 19:19:56.0';	codebase_community
SELECT Text FROM Comments WHERE CreationDate = '2010-07-19 19:37:33.0';	codebase_community
SELECT DISTINCT u.Age  FROM Users AS u INNER JOIN Badges AS b ON u.Id = b.UserId WHERE u.Location = 'Vienna, Austria';	codebase_community
SELECT COUNT(DISTINCT u.Id) FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Supporter' AND u.Age BETWEEN 19 AND 65;	codebase_community
SELECT SUM(u.Views) AS TotalViews FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Date = '2010-07-19 19:39:08.0';	codebase_community
SELECT Name  FROM badges  WHERE UserId IN (     SELECT Id      FROM users      WHERE Reputation = (SELECT MIN(Reputation) FROM users) );	codebase_community
SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Sharpie');	codebase_community
SELECT COUNT(*)  FROM Badges AS b  JOIN UsersBadges AS ub ON b.BadgeID = ub.BadgeID  JOIN Users AS u ON ub.UserID = u.UserID  WHERE b.Name = 'Supporter' AND u.Age > 65;	codebase_community
SELECT DisplayName FROM users WHERE Id = 30;	codebase_community
SELECT COUNT(*) FROM users WHERE Location = 'New York';	codebase_community
SELECT COUNT(*) FROM votes WHERE YEAR(CreationDate) = 2010;	codebase_community
SELECT COUNT(*)  FROM users  WHERE Age BETWEEN 19 AND 65;	codebase_community
SELECT DisplayName, Views  FROM users AS u  WHERE u.Views = (SELECT MAX(Views) FROM users);	codebase_community
SELECT      (COUNT(CASE WHEN YEAR(V.CreationDate) = 2010 THEN 1 END)) /      (COUNT(CASE WHEN YEAR(V.CreationDate) = 2011 THEN 1 END)) AS Ratio FROM votes V;	codebase_community
SELECT DISTINCT tag AS TagName FROM (     SELECT split(Tags, ' ') as tag     FROM posts     WHERE OwnerUserId = (SELECT UserId FROM users WHERE DisplayName = 'John Salvatier') )  WHERE tag != '';	codebase_community
SELECT COUNT(*)  FROM posts  WHERE OwnerUserId = (     SELECT Id      FROM users      WHERE DisplayName = 'Daniel Vassallo' );	codebase_community
SELECT COUNT(*) FROM votes WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Harlan');	codebase_community
SELECT p.Id AS PostId  FROM posts p  JOIN users u ON p.OwnerUserId = u.Id  WHERE u.DisplayName = 'slashnick'  ORDER BY p.AnswerCount DESC  LIMIT 1;	codebase_community
SELECT      CASE          WHEN SUM(CASE WHEN u.DisplayName = 'Harvey Motulsky' THEN p.ViewCount ELSE 0 END) >               SUM(CASE WHEN u.DisplayName = 'Noah Snyder' THEN p.ViewCount ELSE 0 END)              THEN 'Harvey Motulsky'         ELSE 'Noah Snyder'     END AS MorePopularAuthor FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE u.DisplayName IN ('Harvey Motulsky', 'Noah Snyder') GROUP BY u.DisplayName	codebase_community
SELECT COUNT(*) AS NumberOfPosts FROM (     SELECT p.Id     FROM posts p     JOIN votes v ON p.Id = v.PostId     WHERE p.OwnerUserId = (SELECT u.Id FROM users u WHERE u.DisplayName = 'Matt Parker')     GROUP BY p.Id     HAVING COUNT(v.Id) > 4 ) AS SubQuery;	codebase_community
SELECT COUNT(*) AS NegativeComments FROM votes v JOIN posts p ON v.PostId = p.Id WHERE p.OwnerUserId = (     SELECT Id      FROM users      WHERE DisplayName = 'Neil McGuigan' ) AND COALESCE(v.BountyAmount, 0) < 60;	codebase_community
SELECT DISTINCT REPLACE(REPLACE(s.value, '<', ''), '>', '') AS Tag FROM users u JOIN posts p ON u.Id = p.OwnerUserId CROSS APPLY STRING_SPLIT(p.Tags, ' ') s WHERE u.DisplayName = 'Mark Meckes' AND p.CommentCount = 0;	codebase_community
SELECT u.DisplayName  FROM badges b  INNER JOIN users u ON b.UserId = u.Id  WHERE b.Name = 'Organizer';	codebase_community
SELECT      (COUNT(CASE WHEN CHARINDEX('r', p.Tags) > 0 THEN 1 ELSE NULL END) * 1.0 / COUNT(p.Id)) * 100 AS Percentage FROM      Posts p WHERE      p.OwnerDisplayName = 'Community';	codebase_community
SELECT      (COALESCE((SELECT SUM(ViewCount) FROM posts WHERE OwnerDisplayName = 'Mornington'), 0)) -      (COALESCE((SELECT SUM(ViewCount) FROM posts WHERE OwnerDisplayName = 'Amos'), 0)) AS ViewDifference;	codebase_community
SELECT COUNT(DISTINCT UserId) AS NumberOfUsers  FROM badges  WHERE BadgeName = 'Commentator' AND YEAR(Date) = 2014;	codebase_community
SELECT COUNT(*) FROM posts WHERE CreationDate BETWEEN '2010-07-21 00:00:00' AND '2010-07-21 23:59:59';	codebase_community
SELECT DisplayName, Age FROM users WHERE Views = (SELECT MAX(Views) FROM users);	codebase_community
SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images';	codebase_community
SELECT COUNT(*) AS NumberOfNegativeComments  FROM votes  WHERE UserId = 13 AND VoteTypeId = 3;	codebase_community
SELECT p.Title, u.DisplayName FROM posts p JOIN votes v ON p.Id = v.PostId JOIN users u ON v.UserId = u.Id WHERE v.VoteTypeId = 2 -- Assuming 2 represents an upvote AND p.Id IN (     SELECT PostId     FROM votes     WHERE VoteTypeId = 2     GROUP BY PostId     HAVING COUNT(*) > 60 ) GROUP BY p.Title, u.DisplayName; -- Removes duplicate user entries per post	codebase_community
SELECT B.BadgeName  FROM badges B  INNER JOIN users U ON B.UserId = U.Id  WHERE YEAR(B.Date) = 2011 AND U.Location = 'North Pole';	codebase_community
SELECT users.DisplayName, users.WebsiteUrl FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE posts.FavoriteCount > 150;	codebase_community
SELECT AnswerCount AS PostHistoryCounts, LastEditDate  FROM posts  WHERE Title = 'What is the best introductory Bayesian statistics textbook?';	codebase_community
SELECT u.LastAccessDate, u.Location  FROM badges b  JOIN users u ON b.UserId = u.Id  WHERE b.Name = 'Outliers';	codebase_community
SELECT DISTINCT p.Title  FROM posts AS p  WHERE p.Id IN (     SELECT t1.ExcerptPostId      FROM tags AS t1      WHERE t1.TagName IN (         SELECT t2.TagName          FROM tags AS t2          LEFT JOIN posts AS po ON t2.ExcerptPostId = po.Id          OR t2.WikiPostId = po.Id          WHERE po.Title = 'How to tell if something happened in a data set which monitors a value over time'     ) ) AND p.Id != (     SELECT Id FROM posts WHERE Title = 'How to tell if something happened in a data set which monitors a value over time' )	codebase_community
SELECT      p.Id AS PostId,     b.Name AS BadgeName FROM      users u JOIN      posts p ON u.Id = p.OwnerUserId LEFT JOIN      badges b ON u.Id = b.UserId WHERE      u.DisplayName = 'Samuel'     AND YEAR(p.CreationDate) = 2013     AND YEAR(b.Date) = 2013;	codebase_community
SELECT u.DisplayName  FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.ViewCount = (SELECT MAX(p2.ViewCount) FROM posts p2) LIMIT 1;	codebase_community
SELECT u.DisplayName, u.Location  FROM tags AS t  JOIN posts AS p ON t.ExcerptPostId = p.Id  JOIN users AS u ON p.OwnerUserId = u.Id  WHERE t.TagName = 'hypothesis-tingesting';	codebase_community
SELECT p.Title AS RelatedPostTitle, v.VoteTypeId AS LinkType FROM Posts p JOIN (     SELECT RelatedPostId, VoteTypeId     FROM Votes     WHERE PostId = (         SELECT Id          FROM Posts          WHERE Title = 'Specific Post Title'     ) ) v ON p.Id = v.RelatedPostId;	codebase_community
SELECT u.DisplayName FROM posts p JOIN posts pp ON p.ParentId = pp.Id JOIN users u ON pp.OwnerUserId = u.Id WHERE p.ParentId IS NOT NULL ORDER BY p.Score DESC LIMIT 1;	codebase_community
SELECT DISTINCT u.DisplayName, u.WebsiteUrl FROM Users u JOIN Votes v ON u.Id = v.UserId WHERE v.VoteTypeId = 8 AND v.BountyAmount = (     SELECT MAX(BountyAmount)      FROM Votes      WHERE VoteTypeId = 8 );	codebase_community
SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5;	codebase_community
SELECT COUNT(*) FROM tags WHERE Count BETWEEN 5000 AND 7000;	codebase_community
SELECT OwnerUserId FROM posts ORDER BY FavoriteCount DESC LIMIT 1;	codebase_community
SELECT Age FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users);	codebase_community
SELECT COUNT(*)  FROM posts  INNER JOIN votes ON posts.Id = votes.PostId  WHERE YEAR(posts.CreationDate) = 2011 AND votes.BountyAmount = 50;	codebase_community
SELECT Id FROM users WHERE Age = (SELECT MIN(Age) FROM users) LIMIT 1;	codebase_community
SELECT SUM(Score) FROM posts WHERE LasActivityDate LIKE '2010-07-19%';	codebase_community
SELECT COUNT(*) / 12 AS avg_links_per_month FROM posts WHERE YEAR(CreationDate) = 2010  AND AnswerCount <= 2;	codebase_community
SELECT Id FROM posts  WHERE Id IN (SELECT PostId FROM votes WHERE UserId = 1465)  ORDER BY FavoriteCount DESC LIMIT 1;	codebase_community
SELECT Title FROM posts WHERE Id = (SELECT PostId FROM votes ORDER BY CreationDate ASC LIMIT 1);	codebase_community
SELECT u.DisplayName FROM Users u WHERE u.Id IN (     SELECT UserId     FROM Badges     GROUP BY UserId     HAVING COUNT(Name) = (         SELECT MAX(COUNT(Name))         FROM Badges         GROUP BY UserId     ) );	codebase_community
SELECT MIN(v.CreationDate) AS FirstVoteDate  FROM votes v  JOIN users u ON v.UserId = u.Id  WHERE u.DisplayName = 'chl';	codebase_community
SELECT MIN(CreationDate) AS FirstPostDate FROM posts WHERE OwnerUserId IN (     SELECT Id      FROM users      WHERE Age = (SELECT MIN(Age) FROM users) );	codebase_community
SELECT DisplayName FROM users  WHERE Id = (     SELECT UserID FROM badges      WHERE Name = 'Autobiographer'      ORDER BY Date ASC LIMIT 1 );	codebase_community
SELECT COUNT(DISTINCT u.Id) AS NumberOfUsers FROM users u INNER JOIN posts p ON u.Id = p.OwnerUserId WHERE u.Location = 'United Kingdom' AND p.FavoriteCount >= 4;	codebase_community
SELECT AVG(v.PostId) AS AveragePostsVoted FROM votes v WHERE v.UserId IN (     SELECT u.Id     FROM users u     WHERE u.Age = (SELECT MAX(u.Age) FROM users u) );	codebase_community
SELECT DisplayName FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users);	codebase_community
SELECT COUNT(*) FROM users WHERE Reputation > 2000 AND Views > 1000;	codebase_community
SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65;	codebase_community
SELECT COUNT(*) AS NumberOfPosts  FROM posts  JOIN users ON posts.OwnerUserId = users.Id  WHERE users.DisplayName = 'Jay Stevens'  AND YEAR(posts.CreationDate) = 2010;	codebase_community
SELECT Id AS PostId, Title  FROM posts  WHERE OwnerUserId = (     SELECT Id      FROM users      WHERE DisplayName = 'Harvey Motulsky' )  ORDER BY ViewCount DESC  LIMIT 1;	codebase_community
SELECT Id, Title FROM posts ORDER BY Score DESC LIMIT 1;	codebase_community
SELECT AVG(p.Score)  FROM users u  JOIN posts p ON u.Id = p.OwnerUserId  WHERE u.DisplayName = 'Stephen Turner';	codebase_community
SELECT DISTINCT u.DisplayName  FROM posts p  INNER JOIN users u ON p.OwnerUserId = u.Id  WHERE p.ViewCount > 20000 AND YEAR(p.CreationDate) = 2011;	codebase_community
SELECT p.Id AS PostId, u.DisplayName  FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE YEAR(p.CreationDate) = 2010 AND p.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts WHERE YEAR(CreationDate) = 2010);	codebase_community
SELECT      (COUNT(CASE WHEN u.Reputation > 1000 THEN p.Id END) / COUNT(p.Id)) * 100 AS Percentage FROM      posts p JOIN      users u ON p.OwnerUserId = u.Id WHERE      YEAR(p.CreationDate) = 2011;	codebase_community
SELECT (COUNT(CASE WHEN Age BETWEEN 13 AND 18 THEN Id END) * 100.0 / COUNT(Id)) AS percentage FROM users;	codebase_community
SELECT p.ViewCount, u.DisplayName  FROM Posts p  JOIN Users u ON p.LastEditorUserId = u.Id  WHERE p.Title = 'Computer Game Datasets';	codebase_community
SELECT COUNT(*) FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts);	codebase_community
SELECT SUM(CommentCount) FROM posts WHERE Score = (SELECT MAX(Score) FROM posts);	codebase_community
SELECT COUNT(*) FROM posts WHERE Views > 35000 AND CommentCount = 0;	codebase_community
SELECT u.DisplayName, u.Location  FROM posts p  JOIN users u ON p.LastEditorUserId = u.Id  WHERE p.Id = 183;	codebase_community
SELECT b.Name  FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Emmett' ORDER BY b.Date DESC LIMIT 1;	codebase_community
SELECT COUNT(*)  FROM users  WHERE Age BETWEEN 19 AND 65  AND UpVotes > 5000;	codebase_community
SELECT b.CreationDate - u.CreationDate AS DaysTaken FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Zolomon';	codebase_community
To determine the user who made the most recent post and count their total posts, follow these steps:  1. **Identify the Latest Post**: Find the maximum `CreationDate` in the Posts table to identify the latest post.  2. **Determine the User ID**: Extract the `UserId` from this latest post.  3. **Count Total Posts by the User**: Count all entries in the Posts table where `UserId` matches the identified user.  **Answer:**  The user with the most recent post has a total of [number] posts. Unfortunately, without access to additional tables like Comments or Votes, we cannot provide the number of comments they've made.	codebase_community
SELECT p.Body AS CommentText, u.DisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.ParentId = (     SELECT Id      FROM posts      WHERE Title = 'Analysing wind data with R' ) ORDER BY p.CreationDate DESC LIMIT 10;	codebase_community
SELECT COUNT(DISTINCT UserId) AS NumberOfUsers FROM Badges WHERE Name = 'Citizen Patrol';	codebase_community
SELECT COUNT(*) FROM posts WHERE Tags LIKE '%careers%';	codebase_community
SELECT Reputation, ViewCount FROM users WHERE DisplayName = 'Jarrod Dixon';	codebase_community
SELECT      p.CommentCount AS Comments,     (SELECT COUNT(*) FROM posts WHERE ParentId = p.Id) AS Answers FROM posts p WHERE p.Title = 'Clustering 1D data';	codebase_community
SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat';	codebase_community
SELECT COUNT(DISTINCT PostId) FROM votes WHERE BountyAmount >= 30;	codebase_community
SELECT      (COUNT(CASE WHEN Score > 50 THEN Id END) * 100.0 / COUNT(Id)) AS percentage FROM posts WHERE OwnerUserId = (     SELECT Id      FROM users      ORDER BY Reputation DESC      LIMIT 1 );	codebase_community
SELECT COUNT(*) FROM posts WHERE Score < 20;	codebase_community
SELECT COUNT(*) FROM tags WHERE Id < 15 AND Count <= 20;	codebase_community
SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample';	codebase_community
SELECT u.Reputation, u.UpVotes FROM users u JOIN (     SELECT OwnerUserId      FROM posts      WHERE Body LIKE '%fine, you win :)%' ) p ON u.Id = p.OwnerUserId;	codebase_community
SELECT c.Text FROM comments c WHERE c.PostId IN (SELECT p.Id FROM posts p WHERE p.Title LIKE '%linear regression%');	codebase_community
SELECT c.* FROM comments AS c JOIN posts AS p ON c.postid = p.id WHERE p.viewcount BETWEEN 100 AND 150 ORDER BY c.score DESC LIMIT 1;	codebase_community
SELECT CreationDate, Age FROM users WHERE WebsiteUrl LIKE '%http://%';	codebase_community
SELECT COUNT(p.Id) AS NumberOfZeroVotePosts FROM Posts p LEFT JOIN Votes v ON p.Id = v.PostId WHERE v.PostId IS NULL AND p.ViewCount < 5;	codebase_community
To solve this problem, we need to determine how many votes were cast on comments where each post has exactly one comment. However, based on the provided database schema, which includes only the `Posts` and `Votes` tables, it's impossible to directly link votes to comments or distinguish between votes on posts and votes on comments.  ### Approach Given the constraints of the problem, here is a step-by-step approach that highlights why the solution isn't feasible with the current schema:  1. **Identify Relevant Tables**: We have two tables: `Posts` and `Votes`. 2. **Understand Relationships**: The `Posts` table contains information about posts, including the number of comments each post has (`CommentCount`). The `Votes` table contains votes, but without a way to link these votes specifically to comments or posts. 3. **Distinguish Votes on Comments**: Without a separate table for comments and their respective votes, there's no clear way to determine which votes are associated with comments rather than posts. 4. **Conclusion**: Due to the lack of necessary tables (e.g., `Comments` and `CommentVotes`) and without additional columns that distinguish between post votes and comment votes, it's impossible to accurately count the votes on comments for posts with exactly one comment.  ### Solution Code Since the problem cannot be solved with the given schema, we can explain why this is the case. However, if we assume an idealized structure where each vote on a comment is recorded in a separate table or has a unique identifier, the approach would involve joining relevant tables and counting votes based on those identifiers.  ### Explanation The solution hinges on having additional data structures that link comments to their respective posts and track votes on these comments. Without this information, it's impossible to determine which votes correspond to comments on posts with exactly one comment. Therefore, the problem requires a more comprehensive database schema to be solvable as intended.	codebase_community
SELECT COUNT(u.Id) AS NumberOfUsers FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.ParentId IS NOT NULL AND (p.UpVotes - p.DownVotes) = 0 AND u.Age = 40;	codebase_community
SELECT p.Id AS PostId, c.Comment FROM posts p JOIN comments c ON p.Id = c.PostId WHERE p.Title = 'Group differences on a five point Likert item';	codebase_community
To address your question about finding the up vote count of the user who made the comment "R is also lazy evaluated," I must note that based on the provided database schema, there isn't a 'comments' table available. This makes it impossible to directly query for the specific comment text.  However, if we were to assume that such a table exists or if the comment can be linked through another method (which isn't evident from the current schema), the approach would involve:  1. Retrieving the user ID from the hypothetical 'comments' table where the comment text matches. 2. Using this user ID to find their up vote count in the 'users' table.  Without the necessary tables, it's not feasible to provide a correct SQL query for your request. If you have access to additional tables or more details about how comments are stored, please provide that information so I can assist further.	codebase_community
SELECT c.Text FROM Comments AS c  JOIN Users AS u ON c.UserId = u.Id  WHERE u.DisplayName = 'Harvey Motulsky';	codebase_community
SELECT DISTINCT u.DisplayName FROM Comments c JOIN Users u ON c.UserId = u.UserId WHERE c.Score BETWEEN 1 AND 5 AND u.DownVotes = 0;	codebase_community
SELECT      COUNT(c.UserId) AS TotalComments,     COUNT(u.UserId) AS UsersWithZeroUpvotes,     (COUNT(u.UserId) / COUNT(c.UserId)) * 100.0 AS Percentage FROM comments c LEFT JOIN users u ON c.UserId = u.UserId WHERE c.Score BETWEEN 5 AND 10;	codebase_community
SELECT sp.power_name  FROM superhero sh  JOIN hero_power hp ON sh.id = hp.hero_id  JOIN superpower sp ON hp.power_id = sp.id  WHERE sh.superhero_name = '3- D Man';	superhero
SELECT COUNT(DISTINCT hp.hero_id) AS num_superheroes FROM superpower sp JOIN hero_power hp ON sp.id = hp.power_id WHERE sp.power_name = 'Super Strength';	superhero
SELECT COUNT(DISTINCT s.id) AS count_superheroes FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Super Strength' AND s.height_ > 200;	superhero
SELECT s.full_name  FROM superhero s  WHERE (     SELECT COUNT(*)      FROM hero_power hp      WHERE hp.hero_id = s.id ) > 15;	superhero
SELECT COUNT(*)  FROM superhero s  JOIN colour c ON s.eye_colour_id = c.id  WHERE c.colour = 'Blue';	superhero
SELECT colour.name FROM superhero JOIN colour ON superhero.skin_colour_id = colour.id WHERE superhero.superhero_name = 'Apocalypse';	superhero
SELECT COUNT(*) AS total FROM superhero s WHERE eye_colour_id = (     SELECT id      FROM colour      WHERE colour = 'Blue' ) AND EXISTS (     SELECT 1      FROM hero_power hp      JOIN superpower sp ON hp.power_id = sp.id      WHERE hp.hero_id = s.id AND sp.power_name = 'Agility' );	superhero
SELECT s.superhero_name  FROM superhero s  JOIN colour e ON s.eye_colour_id = e.id  JOIN colour h ON s.hair_colour_id = h.id  WHERE e.colour = 'Blue' AND h.colour = 'Blond';	superhero
SELECT COUNT(superhero.id) AS total_marvel_superheroes  FROM superhero  JOIN publisher ON superhero.publisher_id = publisher.id  WHERE publisher.publisher_name = 'Marvel Comics';	superhero
SELECT      s.id AS superhero_id,     s.superhero_name AS name,     s.height_cm,     RANK() OVER (ORDER BY s.height_cm DESC) AS rank FROM      superhero s JOIN      publisher p ON s.publisher_id = p.id WHERE      p.publisher_name = 'Marvel Comics' ORDER BY      s.height_cm DESC;	superhero
SELECT p.publisher_aid AS publisher_name FROM superhero s INNER JOIN publisher p ON s.publisher_id = p.id WHERE s.superhero_name = 'Sauron';	superhero
SELECT COUNT(*) AS count, s.eye AS eye_id FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.name = 'Marvel Comics' GROUP BY s.eye ORDER BY count DESC;	superhero
SELECT s.weight  FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.name = 'Marvel Comics' AND s.weight IS NOT NULL;	superhero
SELECT s.id, s.superhero_name  FROM superhero s  JOIN publisher p ON s.publisher_id = p.id  JOIN hero_power hp ON s.id = hp.hero_id  JOIN superpower sp ON hp.power_id = sp.id  WHERE p.publisher_name = 'Marvel Comics' AND sp.power_name = 'Super Strength';	superhero
SELECT COUNT(*) FROM superhero WHERE publisher_id = 4;	superhero
SELECT p.publisher_name FROM (     SELECT ha.hero_id, MIN(ha.attribute_value) AS min_speed     FROM hero_attribute ha     WHERE ha.attribute_id = (         SELECT a.id         FROM attribute a         WHERE a.attribute_name = 'Speed'     )     GROUP BY ha.hero_id ) min_speed_hero JOIN superhero s ON min_speed_hero.hero_id = s.id JOIN publisher p ON s.publisher_id = p.id;	superhero
SELECT COUNT(*)  FROM superhero S JOIN colour C ON S.eye_colour_id = C.id JOIN publisher P ON S.publisher_id = P.id WHERE C.colour = 'Gold' AND P.publisher_name = 'Marvel Comics';	superhero
SELECT p.publisher_name  FROM publisher p  JOIN superhero s ON p.id = s.publisher_id  WHERE s.superhero_name = 'Blue Beetle II';	superhero
SELECT COUNT(*) FROM superhero s JOIN colour c ON s.hair_ colour_id = c.id WHERE c.colour = 'Blond';	superhero
SELECT s.id, s.superhero_name, s.real_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id WHERE ha.attribute_id = (SELECT id FROM attribute WHERE name = 'Intelligence') AND ha.attribute_value = (     SELECT MIN(ha2.attribute_value)      FROM hero_attribute ha2      JOIN attribute a ON ha2.attribute_id = a.id      WHERE a.name = 'Intelligence' );	superhero
SELECT r.race_name FROM superhero s JOIN race r ON s.race_id = r.id WHERE s.superhero_name = 'Copycat';	superhero
SELECT DISTINCT s.superhero_name  FROM superhero s  JOIN hero_attribute ha ON s.id = ha.hero_id  JOIN attribute a ON ha.attribute_id = a.id  WHERE a.attribute_name = 'Durability' AND ha.attribute_value < 50;	superhero
SELECT superhero.superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Death Touch';	superhero
SELECT COUNT(DISTINCT s.id)  FROM superhero s  LEFT JOIN hero_attribute ha ON s.id = ha.hero_id  WHERE s.gender_aid = 2  AND ha.attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength')  AND ha.attribute_value = 100;	superhero
WITH power_counts AS (     SELECT s.id, s.superhero_name, COUNT(hp.power_id) as power_count     FROM superhero s     LEFT JOIN hero_power hp ON s.id = hp.hero_id     GROUP BY s.id, s.superhero_name ), max_power AS (     SELECT MAX(power_count) as max_powers FROM power_counts ) SELECT pc.superhero_name FROM power_counts pc JOIN max_power mp ON pc.power_count = mp.max_powers;	superhero
SELECT COUNT(superhero.id) AS VampireSuperheroesCount FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire';	superhero
SELECT s.name  FROM superhero s JOIN hero_power hp ON s.id = hp.superhero_id JOIN superpower sp ON hp.superpower_id = sp.id WHERE sp.name IN ('Strength', 'Agility') GROUP BY s.name HAVING COUNT(DISTINCT sp.name) >= 2 ORDER BY s.name ASC;	superhero
SELECT      COUNT(CASE WHEN p.publisher_name = 'Marvel Comics' THEN 1 END) AS marvel,     COUNT(CASE WHEN p.publisher_name = 'DC Comics' THEN 1 END) AS dc,     (COUNT(CASE WHEN p.publisher_name = 'Marvel Comics' THEN 1 END) - COUNT(CASE WHEN p.publisher_name = 'DC Comics' THEN 1 END)) AS difference FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name IN ('Marvel Comics', 'DC Comics');	superhero
SELECT id FROM publisher WHERE publisher_name = 'Star Trek';	superhero
SELECT AVG(attribute_value) FROM hero_attribute;	superhero
SELECT COUNT(*) FROM superhero WHERE full_ename IS NULL;	superhero
SELECT colour FROM colour c JOIN superhero s ON c.id = s.eye_colour_id WHERE s.id = 75;	superhero
SELECT sp.power_name FROM superhero sh  JOIN hero_power hp ON sh.id = hp.hero_id  JOIN superpower sp ON hp.power_id = sp.id  WHERE sh.superhero_name = 'Deathlok';	superhero
SELECT AVG(weight_kg) FROM superhero JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Female';	superhero
SELECT s.superhero_name, sp.power_name  FROM superhero s  JOIN hero_power hp ON s.id = hp.hero_id  JOIN superpower sp ON hp.power_id = sp.id  WHERE s.gender_id = 1  GROUP BY s.id, sp.id  LIMIT 5;	superhero
SELECT superhero.superhero_name FROM superhero JOIN race ON superhero.race_id = race.id WHERE race.name = 'Alien';	superhero
SELECT s.superhero_name FROM superhero s JOIN colour c ON s.eyeColourId = c.id WHERE c.colour = 'No Colour' AND s.height_cm BETWEEN 170 AND 190;	superhero
SELECT sp.power_name FROM hero_power hp INNER JOIN superpower sp ON hp.power_id = sp.id WHERE hp.hero_id = 56;	superhero
SELECT s.full_name  FROM superhero s  JOIN race r ON s.race_id = r.id  WHERE r.race = 'Demi-God' LIMIT 5;	superhero
SELECT COUNT(*) FROM superhero WHERE alignment_id = 2;	superhero
SELECT r.race  FROM superhero s  INNER JOIN race r ON s.race_id = r.id  WHERE s.weight_kg = 169;	superhero
SELECT c.color_name  FROM superhero s  JOIN colour c ON s.hair_colour_id = c.id  WHERE s.height_cm = 185;	superhero
SELECT c.color FROM superhero s JOIN color c ON s.eye_color_id = c.id WHERE s.weight_kg = (SELECT MAX(weight_kg) FROM superhero);	superhero
SELECT      (SUM(CASE WHEN publisher_id = 13 THEN 1 ELSE 0 END) / COUNT(superhero.id)) * 100 AS percentage  FROM superhero  WHERE height_ cm BETWEEN 150 AND 180;	superhero
SELECT s.superhero_name  FROM superhero s  JOIN gender g ON s.gender_id = g.id  WHERE s.weight_kg > (SELECT 0.79 * AVG(s.weight_kg) FROM superhero s)  AND g.name = 'Male';	superhero
SELECT sp.power_name, COUNT(*) AS count FROM superpower sp JOIN hero_power hp ON sp.id = hp.power_id GROUP BY sp.power_name ORDER BY count DESC LIMIT 1;	superhero
SELECT ha.attribute_value  FROM superhero s  INNER JOIN hero_attribute ha ON s.id = ha.hero_id  WHERE s.superhero_ename = 'Abomination';	superhero
SELECT power_name FROM superpower WHERE id IN (SELECT power_id FROM hero_power WHERE hero_id = 1);	superhero
SELECT COUNT(*) FROM hero_power WHERE power_id = (SELECT id FROM superpower WHERE power_name = 'stealth');	superhero
SELECT s.full_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id WHERE ha.attribute_id = (SELECT id FROM attribute WHERE name = 'Strength') AND ha.attribute_value = (     SELECT MAX(ha2.attribute_value)     FROM hero_attribute ha2     JOIN attribute a ON ha2.attribute_id = a.id     WHERE a.name = 'Strength' );	superhero
SELECT      COUNT(s.id) AS superhero_count,     SUM(CASE WHEN s.skinColourID = 1 THEN 1 ELSE 0 END) AS sum_condition,     (COUNT(s.id) / SUM(CASE WHEN s.skinColourID = 1 THEN 1 ELSE 0 END)) AS average FROM      superhero s WHERE      s.skinColourID = 1;	superhero
SELECT COUNT(s.id) FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Dark Horse Comics';	superhero
SELECT s.superhero_name  FROM superhero s  JOIN hero_attribute ha ON s.id = ha.hero_id  JOIN attribute a ON ha.attribute_id = a.id  WHERE a.attribute_name = 'Durability'  AND s.publisher_id IN (SELECT p.id FROM publisher p WHERE p.publisher_name = 'Dark Horse Comics')  ORDER BY ha.attribute_value DESC  LIMIT 1;	superhero
SELECT colour.colour  FROM superhero  JOIN colour ON superhero.eye_colour_id = colour.id  WHERE superhero.full_name = 'Abraham Sapien';	superhero
SELECT DISTINCT s.superhero_name  FROM superhero s  JOIN hero_power hp ON s.id = hp.hero_id  JOIN superpower sp ON hp.power_id = sp.id  WHERE sp.power_name = 'Flight';	superhero
SELECT      s.eyeColour_id,      s.hairColour_id,      s.skinColour_id FROM      superhero s JOIN      publisher p ON s.publisher_id = p.id WHERE      s.gender = 'Female' AND     p.name = 'Dark Horse Comics';	superhero
SELECT s.superhero_name, p.publisher_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE s.hair_color_id = s.eye_color_id    AND s.hair_color_id = s.skin_color_id;	superhero
SELECT r.race_name FROM superhero s JOIN race r ON s.race_id = r.id WHERE s.superhero_name = 'A-Bomb';	superhero
WITH blue_female AS (     SELECT COUNT(*) as cnt     FROM superhero s     JOIN colour c ON s.skin_colour_id = c.id     WHERE s.gender = 'Female'  -- Replace with appropriate value if using codes         AND c.colour LIKE '%Blue%' ), total_female AS (     SELECT COUNT(*) as cnt     FROM superhero     WHERE gender = 'Female'   -- Replace with appropriate value if using codes ) SELECT      (blue_female.cnt * 100.0 / total_female.cnt) AS percentage FROM blue_female, total_female;	superhero
SELECT s.superhero_name, r.race  FROM superhero s  JOIN race r ON s.race_id = r.id  WHERE s.full_name = 'Charles Chandler';	superhero
SELECT g.gender  FROM superhero s  JOIN gender g ON s.gender_id = g.id  WHERE s.superhero_name = 'Agent 13';	superhero
SELECT s.super_name  FROM superhero s  INNER JOIN hero_power hp ON s.id = hp.hero_id  INNER JOIN superpower sp ON hp.power_id = sp.id  WHERE sp.power_name = 'Adaptation';	superhero
SELECT COUNT(*) AS power_count  FROM hero_power  WHERE hero_id = (     SELECT id      FROM superhero      WHERE superhero_name = 'Amazo' );	superhero
SELECT power_name FROM superhero h JOIN hero_power hp ON h.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE h.full_ename = 'Hunter Zolomon';	superhero
SELECT s.height_cm  FROM superhero s  JOIN colour c ON s.eye_colour_id = c.id  WHERE c.colour = 'Amber';	superhero
SELECT sh.superhero_name  FROM superhero sh JOIN colour c1 ON sh.eye_colour_id = c1.id JOIN colour c2 ON sh.hair_colour_id = c2.id WHERE c1.colour = 'Black' AND c2.colour = 'Black';	superhero
SELECT c2.colour AS eye_colour FROM superhero s JOIN colour c1 ON s.skin_color_id = c1.id JOIN colour c2 ON s.eye_color_id = c2.id WHERE c1.colour = 'Gold';	superhero
SELECT sh.full_name FROM superhero sh JOIN race r ON sh.race_id = r.id WHERE r.name = 'Vampire';	superhero
SELECT s.superhero_name  FROM superhero s  JOIN alignment a ON s.alignment_id = a.id  WHERE a.alignment_name = 'Neutral';	superhero
SELECT COUNT(*) FROM hero_attribute  WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength')  AND attribute_value = (     SELECT MAX(attribute_value)      FROM hero_attribute      WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength') );	superhero
SELECT r.race_name AS Race, a.alignment_name AS Alignment  FROM superhero s  JOIN race r ON s.race_id = r.id  JOIN alignment a ON s.alignment_id = a.id  WHERE s.superhero_name = 'Cameron Hicks';	superhero
SELECT      (COUNT(CASE WHEN s.gender = 'Female' THEN 1 END) * 100.0 / COUNT(*)) AS female_percentage FROM      superhero s JOIN      publisher p ON s.publisher_id = p.id WHERE      p.publisher_name = 'Marvel Comics';	superhero
SELECT AVG(superhero.weight_kg) AS average_weight FROM superhero  INNER JOIN race ON superhero.race_id = race.id  WHERE race.race = 'Alien';	superhero
SELECT (SUM(s.weight_kg) WHERE s.full_name = 'Emil Blonsky') - (SUM(s.weight_kg) WHERE s.full_name = 'Charles Chandler') AS weight_difference FROM superhero s;	superhero
SELECT AVG(height_cm) AS average_height FROM superhero;	superhero
SELECT id FROM superhero WHERE superhero_name = 'Abomination';	superhero
SELECT COUNT(*) FROM superhero WHERE race_id = 21 AND gender_id = 1;	superhero
SELECT s.superhero_name  FROM superhero s  JOIN hero_attribute ha ON s.id = ha.hero_id  WHERE ha.attribute_id = 3  GROUP BY s.id  HAVING MAX(ha.attribute_value) = (     SELECT MAX(ha(attribute_value))      FROM hero_attribute      WHERE attribute_id = 3 );	superhero
SELECT COUNT(*) FROM superhero WHERE alignment_id = 3;	superhero
SELECT a.attribute_name, ha.attribute_value  FROM superhero sh  INNER JOIN hero_attribute ha ON sh.id = ha.hero_id  INNER JOIN attribute a ON ha.attribute_id = a.id  WHERE sh.superhero_name = '3-';	superhero
SELECT superhero.superhero_name  FROM superhero  JOIN colour AS eye_colour ON superhero.eye_colour_id = eye_colour.id  JOIN colour AS hair_colour ON superhero.hair_colour_id = hair_colour.id  WHERE eye_colour.colour = 'Blue' AND hair Colour.colour = 'Brown';	superhero
SELECT p.publisher_name  FROM publisher p  JOIN superhero s ON s.publisher_id = p.id  WHERE s.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy');	superhero
SELECT COUNT(*) FROM superhero WHERE publisher_id = 1;	superhero
SELECT (COUNT(superhero.id) / (SELECT COUNT(*) FROM superhero)) * 100.0 AS percentage_blue_eyes  FROM superhero  WHERE eye_colour_id = 7;	superhero
SELECT      COUNT(CASE WHEN gender_id = 1 THEN 1 END) / COUNT(CASE WHEN gender_id = 2 THEN 1 END) AS ratio FROM superhero;	superhero
SELECT superhero_name, height_ cm FROM superhero ORDER BY height_ cm DESC LIMIT 1;	superhero
SELECT id FROM superpower WHERE power_name = 'cryokinesis';	superhero
SELECT superhero_name FROM superhero WHERE id = 294;	superhero
SELECT full_name  FROM superhero  WHERE weight_kg IS NULL OR weight_kg = 0;	superhero
SELECT c.colour  FROM superhero s  JOIN colour c ON s.eye_colour_id = c.id  WHERE s.full_name = 'Karen Beecher-Duncan';	superhero
SELECT sp.power_name  FROM superhero h  JOIN hero_power hp ON h.id = hp.hero_id  JOIN superpower sp ON hp.power_id = sp.id  WHERE h.full_name = 'Helen Parr';	superhero
SELECT r.name AS Race FROM superhero s JOIN race r ON s.race_id = r.id WHERE s.height_cm = 188 AND s.weight_kg = 90;	superhero
SELECT p.publisher_name  FROM publisher p  INNER JOIN superhero s ON p.id = s.publisher_id  WHERE s.id = 38;	superhero
SELECT s.race  FROM superhero s  JOIN hero_attribute ha ON s.id = ha.hero_id  WHERE ha.attribute_value = (SELECT MAX(ha2.attribute_value) FROM hero_attribute ha2);	superhero
SELECT      sh.name AS superhero_name,     a.alignment_name,     GROUP_CONCAT(sp.power_name ORDER BY sp.power_name) AS superpowers FROM      superhero sh LEFT JOIN      hero_power hp ON sh.id = hp.hero_id LEFT JOIN      superpower sp ON hp.power_id = sp.id JOIN      alignment a ON sh.alignment_id = a.id WHERE      sh.name = 'Atom IV' GROUP BY      sh.id, a.alignment_name;	superhero
SELECT s.full_name  FROM superhero s  JOIN colour c ON s.eye_Colour_id = c.id  WHERE c.colour = 'Blue';	superhero
SELECT AVG(ha.attribute_value) FROM superhero h JOIN hero_attribute ha ON h.id = ha.hero_id WHERE h.alignment_id = 3;	superhero
SELECT DISTINCT c.colour  FROM superhero s JOIN colour c ON s.skin_colour_id = c.id JOIN hero_attribute ha ON s.id = ha.hero_aid AND ha.attribute_value = 100;	superhero
SELECT COUNT(*) FROM superhero WHERE alignment_id = 1 AND gender_id = 2;	superhero
SELECT DISTINCT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value BETWEEN 75 AND 80;	superhero
SELECT race.race  FROM superhero  JOIN gender ON superhero.gender_id = gender.id  JOIN colour ON superhero.hair_colour_id = colour.id  JOIN race ON superhero.race_id = race.id  WHERE gender.gender = 'male' AND colour.colour = 'blue';	superhero
SELECT      (         COUNT(CASE WHEN gender_id = 2 THEN 1 ELSE NULL END) * 100.0 / COUNT(*)     ) AS percentage_female_bad_superheroes FROM superhero WHERE alignment_id = 2;	superhero
SELECT      COUNT(CASE WHEN t1.eye_colour_id = 7 THEN 1 END) - COUNT(CASE WHEN t1.eye_colour_id = 1 THEN 1 END) AS difference FROM superhero t1 JOIN colour ON t1.eye_colour_id = colour.id WHERE t1.weight_kg = 0 OR t1.weight_kg IS NULL;	superhero
SELECT ha.attribute_value  FROM hero_attribute ha  JOIN attribute a ON ha.attribute_id = a.id  JOIN superhero s ON ha.hero_id = s.id  WHERE a.attribute_name = 'Strength' AND s.superhero_name = 'Hulk';	superhero
SELECT sp.power_name FROM superhero s  JOIN hero_power hp ON s.id = hp.hero_id  JOIN superpower sp ON hp.power_id = sp.id  WHERE s.superhero_name = 'Ajax';	superhero
SELECT COUNT(*)  FROM superhero  JOIN colour ON superhero.skin_ colour_id = colour.id  JOIN alignment ON superhero.alignment_id = alignment.id  WHERE colour.colour = 'Green' AND alignment.alignment = 'Bad';	superhero
SELECT COUNT(*) FROM superhero  JOIN gender ON superhero.gender_id = gender.id  JOIN publisher ON superhero.publisher_id = publisher.id  WHERE gender.ename = 'Female' AND publisher.publisher_ename = 'Marvel Comics';	superhero
SELECT s.superhero_ename  FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Wind Control' ORDER BY s.superhero_ename;	superhero
SELECT g.gender  FROM superhero h  JOIN hero_power hp ON h.id = hp.hero_id  JOIN superpower sp ON hp.power_id = sp.id  JOIN gender g ON h.gender_id = g.id  WHERE sp.power_name = 'Phoenix Force';	superhero
SELECT s.superhero_name  FROM superhero s  INNER JOIN publisher p ON s.publisher_id = p.id  WHERE p.publisher_name = 'DC Comics'  ORDER BY s.weight_ kg DESC  LIMIT 1;	superhero
SELECT AVG(s.height_cm) AS average_height  FROM superhero s  JOIN race r ON s.race_id = r.id  JOIN publisher p ON s.publisher_id = p.id  WHERE r.race != 'Human' AND p.publisher_name = 'Dark Horse Comics';	superhero
SELECT COUNT(*) FROM hero_attribute WHERE attribute_id = 3 AND attribute_value = 100;	superhero
SELECT      (COUNT(CASE WHEN p.publisher_name = 'DC Comics' THEN 1 END)) AS dc_count,     (COUNT(CASE WHEN p.publisher_name = 'Marvel Comics' THEN 1 END)) AS marvel_count,     (dc_count - marvel_count) AS difference FROM superhero s JOIN publisher p ON s.publisher_id = p.id;	superhero
SELECT a.attribute_name  FROM attribute a  JOIN hero_attribute ha ON a.id = ha.attribute_id  WHERE ha.hero_id = (SELECT id FROM superhero WHERE superhero_name = 'Black Panther')  ORDER BY ha.attribute_value ASC  LIMIT 1;	superhero
SELECT colour FROM colour  JOIN superhero ON colour.id = superhero.eyeColour_id  WHERE superhero.superhero_name = 'Abomination';	superhero
SELECT superhero_name, MAX(height_cm) FROM superhero ORDER BY height_cm DESC LIMIT 1;	superhero
SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler';	superhero
SELECT      (COUNT(CASE WHEN gen.name = 'Female' THEN 1 END) * 100.0 / COUNT(*)) AS female_percentage FROM      superhero sup JOIN      publisher pub ON sup.publisher_id = pub.id JOIN      gender gen ON sup.gender_id = gen.id WHERE      pub.publisher_name = 'George Lucas';	superhero
SELECT      (SUM(CASE WHEN a.alignment_name = 'Good' THEN 1 ELSE 0 END) / COUNT(s.id)) * 100.0 AS good_percentage FROM      superhero s JOIN      publisher p ON s.publisher_id = p.id JOIN      alignment a ON s.alignment_id = a.id WHERE      p.publisher_name = 'Marvel Comics';	superhero
SELECT COUNT(*) FROM superhero WHERE full_ename LIKE 'John%';	superhero
SELECT DISTINCT ha.hero_id FROM hero_attribute ha WHERE ha.attribute_value = (     SELECT MIN(ha2.attribute_value)     FROM hero_attribute ha2 );	superhero
SELECT s.full_name FROM superhero s JOIN race r ON s.race_id = r.id WHERE r.name = 'Alien';	superhero
SELECT sh.full_name FROM superhero sh  JOIN colour c ON sh.eye_colour_id = c.id  WHERE sh.weight_kg < 100 AND c.colour = 'Brown';	superhero
SELECT ha.attribute_value  FROM hero_attribute ha  JOIN superhero s ON ha.hero_id = s.id  WHERE s.name = 'Aquababy';	superhero
SELECT weight_ kg AS weight, r.name AS race FROM superhero s JOIN race r ON s.race_id = r.id WHERE s.id = 40;	superhero
SELECT AVG(s.height_cm) AS average_height FROM superhero s  JOIN alignment a ON s.alignment_id = a.id  WHERE a.power_name = 'Neutral';	superhero
SELECT DISTINCT s.id AS hero_id FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Intelligence';	superhero
SELECT colour.colour FROM colour  INNER JOIN superhero ON colour.id = superhero.eye_colour_id  WHERE superhero.superhero_name = 'Blackwulf';	superhero
SELECT p.power_name FROM superpower p JOIN hero_power hp ON p.id = hp.power_id WHERE hp.hero_id IN (     SELECT s.id     FROM superhero s     WHERE s.height_cm > (SELECT 0.8 * AVG(s.height_cm) FROM superhero) );	superhero
SELECT d.driverRef  FROM qualifying q  JOIN drivers d ON q.driverId = d.driverId  WHERE q.raceId = 20  ORDER BY q.q1 DESC  LIMIT 5;	formula_1
SELECT d.surname  FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.raceId = 19 ORDER BY q.q2 ASC LIMIT 1;	formula_1
SELECT DISTINCT r.year  FROM races r  INNER JOIN circuits c ON r.circuitId = c.circuitId  WHERE c.location = 'Shanghai';	formula_1
SELECT url FROM circuits WHERE name = 'Circuit de Barcelona-Catalunya';	formula_1
SELECT races.raceName  FROM races  JOIN circuits ON races.circuitId = circuits.circuitId  WHERE circuits.country = 'Germany';	formula_1
SELECT c.circuitId, c.name AS circuit_name, c.location, c.city  FROM circuits c JOIN circuit_constructor cc ON c.circuitId = cc.circuitId JOIN constructors co ON cc.constructorId = co.constructorId WHERE co.name = 'Renault';	formula_1
SELECT COUNT(r.resultId) AS NumberOfRaces FROM races r JOIN circuits c ON r.circuitId = c.circuitId JOIN countries co ON c.countryId = co.countryId WHERE r.year = 2010 AND co.region NOT IN ('Asia', 'Europe');	formula_1
SELECT r.raceName  FROM races r  JOIN circuits c ON r.circuitId = c.circuitId  JOIN countries co ON c.countryId = co.id  WHERE co.name = 'Spain';	formula_1
SELECT c.lat, c.lng  FROM circuits c  JOIN races r ON c.circuitId = r.circuitId  WHERE r.name = 'Australian Grand Prix';	formula_1
SELECT url FROM circuits WHERE name = 'Sepang International Circuit';	formula_1
SELECT races.time FROM races  JOIN circuits ON races.circuitId = circuits.circuitId  WHERE circuits.name = 'Sepang International Circuit';	formula_1
SELECT c.lat, c.lng  FROM races r  JOIN circuits c ON r.circuitId = c.circuitId  WHERE r.raceName = 'Abu Dhabi Grand Prix';	formula_1
SELECT c.nationality  FROM constructors c  JOIN results r ON c.constructorId = r.constructorId  WHERE r.raceId = 24 AND r.points = 1;	formula_1
SELECT q.q1  FROM qualifying q  JOIN drivers d ON q.driverId = d.driverId  WHERE q.raceId = 354 AND d.forename = 'Bruno' AND d.surname = 'Senna';	formula_1
SELECT nationality FROM drivers WHERE driverId = (SELECT driverId FROM qualifying WHERE raceId = 355 AND q2 = '0:01:40');	formula_1
SELECT number  FROM qualifying  WHERE raceId = 903  AND q3 LIKE '01:54%';	formula_1
SELECT COUNT(r.driverId) AS NumberOfDrivers FROM results r JOIN races ra ON r.raceId = ra.raceId WHERE ra.name = 'Bahrain Grand Prix' AND YEAR(ra.date) = 2007 AND r.time IS NULL;	formula_1
SELECT r.year AS SeasonYear,         r.raceId,         r.name AS RaceName,         r.date,         d.driverId,         CONCAT(d.forename, ' ', d.surname) AS DriverName,         d.nationality,         c.constructorId,         c.name AS Team,         res.grid,         res.position,         res.points,         res.laps,         res.time,         res.fastestLap,         s.status FROM races r JOIN results res ON r.raceId = res.raceId JOIN drivers d ON res.driverId = d.driverId JOIN constructors c ON res.constructorId = c.constructorId JOIN status s ON res.statusId = s.statusId WHERE r.year = (SELECT year FROM races WHERE raceId = 901) ORDER BY r.raceId, res.positionOrder;	formula_1
SELECT COUNT(DISTINCT r.driverId) AS NumberOfFinishers FROM results r JOIN races ra ON r.raceId = ra.raceId WHERE ra.date = '2015-11-29' AND r.time IS NOT NULL;	formula_1
SELECT d.name  FROM results r  JOIN drivers d ON r.driverId = d.driverId  WHERE r.raceId = 592 AND r.time IS NOT NULL ORDER BY d.dob ASC  LIMIT 1;	formula_1
SELECT drivers.url  FROM lap_times  JOIN drivers ON lap_times.driverId = drivers.driverId  WHERE lap_times.raceId = 161 AND lap_times.time = '0:01:27';	formula_1
SELECT d.nationality  FROM drivers d  JOIN results r ON d.driverId = r.driverId  WHERE r.raceId = 933 AND r.fastestLapSpeed = (     SELECT MAX(fastestLapSpeed)      FROM results      WHERE raceId = 933 );	formula_1
SELECT circuits.lat, circuits.lng  FROM races  JOIN circuits ON races.circuitId = circuits.circuitId  WHERE races.name = 'Malaysian Grand Prix';	formula_1
SELECT constructorId  FROM constructorResults  WHERE raceId = 9 AND points = (SELECT MAX(points) FROM constructorResults WHERE raceId = 9)	formula_1
SELECT q.q1  FROM qualifying q  JOIN drivers d ON q.driverId = d.driverId  WHERE d.name = 'Lucas di Grassi' AND q.raceId = 345;	formula_1
SELECT d.nationality  FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.raceId = 347 AND q.q2 = '0:01:15';	formula_1
SELECT code  FROM drivers  WHERE driverId = (     SELECT driverId      FROM qualifying      WHERE raceId = 45 AND q3 LIKE '1:33%' );	formula_1
SELECT r.time  FROM results r  JOIN drivers d ON r.driverId = d.driverId  WHERE r.raceId = 743 AND d.name = 'Bruce McLaren';	formula_1
SELECT d.forename, d.surname  FROM races r  JOIN results re ON r.raceId = re.raceId  JOIN drivers d ON re.driverId = d.driverId  WHERE r.circuit = 'San Marino' AND r.year = 2006 AND re.position = 2;	formula_1
SELECT year FROM races WHERE raceId = 901;	formula_1
SELECT COUNT(*) AS NumberOfNonFinishers FROM results JOIN races ON results.raceId = races.raceId WHERE races.date = '2015/11/29' AND statusId != 1;	formula_1
SELECT d.driverId, d.forename, d.surname, MAX(d.dob)  FROM results AS r  JOIN drivers AS d ON r.driverId = d.driverId  WHERE r.raceId = 872 AND r.time IS NOT NULL  ORDER BY d.dob DESC  LIMIT 1;	formula_1
SELECT d.FirstName AS 'Driver', r.FastestLapTime AS 'Fastest Lap Time' FROM Results r JOIN Drivers d ON r.DriverId = d.Id WHERE r.RaceId = 348 ORDER BY r.FastestLapTime ASC LIMIT 1;	formula_1
SELECT nationality  FROM drivers  JOIN results ON drivers.driverId = results.driverId  WHERE fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results);	formula_1
WITH paul_dires_driver AS (     SELECT driverid      FROM drivers      WHERE forename = 'Paul' AND surname = 'di Resta' ), race_speeds AS (     SELECT          r1.raceid AS race853,         r1.fastestlapspeed AS speed853,         r2.raceid AS race854,         r2.fastestlapspeed AS speed854     FROM results r1     LEFT JOIN results r2 ON r2.raceid = 854 AND r1.driverid = r2.driverid     WHERE r1.raceid = 853 AND r1.driverid IN (SELECT driverid FROM paul_dires_driver) ) SELECT      ((speed853 - speed854) * 100 / speed853) AS percentage_faster FROM race_speeds;	formula_1
SELECT      races.date,     COUNT(CASE WHEN results.time IS NOT NULL THEN 1 END) / COUNT(results.resultId) AS completion_rate FROM      results JOIN      races ON results.raceId = races.raceId WHERE      races.date = '1983-07-16' GROUP BY      races.raceId;	formula_1
SELECT MIN(year) FROM races WHERE name = 'Singapore Grand Prix';	formula_1
SELECT * FROM races WHERE year = 2005 ORDER BY name DESC;	formula_1
SELECT name FROM races WHERE year = (     SELECT MIN(year)     FROM races ) AND month = (     SELECT MIN(month)     FROM races     WHERE year = (         SELECT MIN(year)         FROM races     ) );	formula_1
SELECT name, date FROM races WHERE year = 1999 AND round = (SELECT MAX(round) FROM races WHERE year = 1999);	formula_1
SELECT year FROM races GROUP BY year ORDER BY MAX(round) DESC LIMIT 1;	formula_1
SELECT name FROM races  WHERE year = 2017  AND circuit_id NOT IN (SELECT circuit_id FROM races WHERE year = 2000);	formula_1
SELECT c.country AS Country, c.location AS Location FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.name LIKE '%European Grand Prix%' ORDER BY r.year ASC LIMIT 1;	formula_1
SELECT MAX(year) AS last_year  FROM races  WHERE raceName = 'British Grand Prix';	formula_1
SELECT COUNT(DISTINCT r.year) AS NumberOfSeasons  FROM races r  JOIN circuits c ON r.circuitId = c.circuitId  WHERE r.name = 'British Grand Prix' AND c.name = 'Silverstone';	formula_1
SELECT      d.forename || ' ' || d.surname AS driver_name FROM      results r JOIN      drivers d ON r.driverId = d.driverId WHERE      r.raceId = (SELECT raceId FROM races WHERE year = 2010 AND name = 'Singapore Grand Prix') ORDER BY      r.position;	formula_1
SELECT d.forename, d.surname, r.total_points FROM drivers d JOIN (     SELECT driverId, SUM(points) AS total_points     FROM results     GROUP BY driverId ) r ON d.driverId = r.driverId ORDER BY r.total_points DESC LIMIT 1;	formula_1
SELECT d.forename || ' ' || d.surname AS Driver, r.points FROM races ra JOIN results r ON ra.raceId = r.raceId JOIN drivers d ON r.driverId = d.driverId WHERE ra.year = 2017 AND ra.circuitId = (SELECT circuitId FROM circuits WHERE name LIKE '%Shanghai%') ORDER BY r.points DESC LIMIT 3;	formula_1
SELECT d.forename, d.surname, r.name FROM results res JOIN drivers d ON res.driverId = d.driverId JOIN races r ON res.raceId = r.raceId WHERE res.milliseconds = (     SELECT MIN(res2.milliseconds)     FROM results res2 ) LIMIT 1;	formula_1
SELECT AVG(laps.milliseconds) AS average_lap_time  FROM laps  JOIN drivers ON laps.driverId = drivers.driverId  JOIN races ON laps.raceId = races.raceId  WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'  AND races.name = 'Malaysian Grand Prix' AND races.year = 2009;	formula_1
SELECT      (         (SELECT COUNT(r1.raceId) FROM results r1 JOIN drivers d1 ON r1.driverId = d1.driverId WHERE d1.surname = 'Hamilton' AND r1.position > 1 AND r1.raceId IN (SELECT raceId FROM races WHERE year >= 2010))          / NULLIF((SELECT COUNT(r2.raceId) FROM results r2 JOIN drivers d2 ON r2.driverId = d2.driverId WHERE d2.surname = 'Hamilton' AND r2.raceId IN (SELECT raceId FROM races WHERE year >= 2010)), 0)     ) * 100 AS percentage	formula_1
SELECT d.driverId, d.forename, d.surname, d.nationality, MAX(r.points) AS max_points, COUNT(CASE WHEN r.position = 1 THEN 1 END) AS total_wins  FROM drivers d  JOIN results r ON d.driverId = r.driverId  GROUP BY d.driverId, d.forename, d.surname, d.nationality  ORDER BY total_wins DESC  LIMIT 1;	formula_1
SELECT forename, surname, YEAR(CURRENT_TIMESTAMP) - YEAR(dob) AS age FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1;	formula_1
SELECT c.name FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.year BETWEEN 1990 AND 2000 GROUP BY c.circuitId HAVING COUNT(*) = 4;	formula_1
SELECT c.name AS circuit_name, c.location, r.name AS race_name  FROM circuits c  JOIN races r ON c.circuitId = r.circuitId  WHERE c.country = 'USA' AND r.year = 2006;	formula_1
SELECT races.raceName AS race_name, circuits.name AS circuit_name, circuits.location  FROM races  INNER JOIN circuits ON races.circuitId = circuits.circuitId  WHERE MONTH(races.date) = 9 AND YEAR(races.date) = 2005;	formula_1
SELECT r.raceId  FROM drivers d  JOIN results r ON d.driverId = r.driverId  WHERE d.forename = 'Alex' AND d.surname = 'Yoong' AND r.position < 20;	formula_1
SELECT COUNT(DISTINCT r.raceId) AS winCount  FROM results res  JOIN races r ON res.raceId = r.raceId  JOIN circuits c ON r.circuitId = c.circuitId  WHERE c.name = 'Sepang International Circuit'  AND res.driverId = (     SELECT driverId FROM drivers WHERE name = 'Michael Schumacher' )  AND res.points = (     SELECT MAX(points)      FROM results      WHERE raceId = res.raceId );	formula_1
SELECT races.raceName AS Race, races.year AS Year  FROM results  JOIN drivers ON results.driverId = drivers.driverId  JOIN races ON results.raceId = races.raceId  WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher'  ORDER BY results.fastestLap ASC  LIMIT 1;	formula_1
SELECT AVG(r.points) AS AveragePoints FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races race ON r.raceId = race.raceId WHERE d.forename = 'Eddie' AND d.surname = 'Irvine' AND YEAR(race.date) = 2000;	formula_1
SELECT r.name AS race_name, res.points  FROM results res  JOIN races r ON res.raceId = r.raceId  WHERE res.driverId = (     SELECT d.driverId      FROM drivers d      WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' )  AND r.year = (     SELECT MIN(r.year)      FROM results res2      JOIN races r ON res2.raceId = r.raceId      WHERE res2.driverId = (         SELECT d.driverId          FROM drivers d          WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton'     ) );	formula_1
SELECT r.raceName AS Race, r.date AS Date, c.country AS Country  FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.year = 2017 ORDER BY r.date;	formula_1
WITH max_per_race AS (     SELECT raceId, MAX(laps) as max_laps     FROM results     GROUP BY raceId ), global_max AS (     SELECT MAX(max_laps) as gmax     FROM max_per_race ) SELECT r.name, r.year, c.location FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.raceId IN (SELECT raceId FROM max_per_race WHERE max_laps = (SELECT gmax FROM global_max));	formula_1
SELECT ROUND((COUNT(CASE WHEN country = 'Germany' THEN 1 END) / COUNT(*)) * 100, 2) AS percentage FROM races WHERE name = 'European Grand Prix';	formula_1
SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit';	formula_1
SELECT MAX(lat) AS highest_latitude FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring');	formula_1
SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit';	formula_1
SELECT country FROM circuits ORDER BY alt DESC LIMIT 1;	formula_1
SELECT COUNT(*) FROM drivers WHERE code IS NULL;	formula_1
SELECT nationality  FROM drivers  WHERE dob = (SELECT MIN(dob) FROM drivers);	formula_1
SELECT surname FROM drivers WHERE nationality = 'Italian';	formula_1
SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson';	formula_1
SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton';	formula_1
SELECT c.circuitName  FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.year = 2009 AND r.name LIKE '%Spanish%';	formula_1
SELECT DISTINCT YEAR(races.date) AS year  FROM races  JOIN circuits ON circuits.circuit_id = races.circuit_id  WHERE circuits.name = 'Silverstone';	formula_1
SELECT c.name AS circuit_name, r.year, r.name AS race_name, r.date, d.forename, d.surname, co.constructor_name, res.grid, res.position, res.points, res.laps, res.time, stat.status  FROM circuits c  JOIN races r ON c.circuitId = r.circuitId  JOIN results res ON r.raceId = res.raceId  JOIN drivers d ON res.driverId = d.driverId  JOIN constructors co ON res.constructorId = co.constructorId  JOIN status stat ON res.statusId = stat.statusId  WHERE c.name = 'Silverstone';	formula_1
SELECT COALESCE(r.time, 'Unknown') AS race_time  FROM races r  JOIN circuits c ON r.circuitId = c.circuitId  WHERE YEAR(r.date) = 2010 AND c.name = 'Abu Dhabi';	formula_1
SELECT COUNT(*) AS NumberOfRaces  FROM races r  JOIN circuits c ON r.circuitId = c.circuitId  WHERE c.country = 'Italy';	formula_1
SELECT date FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Barcelona-Catalunya';	formula_1
SELECT c.url  FROM circuits c  JOIN races r ON c.circuitId = r.circuitId  WHERE r.name = 'Spanish GP' AND YEAR(r.date) = 2009;	formula_1
SELECT MIN(r.fastestLapTime) AS FastestLapTime  FROM results r  JOIN drivers d ON r.driverId = d.driverId  WHERE d.name LIKE 'Lewis Hamilton';	formula_1
SELECT d.forename, d.surname  FROM drivers d  JOIN results r ON d.driverId = r.driverId  WHERE r.fastestLapSpeed = (     SELECT MAX(fastestLapSpeed)      FROM results      WHERE fastestLapSpeed IS NOT NULL );	formula_1
SELECT d.driverRef  FROM results res  JOIN races r ON res.raceId = r.raceId  JOIN drivers d ON res.driverId = d.driverId  WHERE r.name = 'Canadian Grand Prix'  AND r.year = 2007  AND res.positionOrder = 1;	formula_1
SELECT races.raceId, races.year, races.round, races.circuitId, races.name AS raceName  FROM results  JOIN races ON results.raceId = races.raceId  WHERE driverId = 4;	formula_1
SELECT races.name AS race_name, races.date AS race_date FROM results INNER JOIN drivers ON results.driverId = drivers.driverId INNER JOIN races ON results.raceId = races.raceId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY results.rank ASC LIMIT 1;	formula_1
SELECT MAX(fastestLapSpeed) AS max_fastest_lap_speed  FROM results res  JOIN races r ON res.raceId = r.raceId  WHERE r.name = 'Spanish Grand Prix' AND r.year = 2009;	formula_1
SELECT DISTINCT year  FROM races  JOIN results ON races.raceId = results.raceId  JOIN drivers ON results.driverId = drivers.driverId  WHERE drivers.name = 'Lewis Hamilton';	formula_1
SELECT positionOrder  FROM results  WHERE driverId = (     SELECT driverId      FROM drivers      WHERE forename = 'Lewis' AND surname = 'Hamilton' )  AND raceId = (     SELECT raceId      FROM races      WHERE name = 'Chinese Grand Prix' AND year = 2008 );	formula_1
SELECT d.forename, d.surname  FROM results r  JOIN drivers d ON r.driverId = d.driverId  WHERE r.raceId = (     SELECT raceId      FROM races      WHERE year = 1989 AND circuit = 'Adelaide' )  AND r.grid = 4;	formula_1
SELECT COUNT(DISTINCT r.driverId) AS finishedDriversCount  FROM results r  WHERE r.raceId = (     SELECT raceId      FROM races      WHERE name = 'Australian Grand Prix' AND year = 2008 )  AND r.time IS NOT NULL;	formula_1
SELECT dr.driverRef AS driver_name,        res.fastestLapTime AS fastest_lap_time,        TIME_TO_SEC(res.fastestLapTime) AS fastest_lap_seconds FROM results res JOIN drivers dr ON res.driverId = dr.driverId WHERE res.raceId IN (     SELECT ra.raceId     FROM races ra     JOIN circuits ci ON ra.circuitId = ci.circuitId     WHERE YEAR(ra.date) = 2008 AND ci.circuitRef = 'melbourne' ) AND dr.driverRef = 'hamilton' ORDER BY fastest_lap_seconds ASC LIMIT 1;	formula_1
SELECT time FROM results  JOIN races ON results.raceId = races.raceId  WHERE races.year = 2008 AND races.name = 'Chinese Grand Prix' AND positionText = '2';	formula_1
SELECT d.driverId AS champion_id, d.name AS champion_name, d.url AS bio_url FROM results r JOIN races ra ON r.raceId = ra.raceId JOIN drivers d ON r.driverId = d.driverId WHERE ra.year = 2008 AND ra.name = 'Australian Grand Prix' AND r.position = 1;	formula_1
SELECT COUNT(DISTINCT r.driverId) AS british_drivers_count  FROM results r  JOIN races ra ON r.raceId = ra.raceId  JOIN drivers d ON r.driverId = d.driverId  WHERE ra.year = 2008 AND ra.name = 'Australian Grand Prix' AND d.nationality = 'British';	formula_1
SELECT COUNT(DISTINCT r.driverId) AS participatedDriversCount  FROM results r  WHERE r.raceId IN (     SELECT raceId      FROM races      WHERE year = 2008 AND name = 'Chinese Grand Prix' ) AND r.statusId = 1  AND EXISTS (     SELECT 1      FROM results r2      WHERE r2.driverId = r.driverId      GROUP BY r2.driverId      HAVING COUNT(r2.raceId) > 1 );	formula_1
SELECT SUM(points) AS TotalPoints FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE d.name = 'Lewis Hamilton';	formula_1
SELECT      AVG(         CAST(             SUBSTRING(fastestLapTime, 1, CHARINDEX(':', fastestLapTime) - 1) AS INT         ) * 60 +          CAST(             SUBSTRING(                 fastestLapTime,                 CHARINDEX(':', fastestLapTime) + 1,                 LEN(fastestLapTime) - CHARINDEX('.', fastestLapTime)             ) AS INT         ) +          CAST(             SUBSTRING(                 fastestLapTime,                  CHARINDEX('.', fastestLapTime) + 1,                  3             ) AS FLOAT         ) / 1000     ) AS average_fastest_lap_time_seconds FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE name LIKE 'Lewis Hamilton')	formula_1
SELECT ROUND((COUNT(CASE WHEN time IS NOT NULL THEN driverId END) / COUNT(DISTINCT driverId)) * 100, 2) AS completion_rate FROM results r JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 2008 AND ra.circuitName = 'Australian Grand Prix';	formula_1
-- Create a helper function to parse time strings into seconds DELIMITER $$  CREATE FUNCTION parse_time(time_str VARCHAR(255)) RETURNS INT DETERMINISTIC BEGIN     DECLARE hours INT;     DECLARE minutes INT;     DECLARE seconds INT;      SET hours = SUBSTRING_INDEX(SUBSTRING_INDEX(time_str, ':', 1), ':', -1);     SET minutes = SUBSTRING_INDEX(SUBSTRING_INDEX(time_str, ':', 2), ':', -1);     SET seconds = SUBSTRING_INDEX(time_str, ':', -1);      RETURN hours * 3600 + minutes * 60 + seconds; END$$  DELIMITER ;  -- Calculate the percentage improvement SELECT      ((last_time - first_time) / last_time) * 100 AS percentage_improvement FROM (     SELECT          parse_time((SELECT time FROM results WHERE raceid = r.raceid AND position=1)) AS first_time,         parse_time((SELECT time FROM results WHERE raceid = r.raceid AND position=(SELECT MAX(position) FROM results WHERE raceid=r.raceid))) AS last_time     FROM races r     WHERE r.year = 2008 AND r.name LIKE '%Australian%Grand%Prix' ) AS times;	formula_1
SELECT COUNT(*) FROM circuits WHERE country = 'Australia' AND location = 'Adelaide';	formula_1
SELECT DISTINCT lat, lng FROM circuits WHERE country = 'USA';	formula_1
SELECT COUNT(*) FROM drivers WHERE nationality = 'British' AND YEAR(dob) > 1980;	formula_1
SELECT MAX(R.points) AS maximum_points  FROM constructors C  JOIN results R ON C.constructorId = R.constructorId  WHERE C.nationality = 'British';	formula_1
SELECT c.constructorName AS Constructor, SUM(r.points) AS TotalPoints  FROM results r  JOIN constructors c ON r.constructorId = c.constructorId  GROUP BY c.constructorName  ORDER BY TotalPoints DESC  LIMIT 1;	formula_1
SELECT DISTINCT c.name FROM constructors c JOIN results r ON c.constructorId = r.constructorId WHERE r.raceId = 291 AND r.points = 0;	formula_1
SELECT COUNT(*) FROM (     SELECT c.constructorId, c.name      FROM constructors c     JOIN results r ON c.constructorId = r.constructorId     WHERE c.nationality = 'Japanese'     GROUP BY c.constructorId, c.name     HAVING COUNT(DISTINCT r.raceId) = 2 AND SUM(r.points) = 0 ) AS japanese_constructors_with_zero_points;	formula_1
SELECT DISTINCT c.name  FROM constructors c  JOIN results r ON c.constructorId = r.constructorId  WHERE r.position = 1;	formula_1
SELECT COUNT(DISTINCT c.constructorId) AS french_constructors_over_50_laps FROM constructors c JOIN results r ON c.constructorId = r.constructorId WHERE c.nationality = 'French' AND r.laps > 50;	formula_1
SELECT (COUNT(CASE WHEN r.time IS NOT NULL THEN 1 ELSE NULL END) / COUNT(*) * 100) AS completion_percentage FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE d.nationality = 'Japanese' AND ra.year BETWEEN 2007 AND 2009;	formula_1
SELECT race.year,        AVG(TIME_TO_SEC(result.time)) AS avg_time_seconds FROM results AS result JOIN races AS race ON result.raceId = race.raceId WHERE race.year < 1975   AND result.statusId = 1 GROUP BY race.year;	formula_1
SELECT DISTINCT d.forename, d.surname  FROM drivers AS d  INNER JOIN results AS r ON d.driverId = r.driverId  WHERE YEAR(d.dob) > 1975 AND r.rank = 2;	formula_1
SELECT COUNT(DISTINCT d.driverId) AS NumberOfItalianDrivers FROM Drivers d JOIN Results r ON d.driverId = r.driverId WHERE d.nationality = 'Italian' AND r.time IS NULL;	formula_1
SELECT d.forename, d.surname  FROM drivers d  JOIN results r ON d.driverId = r.driverId  WHERE r.fastestLapTime = (     SELECT MIN(fastestLapTime) FROM results );	formula_1
WITH champion AS (     SELECT driver_id     FROM results r     JOIN races ra ON r.race_id = ra.race_id     WHERE ra.year = 2009     GROUP BY driver_id     ORDER BY SUM(r.points) DESC     LIMIT 1 ) SELECT r.fastestLap FROM results r JOIN races ra ON r.race_id = ra.race_id WHERE ra.year = 2009 AND r.driver_id = (SELECT driver_id FROM champion) ORDER BY r.fastestLapTime ASC LIMIT 1;	formula_1
SELECT AVG(CAST(r.fastestLAPspeed AS FLOAT))  FROM results r JOIN races ra ON r.raceId = ra.raceId WHERE ra.name = 'Spanish Grand Prix' AND ra.year = 2009;	formula_1
SELECT r.name AS race_name, r.year AS race_year  FROM races r  JOIN results res ON r.raceId = res.raceId  WHERE res.milliseconds IS NOT NULL  GROUP BY r.raceId  HAVING MIN(res.milliseconds)  LIMIT 1;	formula_1
SELECT      ((COUNT(DISTINCT r.driverId) / (         SELECT COUNT(DISTINCT driverId)         FROM results AS res         JOIN races AS rac ON res.raceId = rac.raceId         WHERE rac.year BETWEEN 2000 AND 2005     )) * 100) AS percentage FROM      results AS r JOIN      races AS race ON r.raceId = race.raceId JOIN      drivers AS d ON r.driverId = d.driverId WHERE      race.year BETWEEN 2000 AND 2005     AND YEAR(d.dob) < 1985     AND r.laps > 50;	formula_1
SELECT COUNT(DISTINCT d.driverId) AS french_drivers_with_fast_lap FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE d.nationality = 'French' AND (     TIME_TO_SEC(q.q1) < 120     OR TIME_TO_SEC(q.q2) < 120     OR TIME_TO_SEC(q.q3) < 120 );	formula_1
SELECT driverId AS code FROM drivers WHERE nationality = 'America';	formula_1
SELECT raceId FROM races WHERE year = 2009;	formula_1
SELECT COUNT(DISTINCT driverId) AS NumberOfDrivers FROM results WHERE raceId = 18;	formula_1
SELECT COUNT(*) AS NumberOfDutchYoungestDrivers  FROM drivers  WHERE nationality = 'Dutch'  AND YEAR(dob) = (     SELECT MAX(YEAR(dob))      FROM drivers );	formula_1
SELECT driverRef FROM drivers WHERE firstName = 'Robert' AND lastName = 'Kubica';	formula_1
SELECT COUNT(*) FROM drivers WHERE nationality = 'British' AND YEAR(dob) = 1980;	formula_1
SELECT d.driverId, d.forename, d.surname, MIN(r.fastestLap) AS best_lap_time FROM drivers AS d JOIN results AS r ON d.driverId = r.driverId WHERE d.nationality = 'German'   AND YEAR(d.dob) BETWEEN 1980 AND 1990 GROUP BY d.driverId, d.forename, d.surname ORDER BY best_lap_time ASC LIMIT 3;	formula_1
SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY dob ASC LIMIT 1;	formula_1
(   SUBSTRING_INDEX(fastestLapTime, ':', 1) * 60 +   CAST(SUBSTRING_INDEX(fastestLapTime, ':', -1) AS DECIMAL(5,3)) )	formula_1
WITH DriverLapTimes AS (     SELECT          d.driverId,         d.forename,         d.surname,         d.nationality,         d.dob,         MAX(lt.time) AS maxLapTime     FROM drivers d     JOIN lap_times lt ON d.driverId = lt.driverId     WHERE d.nationality = 'Spanish' AND YEAR(d.dob) < 1982     GROUP BY d.driverId, d.forename, d.surname, d.nationality, d.dob ) SELECT      driverId,     forename,     surname,     nationality,     dob,     maxLapTime FROM DriverLapTimes ORDER BY maxLapTime DESC LIMIT 10;	formula_1
SELECT races.year  FROM races  JOIN results ON races.raceId = results.raceId  WHERE results.fastestLapTime IS NOT NULL  ORDER BY results.fastestLapTime ASC  LIMIT 1;	formula_1
SELECT r.year AS Year, MAX(CAST(SUBSTRING(res.time FROM 1 FOR 2) AS INT) * 3600 + CAST(SUBSTRING(res.time FROM 4 FOR 2) AS INT) * 60 + CAST(SUBSTRING(res.time FROM 7) AS INT)) AS SlowestLapTime FROM results res JOIN races r ON res.raceId = r.raceId GROUP BY r.year ORDER BY SlowestLapTime DESC LIMIT 1;	formula_1
SELECT driverId FROM results GROUP BY driverId ORDER BY MIN(fastestLapTime) DESC LIMIT 5;	formula_1
SELECT COUNT(*) FROM results WHERE raceId > 50 AND raceId < 100 AND time IS NOT NULL AND statusId = 2;	formula_1
SELECT c.name AS circuit_name, c.location, c.lat, c.lng, COUNT(r.raceId) AS race_count  FROM circuits c  JOIN races r ON c.circuitId = r.circuitId  WHERE c.country = 'Austria'  GROUP BY c.circuitId;	formula_1
SELECT raceId, COUNT(raceId) AS finishers_count FROM results WHERE time IS NOT NULL GROUP BY raceId ORDER BY finishers_count DESC LIMIT 1;	formula_1
SELECT d.driverRef AS reference_name, d.nationality, d.dob  FROM drivers d  JOIN qualifying q ON d.driverId = q.driverId  WHERE q.raceId = 23 AND q.q2 IS NOT NULL;	formula_1
WITH YoungestDriver AS (     SELECT driverId      FROM drivers      ORDER BY dob DESC      LIMIT 1 ) SELECT races.year, races.date, races.name  FROM qualifying  JOIN races ON qualifying.raceId = races.raceId  WHERE driverId = (SELECT driverId FROM YoungestDriver)  ORDER BY races.date ASC  LIMIT 1;	formula_1
SELECT COUNT(DISTINCT d.driverId) AS american_puncture_drivers FROM results r JOIN status s ON r.statusId = s.statusId JOIN drivers d ON r.driverId = d.driverId WHERE s.status = 'Puncture' AND d.nationality = 'American';	formula_1
SELECT c.url  FROM constructors c WHERE c.id = (     SELECT constructorId      FROM results      WHERE constructorId IN (SELECT id FROM constructors WHERE nationality = 'Italian')     GROUP BY constructorId      ORDER BY SUM(points) DESC      LIMIT 1 );	formula_1
SELECT c.url  FROM constructors c  WHERE c.constructorId = (     SELECT constructorId      FROM (         SELECT r.constructorId, COUNT(CASE WHEN position = 1 THEN 1 END) AS total_wins          FROM results r          GROUP BY r.constructorId     ) AS wins      WHERE total_wins = (         SELECT MAX(total_wins)          FROM (             SELECT r.constructorId, COUNT(CASE WHEN position = 1 THEN 1 END) AS total_wins              FROM results r              GROUP BY r.constructorId         )     ) );	formula_1
SELECT r.driverId AS slowest_driver  FROM results r  JOIN races ra ON r.raceId = ra.raceId  WHERE ra.name = 'French Grand Prix'  GROUP BY r.driverId  HAVING MAX(r.time);	formula_1
SELECT raceId, MIN(milliseconds) AS fastest_lap FROM results GROUP BY raceId ORDER BY fastest_lap ASC LIMIT 1;	formula_1
WITH parsed_times AS (     SELECT          CAST(             SUBSTRING(fastestTime, 1, CHARINDEX(':', fastestTime) - 1)             AS INT         ) * 60 +          CAST(             REPLACE(SUBSTRING(fastestTime, CHARINDEX(':', fastestTime) + 1, LEN(fastestTime)), '.', '')             AS FLOAT         ) / 1000 AS total_seconds     FROM results     WHERE raceId = (SELECT TOP 1 raceId FROM races ORDER BY raceDate DESC) ), averaged_time AS (     SELECT          AVG(total_seconds) AS avg_total_sec     FROM parsed_times ) SELECT      RIGHT('0' + CAST(CAST(avg_total_sec / 60 AS INT) AS VARCHAR(2)), 2) + ':' +     RIGHT('0' + CAST(CAST(avg_total_sec % 60 AS INT) AS VARCHAR(2)), 2) + '.' +     RIGHT('000' + CAST(CAST((avg_total_sec % 60 - FLOOR(avg_total_sec % 60)) * 1000 AS INT) AS VARCHAR(3)), 3) FROM averaged_time;	formula_1
SELECT * FROM drivers WHERE dob BETWEEN '1980-01-01' AND '1985-12-31';	formula_1
SELECT      CONCAT(d.forename, ' ', d.surname) AS Champion,     r.time AS FinishTime FROM      races ra JOIN      results r ON ra.raceId = r.raceId JOIN      drivers d ON r.driverId = d.driverId WHERE      ra.name = 'Canadian Grand Prix'     AND ra.year = 2008     AND r.position = 1;	formula_1
SELECT c.constructorRef AS constructor_reference_name, c.url AS website FROM races r JOIN results res ON r.raceId = res.raceId JOIN constructors c ON res.constructorId = c.constructorId WHERE r.year = 2009 AND r.circuit = 'singapore' AND res.positionOrder = 1;	formula_1
SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND YEAR(dob) BETWEEN 1981 AND 1991;	formula_1
SELECT forename || ' ' || surname AS full_name, url AS wikipedia_url, dob  FROM drivers  WHERE nationality = 'German' AND YEAR(dob) BETWEEN 1971 AND 1985  ORDER BY dob DESC;	formula_1
SELECT location, country, lat, lng FROM circuits WHERE name = 'Hungaroring';	formula_1
SELECT      C.constructorId AS score,     C.name AS team_name,     C.nationality FROM races R JOIN results Res ON R.raceId = Res.raceId JOIN constructors C ON Res.constructorId = C.constructorId WHERE R.name = 'Monaco Grand Prix' AND R.year BETWEEN 1980 AND 2010 GROUP BY C.constructorId, C.name, C.nationality ORDER BY SUM(Res.points) DESC LIMIT 1;	formula_1
SELECT AVG(points) AS average_score  FROM results  JOIN races ON results.raceId = races.raceId  JOIN circuits ON races.circuitId = circuits.circuitId  WHERE circuits.circuitRef = 'istanbul'  AND driverId IN (SELECT driverId FROM drivers WHERE driverRef = 'hamilton');	formula_1
WITH annual_races AS (     SELECT          YEAR(date) AS race_year,         COUNT(*) AS races_per_year     FROM races     WHERE date BETWEEN '2000-01-01' AND '2010-12-31'     GROUP BY race_year ) SELECT AVG(races_per_year) AS average_races_per_year FROM annual_races;	formula_1
SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(nationality) DESC LIMIT 1;	formula_1
WITH DriverPoints AS (     SELECT          r.driverId,         SUM(r.points) AS total_points     FROM          results r     WHERE          r.statusId != 0     GROUP BY          r.driverId ), RankedDrivers AS (     SELECT          driverId,         RANK() OVER (ORDER BY total_points DESC) AS points_rank     FROM          DriverPoints ) SELECT      COUNT(*) AS victories_count FROM      results r JOIN      RankedDrivers rd ON r.driverId = rd.driverId WHERE      rd.points_rank = 91 AND r.points = 25;	formula_1
SELECT races.name FROM results JOIN races ON results.raceId = races.raceId WHERE results.fastestLapTime = (SELECT MIN(fastestLapTime) FROM results);	formula_1
SELECT      CONCAT(c.location, ', ', c.country) AS full_location  FROM      circuits c  WHERE      c.circuitId = (         SELECT circuitId          FROM races          WHERE date = (             SELECT MAX(date)              FROM races         )     );	formula_1
SELECT CONCAT(d.forename, ' ', d.surname) AS fullName  FROM qualifying q  JOIN races r ON q.raceId = r.raceId  JOIN circuits c ON r.circuitId = c.circuitId  JOIN drivers d ON q.driverId = d.driverId  WHERE c.circuitName = 'Marina Bay Street Circuit' AND r.year = 2008  GROUP BY d.driverId  HAVING MIN(q.q3);	formula_1
SELECT      d.forename || ' ' || d.surname AS full_name,     d.nationality,     r.name AS first_race FROM      drivers d JOIN      results re ON d.driverId = re.driverId JOIN      races r ON re.raceId = r.raceId WHERE      d.dob = (SELECT MAX(dob) FROM drivers) ORDER BY      r.date ASC LIMIT 1;	formula_1
SELECT MAX(accidentCount) AS maxAccidents FROM (     SELECT COUNT(*) AS accidentCount      FROM results      WHERE statusId = 3 AND raceId IN (SELECT raceId FROM races WHERE name = 'Canadian Grand Prix')      GROUP BY driverId );	formula_1
SELECT      CONCAT(d.forename, ' ', d.surname) AS fullName,     COUNT(r.resultId) AS numberOfWins FROM drivers d LEFT JOIN results r ON d.driverId = r.driverId WHERE d.dob = (     SELECT MIN(dob) FROM drivers ) AND r.positionText = '1' AND r.statusId IN (SELECT statusId FROM status WHERE status LIKE 'Finished') GROUP BY d.driverId;	formula_1
SELECT MAX(duration) FROM pit_stops;	formula_1
SELECT MIN(fastestLapTime) AS Fastest_Lap_Time FROM results;	formula_1
SELECT MAX(duration) AS max_pit_stop_duration  FROM pit_stops  WHERE driverId = (SELECT driverId FROM drivers WHERE name = 'Lewis Hamilton');	formula_1
SELECT ps.lap  FROM pit_stops ps JOIN results r ON ps.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 2011 AND ra.raceName = 'Australian Grand Prix' AND r.driverId = (     SELECT d.driverId      FROM drivers d      WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' );	formula_1
SELECT r.driverId, SUM(ps.duration) AS TotalPitTime FROM results r JOIN pit_stops ps ON r.raceId = ps.raceId AND r.driverId = ps.driverId WHERE r.raceId IN (     SELECT raceId      FROM races      WHERE year = 2011      AND circuitId = (         SELECT circuitId          FROM circuits          WHERE name = 'Albert Park'     ) ) GROUP BY r.driverId;	formula_1
SELECT MIN(fastestLapTime) AS Fastest_Lap_Record FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE name LIKE '%Hamilton%') AND statusId = 1;	formula_1
DELIMITER $$  CREATE FUNCTION calculate_total_ms(time_str VARCHAR(50)) RETURNS INT DETERMINISTIC BEGIN     DECLARE minutes_part INT;     DECLARE rest_of_string VARCHAR(50);     DECLARE seconds_part INT;     DECLARE ms_part INT;      -- Extract the minutes part if colon is present     IF LOCATE(':', time_str) > 0 THEN         SET minutes_part = CAST(SUBSTRING_INDEX(time_str, ':', 1) AS UNSIGNED);         SET rest_of_string = SUBSTRING(time_str FROM LOCATE(':', time_str) + 1);     ELSE         SET minutes_part = 0;         SET rest_of_string = time_str;     END IF;      -- Extract seconds and milliseconds from the remaining string     IF LOCATE('.', rest_of_string) > 0 THEN         SET seconds_part = CAST(SUBSTRING_INDEX(rest_of_string, '.', 1) AS UNSIGNED);         SET ms_part = CAST(SUBSTRING_INDEX(rest_of_string, '.', -1) AS UNSIGNED);     ELSE         SET seconds_part = CAST(rest_of_string AS UNSIGNED);         SET ms_part = 0;     END IF;      -- Calculate total milliseconds     RETURN minutes_part * 60 * 1000 + seconds_part * 1000 + ms_part; END$$  DELIMITER ;	formula_1
SELECT position AS final_position FROM results WHERE driverId = 1 AND CAST(fastestLapTime AS FLOAT) = (     SELECT MIN(CAST(fastestLapTime AS FLOAT))     FROM results     WHERE driverId = 1 );	formula_1
SELECT      MIN(races.raceId) AS race_id,     MAX(races.year) AS year,     results.milliseconds / 1000.0 AS lap_time_seconds FROM      races JOIN      results ON races.raceId = results.raceId WHERE      races.circuit = 'Austrian Grand Prix Circuit' ORDER BY      lap_time_seconds ASC LIMIT 1;	formula_1
SELECT c.name AS CircuitName, MIN(r.time) AS FastestLapTime  FROM circuits c  JOIN races r ON c.circuitId = r.circuitId  WHERE c.country = 'Italy' AND r.time IS NOT NULL  GROUP BY c.circuitId, c.name;	formula_1
SELECT r.name AS race_name, MIN(results.fastestLapTime) AS fastest_lap_time FROM results JOIN races r ON results.raceId = r.raceId WHERE r.circuitId IN (     SELECT c.circuitId      FROM circuits c      WHERE c.name = 'Austrian Grand Prix' ) GROUP BY r.raceId ORDER BY fastest_lap_time ASC LIMIT 1;	formula_1
SELECT SUM(duration) AS total_pit_stop_duration FROM pit_stops  WHERE raceId = (SELECT raceId FROM races WHERE name = 'Austrian Grand Prix')  AND driverId = (     SELECT driverId FROM lap_times      WHERE raceId = (SELECT raceId FROM races WHERE name = 'Austrian Grand Prix')      ORDER BY time LIMIT 1 );	formula_1
SELECT c.lat, c.lng  FROM circuits c  JOIN races r ON c.circuitId = r.circuitId  JOIN results re ON r.raceId = re.raceId  WHERE re.time = '1:29.488';	formula_1
SELECT AVG(milliseconds) AS average_pit_stop_time FROM pit_stops WHERE driverId = 1;	formula_1
SELECT AVG(l.time) AS avg_lap_time FROM laps l JOIN races r ON l.raceId = r.raceId JOIN circuits c ON r.circuitId = c.circuitId WHERE c.country = 'Italy';	formula_1
SELECT player_api_id FROM Player WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player);	european_football_2
SELECT name, MAX(height) AS tallest_height FROM Player GROUP BY name ORDER BY tallest_height DESC LIMIT 1;	european_football_2
SELECT preferred_foot FROM Player WHERE potential = (SELECT MIN(potential) FROM Player);	european_football_2
SELECT COUNT(*) FROM Player WHERE overall_rating >= 60 AND overall_rating < 65 AND defensive_work_rate = 'low';	european_football_2
SELECT      p.player_api_id AS player_id,     MAX(m.cross) AS max_crossing FROM      Match m JOIN      Player p ON (         m.home_player_1 = p.player_api_id OR          m.home_player_2 = p.player_api_id OR          m.home_player_3 = p.player_api_id OR          m.home_player_4 = p.player_api_id OR          m.home_player_5 = p.player_api_id OR          m.home_player_6 = p.player_api_id OR          m.home_player_7 = p.player_api_id OR          m.home_player_8 = p.player_api_id OR          m.home_player_9 = p.player_api_id OR          m.home_player_10 = p.player_api_id OR          m.home_player_11 = p.player_api_id OR          m.away_player_1 = p.player_api_id OR          m.away_player_2 = p.player_api_id OR          m.away_player_3 = p.player_api_id OR          m.away_player_4 = p.player_api_id OR          m.away_player_5 = p.player_api_id OR          m.away_player_6 = p.player_api_id OR          m.away_player_7 = p.player_api_id OR          m.away_player_8 = p.player_api_id OR          m.away_player_9 = p.player_api_id OR          m.away_player_10 = p.player_api_id OR          m.away_player_11 = p.player_api_id     ) GROUP BY      p.player_api_id ORDER BY      max_crossing DESC LIMIT 5;	european_football_2
SELECT l.league_name  FROM League l  JOIN (     SELECT league_id, MAX(SUM(home_team_goal + away_team_goal)) AS total_goals      FROM Match      WHERE season = '2015/2016'      GROUP BY league_id ) m ON l.league_id = m.league_id  ORDER BY total_goals DESC  LIMIT 1;	european_football_2
SELECT home_team_name, COUNT(*) AS losses FROM Match  WHERE home_team_goal < away_team_goal AND season = '2015/2016'  GROUP BY home_team_name  ORDER BY losses ASC  LIMIT 1;	european_football_2
SELECT player_name, penalties FROM Player ORDER BY penalties DESC LIMIT 10;	european_football_2
SELECT Team.team_long_name, COUNT(*) as win_count FROM Match JOIN Team ON Match.away_team_api_id = Team.team_api_id WHERE Match.league_1 = 'Scotland Premier League' AND Match.season = '2009/2010' AND Match.away_team_goal > Match.home_team_goal GROUP BY Team.team_long_name ORDER BY win_count DESC LIMIT 1;	european_football_2
SELECT team_api_id, buildUpPlaySpeed FROM Team ORDER BY buildUpPlaySpeed DESC LIMIT 4;	european_football_2
WITH league_draw_counts AS (     SELECT          l.league_name,         COUNT(*) AS total_draws     FROM          Match m     JOIN          League l ON m.league_id = l.league_id     WHERE          m.season = '2015/2016' AND m.home_team_goal = m.away_team_goal     GROUP BY          l.league_name ) SELECT      league_name FROM      league_draw_counts WHERE      total_draws = (SELECT MAX(total_draws) FROM league_draw_counts);	european_football_2
SELECT DISTINCT p.player_name,                 (SUBDATE(DATETIME(), p.birthday)) AS age FROM Player p JOIN Match m ON p.team_api_id = m.home_team_api_id OR p.team_api_id = m.away_team_api_id WHERE p.sprint_speed >= 97 AND YEAR(m.date) BETWEEN '2013' AND '2015';	european_football_2
SELECT L.name AS name_of_league, CNT.count AS total_matches FROM (     SELECT league_id, COUNT(league_id) AS count      FROM Match      GROUP BY league_id ) AS CNT JOIN League AS L ON CNT.league_id = L.id WHERE CNT.count = (     SELECT MAX(count)     FROM (         SELECT COUNT(league_id) AS count          FROM Match          GROUP BY league_id     ) AS max_counts );	european_football_2
SELECT AVG(height) AS average_height FROM Player WHERE birthday >= '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00';	european_football_2
WITH  player_ratings AS (     -- Home players 1-10     SELECT home_player_1 as player_id, home_player_1_rating as rating FROM Match WHERE substr(date, 1, 4) = '2010'     UNION ALL     SELECT home_player_2 as player_id, home_player_2_rating as rating FROM Match WHERE substr(date, 1, 4) = '2010'     UNION ALL     SELECT home_player_3 as player_id, home_player_3_rating as rating FROM Match WHERE substr(date, 1, 4) = '2010'     UNION ALL     SELECT home_player_4 as player_id, home_player_4_rating as rating FROM Match WHERE substr(date, 1, 4) = '2010'     UNION ALL     SELECT home_player_5 as player_id, home_player_5_rating as rating FROM Match WHERE substr(date, 1, 4) = '2010'     UNION ALL     SELECT home_player_6 as player_id, home_player_6_rating as rating FROM Match WHERE substr(date, 1, 4) = '2010'     UNION ALL     SELECT home_player_7 as player_id, home_player_7_rating as rating FROM Match WHERE substr(date, 1, 4) = '2010'     UNION ALL     SELECT home_player_8 as player_id, home_player_8_rating as rating FROM Match WHERE substr(date, 1, 4) = '2010'     UNION ALL     SELECT home_player_9 as player_id, home_player_9_rating as rating FROM Match WHERE substr(date, 1, 4) = '2010'     UNION ALL     SELECT home_player_10 as player_id, home_player_10_rating as rating FROM Match WHERE substr(date, 1, 4) = '2010'     -- Away players 1-10     UNION ALL     SELECT away_player_1 as player_id, away_player_1_rating as rating FROM Match WHERE substr(date, 1, 4) = '2010'     UNION ALL     SELECT away_player_2 as player_id, away_player_2_rating as rating FROM Match WHERE substr(date, 1, 4) = '2010'     UNION ALL     SELECT away_player_3 as player_id, away_player_3_rating as rating FROM Match WHERE substr(date, 1, 4) = '2010'     UNION ALL     SELECT away_player_4 as player_id, away_player_4_rating as rating FROM Match WHERE substr(date, 1, 4) = '2010'     UNION ALL     SELECT away_player_5 as player_id, away_player_5_rating as rating FROM Match WHERE substr(date, 1, 4) = '2010'     UNION ALL     SELECT away_player_6 as player_id, away_player_6_rating as rating FROM Match WHERE substr(date, 1, 4) = '2010'     UNION ALL     SELECT away_player_7 as player_id, away_player_7_rating as rating FROM Match WHERE substr(date, 1, 4) = '2010'     UNION ALL     SELECT away_player_8 as player_id, away_player_8_rating as rating FROM Match WHERE substr(date, 1, 4) = '2010'     UNION ALL     SELECT away_player_9 as player_id, away_player_9_rating as rating FROM Match WHERE substr(date, 1, 4) = '2010'     UNION ALL     SELECT away_player_10 as player_id, away_player_10_rating as rating FROM Match WHERE substr(date, 1, 4) = '2010' ), player_max_ratings AS (     SELECT player_id, MAX(rating) as max_rating      FROM player_ratings      GROUP BY player_id ) SELECT pr.player_id  FROM player_max_ratings pr WHERE pr.max_rating = (SELECT MAX(max_rating) FROM player_max_ratings);	european_football_2
SELECT team_apis_id FROM Team WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60;	european_football_2
SELECT T.team_long_name FROM Team T WHERE T.team_api_id IN (     SELECT M.home_team_away_team_api_id     FROM Match M     WHERE strftime('%Y', date) = '2012'       AND M.buildUpPlayPassing > (           SELECT AVG(buildUpPlayPassing)           FROM Match           WHERE strftime('%Y', date) = '2012'             AND buildUpPlayPassing IS NOT NULL       )     GROUP BY home_team_away_team_api_id );	european_football_2
SELECT      (SUM(CASE WHEN preferred_foot = 'left' THEN 1 ELSE 0 END) * 100.0 / COUNT(player_fifa_api_id)) AS percentage_left_foot FROM      Player WHERE      YEAR(birthday) BETWEEN 1987 AND 1992;	european_football_2
SELECT      l.league_name AS League,     SUM(m.home_team_goal + m.away_team_goal) AS Total_Goals FROM      Match m JOIN      League l ON m.league_id = l.id GROUP BY      m.league_id ORDER BY      Total_Goals ASC LIMIT 5;	european_football_2
SELECT      (SUM(long_shots) / COUNT(match_api_id)) AS average_long_shots FROM (     SELECT          match_api_id,          SUM(CASE              WHEN home_player_1 = player_api_id THEN long_shots ELSE 0 END +             CASE              WHEN home_player_2 = player_api_id THEN long_shots ELSE 0 END +             -- Continue similarly for home_player_3 to home_player_11             CASE              WHEN away_player_1 = player_api_id THEN long_shots ELSE 0 END +             -- Continue similarly for away_player_2 to away_player_11         ) AS long_shots     FROM          Match m     JOIN          Player p ON (p.player_api_id IN (             m.home_player_1, m.home_player_2, ..., m.home_player_11,             m.away_player_1, m.away_player_2, ..., m.away_player_11         ))     WHERE          p.player_name = 'Ahmed Samir Farag' ) AS all_participations;	european_football_2
SELECT      p.player_name,     (SUM(pa.heading_accuracy) / COUNT(pa.player_fifa_api_id)) AS average_heading_accuracy FROM     Player p JOIN     Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE     p.height > 180 GROUP BY     p.player_api_id, p.player_name ORDER BY     average_heading_accuracy DESC LIMIT 10;	european_football_2
SELECT      t.team_long_name,     SUM(m.chanceCreationPassing) / COUNT(m.id) AS avg_chance_creation_passing FROM      Match m JOIN      Team t ON m.home_team_api_id = t.team_api_id WHERE      t.buildUpPlayDribblingClass = 'Normal'     AND m.date >= '2014-01-01 00:00:00'     AND m.date <= '2014-01-31 00:00:00' GROUP BY      t.team_long_name HAVING      avg_chance_creation_passing < (         SELECT              SUM(chanceCreationPassing) / COUNT(id)         FROM              Match         WHERE              date >= '2014-01-01 00:00:00'             AND date <= '2014-01-31 00:00:00'     ) ORDER BY      avg_chance_creation_passing DESC;	european_football_2
SELECT l.name  FROM League l  JOIN Match m ON l.id = m.league_id  WHERE m.season = '2009/2010'  GROUP BY l.name  HAVING (SUM(m.home_team_goal) / COUNT(DISTINCT m.id)) > (SUM(m.away_team_goal) / COUNT(DISTINCT m.id));	european_football_2
SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers';	european_football_2
SELECT player_api_id, name FROM Player WHERE substr(birthday, 1, 7) = '1970-10';	european_football_2
SELECT pa.attacking_work_rate  FROM Player p  JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id  WHERE p.name = 'Franco Zennaro';	european_football_2
SELECT buildUpPlayPositioningClass FROM Team WHERE team_long_name = 'ADO Den Haag';	european_football_2
SELECT heading_accuracy FROM Player_Statistics  WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Francois Affolter')  AND date = '2014-09-18 00:00:00';	european_football_2
SELECT overall_rating  FROM Player_Attributes  WHERE player_api_id = 17459  AND strftime('%Y', date) = '2011';	european_football_2
SELECT COUNT(*) FROM Match JOIN League ON Match.league_id = League.id WHERE League.name = 'Scotland Premier League' AND season = '2015/2016';	european_football_2
SELECT preferred_foot  FROM Player  WHERE birthday = (SELECT MAX(birthday) FROM Player);	european_football_2
SELECT * FROM Player WHERE potential = (SELECT MAX(potential) FROM Player);	european_football_2
SELECT COUNT(*) FROM Player WHERE weight < 130 AND preferred_foot = 'left';	european_football_2
SELECT team_short_name FROM Team WHERE chance_creation_passing_class = 'Risky';	european_football_2
SELECT `defensive_work_rate` FROM `Player` WHERE `player_name` = 'David Wilson';	european_football_2
SELECT birthday FROM Player WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player);	european_football_2
SELECT l.name FROM League l JOIN Country c ON l.country_League = c.id WHERE c.name = 'Netherlands';	european_football_2
SELECT AVG(home_team_goal) AS average_home_goals  FROM Match  JOIN Country ON Match.country_id = Country.id  WHERE Country.name = 'Poland' AND Match.season = '2010/2011';	european_football_2
WITH MaxHeight AS (     SELECT TOP 1 player_name, finishing     FROM Player     WHERE height = (SELECT MAX(height) FROM Player) ), MinHeight AS (     SELECT TOP 1 player_name, finishing     FROM Player     WHERE height = (SELECT MIN(height) FROM Player) ) SELECT     CASE WHEN mh.finishing > msh.finishing THEN mh.player_name ELSE msh.player_name END as highest_avg_player,    CASE WHEN mh.finishing > msh.finishing THEN mh.finishing ELSE msh.finishing END as avg_rate FROM MaxHeight mh, MinHeight msh;	european_football_2
SELECT DISTINCT p.player_name  FROM (     SELECT home_player_1 AS player_id FROM Match     UNION ALL     SELECT home_player_2 AS player_id FROM Match     UNION ALL     SELECT home_player_3 AS player_id FROM Match     UNION ALL     SELECT home_player_4 AS player_id FROM Match     UNION ALL     SELECT home_player_5 AS player_id FROM Match     UNION ALL     SELECT home_player_6 AS player_id FROM Match     UNION ALL     SELECT home_player_7 AS player_id FROM Match     UNION ALL     SELECT home_player_8 AS player_id FROM Match     UNION ALL     SELECT home_player_9 AS player_id FROM Match     UNION ALL     SELECT home_player_10 AS player_id FROM Match     UNION ALL     SELECT home_player_11 AS player_id FROM Match     UNION ALL     SELECT away_player_1 AS player_id FROM Match     UNION ALL     SELECT away_player_2 AS player_id FROM Match     UNION ALL     SELECT away_player_3 AS player_id FROM Match     UNION ALL     SELECT away_player_4 AS player_id FROM Match     UNION ALL     SELECT away_player_5 AS player_id FROM Match     UNION ALL     SELECT away_player_6 AS player_id FROM Match     UNION ALL     SELECT away_player_7 AS player_id FROM Match     UNION ALL     SELECT away_player_8 AS player_id FROM Match     UNION ALL     SELECT away_player_9 AS player_id FROM Match     UNION ALL     SELECT away_player_10 AS player_id FROM Match     UNION ALL     SELECT away_player_11 AS player_id FROM Match ) m  JOIN Player p ON m.player_id = p.player_api_id  WHERE p.height > 180;	european_football_2
SELECT COUNT(*) FROM Player WHERE birthday >= '1990-01-01';	european_football_2
SELECT COUNT(*) FROM Player WHERE first_name = 'Adam' AND weight > 170;	european_football_2
SELECT first_name, last_name FROM Player WHERE strftime('%Y', date) BETWEEN '2008' AND '2010' AND overall_rating > 80;	european_football_2
SELECT potential FROM Player WHERE name = 'Aaron Doran';	european_football_2
SELECT name FROM Player WHERE preferred_foot = 'left';	european_football_2
SELECT team_long_name FROM Team WHERE buildUpPlaySpeedClass = 'Fast';	european_football_2
SELECT buildUpPlayPassingClass FROM Team WHERE team_short_name = 'CLB';	european_football_2
SELECT t.team_short_name FROM (     SELECT home_team_api_id AS team_api_id, home_buildUpPlayPassing AS value      FROM Match     UNION ALL     SELECT away_team_api_id AS team_api_id, away_buildUpPlayPassing AS value      FROM Match ) m JOIN Team t ON t.team_api_id = m.team_api_id GROUP BY t.team_api_id, t.team_short_name HAVING AVG(m.value) > 70;	european_football_2
SELECT      AVG(p.overall_rating) AS average_rating FROM (     SELECT home_player_1 FROM Match WHERE strftime('%Y', date) BETWEEN '2010' AND '2015'     UNION ALL     SELECT home_player_2 FROM Match WHERE strftime('%Y', date) BETWEEN '2010' AND '2015'     -- Continue similarly for home_player_3 to home_player_11 and away_player_1 to away_player_11     -- ... ) AS all_players JOIN Player p ON all_players.id = p.player_api_id WHERE p.height > 170;	european_football_2
SELECT player_name, height FROM Player WHERE height = (SELECT MIN(height) FROM Player);	european_football_2
SELECT `Country`.`country_name` FROM `League` INNER JOIN `Country` ON `League`.`country_id` = `Country`.`id` WHERE `League`.`name` = 'Italy Serie A';	european_football_2
SELECT team_short_name FROM Team WHERE buildUpPlaySpeed = 31 AND buildUpPlayDribbling = 53 AND buildUpPlayPassing = 32;	european_football_2
SELECT AVG(overall_rating) AS average_overall_rating FROM Player WHERE name_first = 'Aaron' AND name_last = 'Doran';	european_football_2
SELECT COUNT(*) FROM Match  JOIN League ON Match.league_id = League.id  WHERE League.name = 'Germany 1. Bundesliga' AND strftime('%Y-%m', date) BETWEEN '2008-08' AND '2008-10';	european_football_2
SELECT DISTINCT t.team_short_name FROM Team t INNER JOIN Match m ON t.team_api_id = m.home_team_api_id WHERE m.home_team_goal = 10;	european_football_2
SELECT * FROM Player  WHERE potential = 61 AND balance = (SELECT MAX(balance) FROM Player);	european_football_2
SELECT      (SUM(CASE WHEN player_name = 'Abdou Diallo' THEN ball_control ELSE 0 END) / COUNT(CASE WHEN player_name = 'Abdou Diallo' THEN id ELSE NULL END)) -     (SUM(CASE WHEN player_name = 'Aaron Appindangoye' THEN ball_control ELSE 0 END) / COUNT(CASE WHEN player_name = 'Aaron Appindangoye' THEN id ELSE NULL END))  FROM Player_Attributes;	european_football_2
SELECT team_long_name FROM Team WHERE team_short_name = 'GEN';	european_football_2
SELECT name, birth_date FROM Player WHERE name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birth_date ASC LIMIT 1;	european_football_2
SELECT * FROM Player WHERE height = (SELECT MAX(height) FROM Player);	european_football_2
SELECT COUNT(*) FROM Player WHERE preferred_foot = 'left' AND attacking_work_rate = 'low';	european_football_2
SELECT Country.name  FROM Country  JOIN League ON Country.id = League.country_id  WHERE League.name = 'Belgium Jupiler League';	european_football_2
SELECT l.name FROM League l JOIN Country c ON l.country_id = c.id WHERE c.name = 'Germany';	european_football_2
SELECT * FROM Player WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player);	european_football_2
SELECT DISTINCT COUNT(player_api_id) FROM Player WHERE strftime('%Y', birthday) < '1986' AND defensive_work_rate = 'high';	european_football_2
SELECT player_name, MAX(crossing) AS best_crossing FROM Player_Attributes  WHERE player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone')  GROUP BY player_name  ORDER BY best_crossing DESC;	european_football_2
SELECT      (SUM(COALESCE(ha.player_headings_accuracy_1, 0) + COALESCE(ha.player_headings_accuracy_2, 0) + ... + COALESCE(ha.player_headings_accuracy_11, 0) +          COALESCE(aa.player_headings_accuracy_1, 0) + COALESCE(aa.player_headings_accuracy_2, 0) + ... + COALESCE(aa.player_headings_accuracy_11, 0)) /       (COUNT(CASE WHEN ha.home_player_1 = p.player_api_id THEN 1 ELSE NULL END) +        COUNT(CASE WHEN ha.home_player_2 = p.player_api_id THEN 1 ELSE NULL END) + ... +        COUNT(CASE WHEN aa.away_player_1 = p.player_api_id THEN 1 ELSE NULL END) + ... )) AS average_heading_accuracy FROM      Player p LEFT JOIN      Match m ON p.player_api_id IN (m.home_player_1, m.home_player_2, ..., m.away_player_11) WHERE      p.name = 'Ariel Borysiuk';	european_football_2
SELECT COUNT(*)  FROM Player  WHERE height > 180  AND volleys > 70;	european_football_2
SELECT player_name FROM Player WHERE volleys > 70 AND dribbling > 70;	european_football_2
SELECT COUNT(*) AS total_matches FROM Match m  JOIN Country c ON m.country_id = c.id  WHERE c.name = 'Belgium' AND m.date BETWEEN '2008-07-01' AND '2010-06-30';	european_football_2
SELECT long_passing FROM Player WHERE birthday = (SELECT MIN(birthday) FROM Player);	european_football_2
SELECT COUNT(*) FROM Match  JOIN League ON Match.league_id = League.id  WHERE League.name = 'Belgium Jupiler League' AND SUBSTR(Match.date, 1, 7) = '2009-04';	european_football_2
SELECT l.league_name FROM Match m JOIN League l ON m.league_id = l.league_id WHERE m.season = '2008/2009' GROUP BY l.league_name ORDER BY COUNT(*) DESC LIMIT 1;	european_football_2
SELECT ROUND(SUM(overall_rating) / COUNT(id), 2) AS average_overall_rating  FROM Player  WHERE strftime('%Y', birthday) < '1986';	european_football_2
SELECT ((a.overall_rating - b.overall_rating) / b.overall_rating * 100) AS percentage_higher  FROM Player a, Player b  WHERE a.player_name = 'Ariel Borysiuk' AND b.player_name = 'Paulin Puel';	european_football_2
SELECT AVG(buildUpPlaySpeed) AS avg_build_up_speed FROM Match m1 JOIN Team t1 ON m1.home_team_api_id = t1.team_api_id WHERE t1.team_long_name = 'Heart of Midlothian'  UNION ALL  SELECT AVG(buildUpPlaySpeed) AS avg_build_up_speed FROM Match m2 JOIN Team t2 ON m2.away_team_api_id = t2.team_api_id WHERE t2.team_long_name = 'Heart of Midlothian';	european_football_2
SELECT AVG(overall_rating) FROM Player WHERE player_name = 'Pietro Marino';	european_football_2
SELECT      SUM(crossing) AS total_crossing FROM      Match WHERE      (home_team_away_team_goal = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennox'))     OR (away_team_home_team_goal = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennox'));	european_football_2
SELECT MAX(chanceCreationPassing) AS max_chance_creation_passing, chanceCreationPassingClass  FROM TeamMetrics  WHERE team_long_name = 'Ajax';	european_football_2
SELECT preferred_foot FROM Player WHERE player_name = 'Abdou Diallo';	european_football_2
SELECT MAX(pa.overall_rating) AS highest_overall_rating  FROM Player p  JOIN Player_Attributes pa ON p.player_ api_id = pa.player_api_id  WHERE p.player_name = 'Dorlan Pabon';	european_football_2
SELECT AVG(m.away_team_goal) AS average_goals FROM Match m WHERE m.away_team_api_id = (     SELECT t.team_api_id     FROM Team t     WHERE t.team_long_name = 'Parma' ) AND m.country = 'Italy';	european_football_2
SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.overall_rating = 77     AND pa.date LIKE '2016-06-23%' ORDER BY p.birthday ASC LIMIT 1;	european_football_2
SELECT p.overall_rating FROM Player p WHERE p.player_name = 'Aaron Mooy' AND (     SELECT COUNT(*)      FROM Matches m      WHERE m.date LIKE '2016-02-04%'      AND (m.home_player_1 = p.player_api_id           OR m.home_player_2 = p.player_api_id           OR ... -- Repeat for all home players 3 to 11          OR m.away_player_1 = p.player_api_id           OR ... -- Repeat for all away players 2 to 11     ) ) > 0;	european_football_2
SELECT p.player_potential FROM Player p WHERE p.player_name = 'Francesco Parravicini' AND (     SELECT COUNT(*)      FROM Match m     WHERE DATE(m.match_date) = '2010-08-30' AND (m.home_player_1 = p.player_api_id OR m.home_player_2 = p.player_api_id OR ... OR m.away_player_11 = p.player_api_id) ) > 0;	european_football_2
SELECT p.attacking_work_rate  FROM Player p  WHERE p.player_name = 'Francesco Migliore'  AND EXISTS (     SELECT 1      FROM Match m      WHERE m.date LIKE '2015-05-01%'      AND (m.home_player_1 = p.player_api_id OR m.home_player_2 = p.player_api_id OR m.home_player_3 = p.player_api_id OR m.home_player_4 = p.player_api_id OR m.home_player_5 = p.player_api_id OR m.home_player_6 = p.player_api_id OR m.home_player_7 = p.player_api_id OR m.home_player_8 = p.player_api_id OR m.home_player_9 = p.player_api_id OR m.home_player_10 = p.player_api_id OR m.home_player_11 = p.player_api_id      OR m.away_player_1 = p.player_api_id OR m.away_player_2 = p.player_api_id OR m.away_player_3 = p.player_api_id OR m.away_player_4 = p.player_api_id OR m.away_player_5 = p.player_api_id OR m.away_player_6 = p.player_api_id OR m.away_player_7 = p.player_api_id OR m.away_player_8 = p.player_api_id OR m.away_player_9 = p.player_api_id OR m.away_player_10 = p.player_api_id OR m.away_player_11 = p.player_api_id) );	european_football_2
SELECT p.defensive_work_rate  FROM Player p  JOIN Match m ON p.player_api_id = m.home_player_1 OR p.player_api_id = m.away_player_1 OR p.player_api_id = m.home_player_2 OR p.player_api_id = m.away_player_2 OR p.player_api_id = m.home_player_3 OR p.player_api_id = m.away_player_3 OR p.player_api_id = m.home_player_4 OR p.player_api_id = m.away_player_4 OR p.player_api_id = m.home_player_5 OR p.player_api_id = m.away_player_5 OR p.player_api_id = m.home_player_6 OR p.player_api_id = m.away_player_6 OR p.player_api_id = m.home_player_7 OR p.player_api_id = m.away_player_7 OR p.player_api_id = m.home_player_8 OR p.player_api_id = m.away_player_8 OR p.player_api_id = m.home_player_9 OR p.player_api_id = m.away_player_9 OR p.player_api_id = m.home_player_10 OR p.player_api_id = m.away_player_10 OR p.player_api_id = m.home_player_11 OR p.player_api_id = m.away_player_11  WHERE p.player_name = 'Kevin Berigaud' AND m.date = '2013-02-22 00:00:00';	european_football_2
WITH player_crossing AS (     SELECT         m.date,         CASE              WHEN home_player_1 = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant') THEN home_player_1_crossing             WHEN home_player_2 = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant') THEN home_player_2_crossing             WHEN home_player_3 = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant') THEN home_player_3_crossing             WHEN home_player_4 = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant') THEN home_player_4_crossing             WHEN home_player_5 = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant') THEN home_player_5_crossing             WHEN home_player_6 = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant') THEN home_player_6_crossing             WHEN home_player_7 = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant') THEN home_player_7_crossing             WHEN home_player_8 = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant') THEN home_player_8_crossing             WHEN home_player_9 = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant') THEN home_player_9_crossing             WHEN home_player_10 = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant') THEN home_player_10_crossing             WHEN home_player_11 = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant') THEN home_player_11_crossing             WHEN away_player_1 = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant') THEN away_player_1_crossing             WHEN away_player_2 = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant') THEN away_player_2_crossing             WHEN away_player_3 = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant') THEN away_player_3_crossing             WHEN away_player_4 = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant') THEN away_player_4_crossing             WHEN away_player_5 = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant') THEN away_player_5_crossing             WHEN away_player_6 = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant') THEN away_player_6_crossing             WHEN away_player_7 = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant') THEN away_player_7_crossing             WHEN away_player_8 = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant') THEN away_player_8_crossing             WHEN away_player_9 = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant') THEN away_player_9_crossing             WHEN away_player_10 = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant') THEN away_player_10_crossing             WHEN away_player_11 = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant') THEN away_player_11_crossing         END AS crossing,         m.date     FROM Match m ), max_crossing AS (     SELECT MAX(crossing) as max_cros     FROM player_crossing     WHERE crossing IS NOT NULL ) SELECT MIN(date) as first_max_date FROM player_crossing, max_crossing mc WHERE crossing = mc.max_cros;	european_football_2
SELECT ta.buildUpPlaySpeed FROM Team_Attributes ta JOIN Match m ON (ta.team_api_id = m.home_team_api_id OR ta.team_api_id = m.away_team_api_id) WHERE m.date = '2012-02-22' AND (m.home_team_long_name = 'Willem II' OR m.away_team_long_name = 'Willem II');	european_football_2
SELECT      m.date,     t.team_long_name AS home_team,     ta.buildUpPlay,     ta.buildUpPassing,     p.player_name,     p.dribbling  -- Assuming 'dribbling' is a column in Player table representing skill level FROM      Match m JOIN      Team_Attributes ta ON m.home_team_api_id = ta.team_api_id AND m.date = ta.date JOIN      Team t ON m.home_team_api_id = t.team_api_id LEFT JOIN      Player p ON m.player1 = p.player_api_id OR m.player2 = p.player_api_id -- Adjust according to actual player mapping columns WHERE      (m.home_team_api_id = 8549 OR m.away_team_api_id = 8549) AND m.date = '2015-09-10';	european_football_2
SELECT      CASE          WHEN t1.team_long_name = 'FC Lorient' THEN m.home_passing_accuracy_class         ELSE m.away_passing_accuracy_class     END AS build_up_play_passing_class FROM      Match m LEFT JOIN      Team t1 ON m.home_team_api_id = t1.team_api_id LEFT JOIN      Team t2 ON m.away_team_api_id = t2.team_api_id WHERE      (t1.team_long_name = 'FC Lorient' OR t2.team_long_name = 'FC Lorient')     AND date LIKE '2010-02-22%';	european_football_2
SELECT m.chance_creation_passing FROM Match AS m JOIN Team AS t1 ON m.home_team_api_id = t1.team_api_id JOIN Team AS t2 ON m.away_team_api_id = t2.team_api_id WHERE (t1.team_long_name = 'PEC Zwolle' OR t2.team_long_name = 'PEC Zwolle') AND date = '2013-09-20 00:00:00';	european_football_2
SELECT m.crossing FROM Match AS m  JOIN Team AS t ON m.home_team_api_id = t.team_api_id OR m.away_team_api_id = t.team_api_id  WHERE t.team_long_name = 'Hull City' AND m.date = '2010-02-22 00:00:00';	european_football_2
SELECT      CASE          WHEN home_team_api_id = (SELECT team_api_id FROM Team WHERE team_long_name = 'Hannover 96') THEN home_defense_aggression         ELSE away_defense_aggression     END AS defense_aggression_class FROM Match WHERE date LIKE '2015-09-10%' AND (home_team_api_id = (SELECT team_api_id FROM Team WHERE team_long_name = 'Hannover 96')  OR away_team_api_id = (SELECT team_api_id FROM Team WHERE team_long_name = 'Hannover 96'));	european_football_2
SELECT AVG(COALESCE(m.home_player_1_overall_rating, m.away_player_1_overall_rating)) AS avg_overall_rating FROM Match m JOIN Player p ON      (m.home_player_1 = p.player_api_id OR       m.home_player_2 = p.player_api_id OR       m.home_player_3 = p.player_api_id OR       m.home_player_4 = p.player_api_id OR       m.home_player_5 = p.player_api_id OR       m.home_player_6 = p.player_api_id OR       m.home_player_7 = p.player_api_id OR       m.home_player_8 = p.player_api_id OR       m.home_player_9 = p.player_api_id OR       m.home_player_10 = p.player_api_id OR       m.home_player_11 = p.player_api_id OR      m.away_player_1 = p.player_api_id OR       m.away_player_2 = p.player_api_id OR       m.away_player_3 = p.player_api_id OR       m.away_player_4 = p.player_api_id OR       m.away_player_5 = p.player_api_id OR       m.away_player_6 = p.player_api_id OR       m.away_player_7 = p.player_api_id OR       m.away_player_8 = p.player_api_id OR       m.away_player_9 = p.player_api_id OR       m.away_player_10 = p.player_api_id OR       m.away_player_11 = p.player_api_id) WHERE p.player_name = 'Marko Arnautovic' AND m.date BETWEEN '2007-02-22' AND '2016-04-21';	european_football_2
WITH donovan_rating AS (     SELECT overall_rating      FROM Player_Attributes      WHERE player_api_id IN (         SELECT p.player_api_id          FROM Match m          JOIN Player p ON m.home_player_1 = p.player_api_id          WHERE match_date = '2013-07-12'     ) AND date = '2013-07-12' ),  bowery_rating AS (     SELECT overall_rating      FROM Player_Attributes      WHERE player_api_id IN (         SELECT p.player_api_id          FROM Match m          JOIN Player p ON m.away_player_1 = p.player_api_id          WHERE match_date = '2013-07-12'     ) AND date = '2013-07-12' ) SELECT ((d.overall_rating - b.overall_rating) / d.overall_rating * 100) AS percentage FROM donovan_rating d, bowery_rating b;	european_football_2
SELECT name FROM Player WHERE height = (SELECT MAX(height) FROM Player);	european_football_2
SELECT pa.player_api_id FROM Player_Attributes pa GROUP BY pa.player_api_id ORDER BY MAX(pa.weight) DESC LIMIT 10;	european_football_2
SELECT player_apis_id FROM Player WHERE (strftime('%j', CURRENT_TIMESTAMP) - strftime('%j', birthday)) / 365 >= 34;	european_football_2
SELECT      COUNT(*) AS total_goals  FROM      Match m  JOIN      Player p ON m.home_player_1 = p.player_api_id  WHERE      p.player_name = 'Aaron Lennon';	european_football_2
SELECT      SUM(away_team_goals) AS total_away_goals FROM      Match WHERE      (away_player_1 = (SELECT player_api_id FROM Player WHERE name LIKE 'Daan Smith') OR      away_player_2 = (SELECT player_api_id FROM Player WHERE name LIKE 'Daan Smith') OR      away_player_3 = (SELECT player_api_id FROM Player WHERE name LIKE 'Daan Smith') OR      away_player_4 = (SELECT player_api_id FROM Player WHERE name LIKE 'Daan Smith') OR      away_player_5 = (SELECT player_api_id FROM Player WHERE name LIKE 'Daan Smith') OR      away_player_6 = (SELECT player_api_id FROM Player WHERE name LIKE 'Daan Smith') OR      away_player_7 = (SELECT player_api_id FROM Player WHERE name LIKE 'Daan Smith') OR      away_player_8 = (SELECT player_api_id FROM Player WHERE name LIKE 'Daan Smith') OR      away_player_9 = (SELECT player_api_id FROM Player WHERE name LIKE 'Daan Smith') OR      away_player_10 = (SELECT player_api_id FROM Player WHERE name LIKE 'Daan Smith') OR      away_player_11 = (SELECT player_api_id FROM Player WHERE name LIKE 'Daan Smith'))     OR      (away_player_1 = (SELECT player_api_id FROM Player WHERE name LIKE 'Filipe Ferreira') OR      away_player_2 = (SELECT player_api_id FROM Player WHERE name LIKE 'Filipe Ferreira') OR      away_player_3 = (SELECT player_api_id FROM Player WHERE name LIKE 'Filipe Ferreira') OR      away_player_4 = (SELECT player_api_id FROM Player WHERE name LIKE 'Filipe Ferreira') OR      away_player_5 = (SELECT player_api_id FROM Player WHERE name LIKE 'Filipe Ferreira') OR      away_player_6 = (SELECT player_api_id FROM Player WHERE name LIKE 'Filipe Ferreira') OR      away_player_7 = (SELECT player_api_id FROM Player WHERE name LIKE 'Filipe Ferreira') OR      away_player_8 = (SELECT player_api_id FROM Player WHERE name LIKE 'Filipe Ferreira') OR      away_player_9 = (SELECT player_api_id FROM Player WHERE name LIKE 'Filipe Ferreira') OR      away_player_10 = (SELECT player_api_id FROM Player WHERE name LIKE 'Filipe Ferreira') OR      away_player_11 = (SELECT player_api_id FROM Player WHERE name LIKE 'Filipe Ferreira'));	european_football_2
WITH HomePlayers AS (     SELECT match_api_id, home_player_1 AS player FROM Match     UNION ALL     SELECT match_api_id, home_player_2 FROM Match     UNION ALL     SELECT match_api_id, home_player_3 FROM Match     UNION ALL     SELECT match_api_id, home_player_4 FROM Match     UNION ALL     SELECT match_api_id, home_player_5 FROM Match     UNION ALL     SELECT match_api_id, home_player_6 FROM Match     UNION ALL     SELECT match_api_id, home_player_7 FROM Match     UNION ALL     SELECT match_api_id, home_player_8 FROM Match     UNION ALL     SELECT match_api_id, home_player_9 FROM Match     UNION ALL     SELECT match_api_id, home_player_10 FROM Match     UNION ALL     SELECT match_api_id, home_player_11 FROM Match ), QualifiedMatches AS (     SELECT DISTINCT hp.match_api_id     FROM HomePlayers hp     JOIN Player p ON hp.player = p.player_api_id     WHERE (DATEDIFF(CURRENT_TIMESTAMP, p.birthday) / 365.25) <= 30 ) SELECT SUM(m.home_team_goal) AS TotalGoals FROM Match m WHERE m.match_api_id IN (     SELECT match_api_id FROM QualifiedMatches );	european_football_2
SELECT player_name  FROM Player  ORDER BY overall_rating DESC  LIMIT 1;	european_football_2
SELECT player_name FROM Player WHERE potential = (SELECT MAX(potential) FROM Player);	european_football_2
SELECT DISTINCT p.name  FROM Player p  LEFT JOIN Match m ON (     m.home_player_1 = p.player_api_id OR     m.home_player_2 = p.player_api_id OR     m.home_player_3 = p.player_api_id OR     m.home_player_4 = p.player_api_id OR     m.home_player_5 = p.player_api_id OR     m.home_player_6 = p.player_api_id OR     m.home_player_7 = p.player_api_id OR     m.home_player_8 = p.player_api_id OR     m.home_player_9 = p.player_api_id OR     m.home_player_10 = p.player_api_id OR     m.home_player_11 = p.player_api_id OR     m.away_player_1 = p.player_api_id OR     m.away_player_2 = p.player_api_id OR     m.away_player_3 = p.player_api_id OR     m.away_player_4 = p.player_api_id OR     m.away_player_5 = p.player_api_id OR     m.away_player_6 = p.player_api_id OR     m.away_player_7 = p.player_api_id OR     m.away_player_8 = p.player_api_id OR     m.away_player_9 = p.player_api_id OR     m.away_player_10 = p.player_api_id OR     m.away_player_11 = p.player_api_id ) WHERE p.attacking_work_rate = 'high' ORDER BY p.name;	european_football_2
SELECT name FROM Player WHERE finishing = 1 ORDER BY (julianday(CURRENT_TIMESTAMP) - julianday(birthday)) DESC LIMIT 1;	european_football_2
SELECT p.player_name  FROM Player p  JOIN Team t ON p.team_api_id = t.team_api_id  JOIN Country c ON t.country_id = c.id  WHERE c.name = 'Belgium';	european_football_2
SELECT p.player_name, c.country_name FROM Player p JOIN Team t ON p.team_api_id = t.team_api_id JOIN League l ON t.league_id = l.league_id JOIN Country co ON l.country_id = co.country_id WHERE p.vision > 89;	european_football_2
SELECT      country_name,     MAX(average_weight) AS max_average_weight FROM (     SELECT          c.country_name,         AVG(p.weight) AS average_weight     FROM          Player p     JOIN          Team t ON p.player_team_apis_id = t.team_api_id     JOIN          Country c ON t.team_country_apis_id = c.country_api_id     GROUP BY          c.country_name ) AS avg_weights;	european_football_2
SELECT team_long_name FROM Team WHERE buildUpPlaySpeedClass = 'Slow';	european_football_2
SELECT t1.team_short_name, t2.team_short_name  FROM Match  JOIN Team t1 ON match.home_team_api_id = t1.team_api_id  JOIN Team t2 ON match.away_team_api_id = t2.team_api_id  WHERE chanceCreationPassingClass = 'Safe';	european_football_2
SELECT AVG(height) AS avg_height  FROM Player p  JOIN Team t ON p.team_api_id = t.team_api_id  JOIN League l ON t.league_ id = l.league_ id  JOIN Country c ON l.country_ id = c.country_ id  WHERE c.name = 'Italy';	european_football_2
SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name LIMIT 3;	european_football_2
SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Aaron%' AND birthday > '1990';	european_football_2
SELECT      (         SELECT jumping FROM Player WHERE player_api_id = 6     ) - (         SELECT jumping FROM Player WHERE player_api_id = 23     ) AS difference;	european_football_2
SELECT player_id FROM Player WHERE preferred_foot = 'right' ORDER BY potential ASC LIMIT 5;	european_football_2
SELECT COUNT(*) FROM Player  WHERE crossing = (SELECT MAX(crossing) FROM Player WHERE preferred_foot = 'left')  AND preferred_foot = 'left';	european_football_2
SELECT      COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Player) AS percentage_players_80_plus_stamin_strength FROM      Player WHERE      strength > 80 AND stamina > 80;	european_football_2
SELECT c.name FROM Country c JOIN League l ON c.id = l.country_id WHERE l.name = 'Poland Ekstraklasa';	european_football_2
SELECT home_team_goal AS home_score, away_team_goal AS away_score  FROM Match  JOIN League ON Match.league_id = League.league_id  WHERE date LIKE '2008-09-24%' AND League.name = 'Belgium Jupiler League';	european_football_2
SELECT sprint_speed, agility, acceleration FROM Player WHERE player_name = 'Alexis Blin';	european_football_2
SELECT      ta.buildup_play_speed_class,     t.team_api_id  FROM      Team t JOIN      Team_Attributes ta ON t.team_api_id = ta.team_api_id WHERE      t.team_long_name = 'KSV Cercle Brugge';	european_football_2
SELECT COUNT(*)  FROM Match m JOIN League l ON m.league_id = l.id WHERE m.season = '2015/2016' AND l.name = 'Serie A';	european_football_2
SELECT MAX(m.home_team_goal) AS highest_home_score FROM Match m JOIN League l ON m.league_id = l.league_id WHERE l.name = 'Eredivisie' AND m.country_abbreviation = 'NED';	european_football_2
SELECT finishing AS finishing_rate, curve AS curve_score  FROM Player  WHERE weight = (SELECT MAX(weight) FROM Player);	european_football_2
SELECT l.name AS league_name, COUNT(m.id) AS number_of_games  FROM Match m  JOIN League l ON m.league_id = l.id  WHERE m.season = '2015/2016'  GROUP BY l.name  ORDER BY number_of_games DESC  LIMIT 4;	european_football_2
SELECT t.team_long_name FROM Team t WHERE t.team_api_id = (     SELECT away_team_api_id     FROM Match     GROUP BY away_team_api_id     ORDER BY SUM(away_team_goal) DESC     LIMIT 1 );	european_football_2
SELECT p.player_name AS player_name,        MAX(p.overall_rating) AS max_rating FROM Player p WHERE EXISTS (     SELECT 1     FROM Match m     WHERE m.home_player_1 = p.player_api_id OR            m.home_player_2 = p.player_api_id OR            m.home_player_3 = p.player_api_id OR            m.home_player_4 = p.player_api_id OR            m.home_player_5 = p.player_api_id OR            m.home_player_6 = p.player_api_id OR            m.home_player_7 = p.player_api_id OR            m.home_player_8 = p.player_api_id OR            m.home_player_9 = p.player_api_id OR            m.home_player_10 = p.player_api_id OR            m.home_player_11 = p.player_api_id OR            m.away_player_1 = p.player_api_id OR            m.away_player_2 = p.player_api_id OR            m.away_player_3 = p.player_api_id OR            m.away_player_4 = p.player_api_id OR            m.away_player_5 = p.player_api_id OR            m.away_player_6 = p.player_api_id OR            m.away_player_7 = p.player_api_id OR            m.away_player_8 = p.player_api_id OR            m.away_player_9 = p.player_api_id OR            m.away_player_10 = p.player_api_id OR            m.away_player_11 = p.player_api_id ) GROUP BY p.player_name ORDER BY max_rating DESC LIMIT 1;	european_football_2
SELECT (COUNT(height < 180 AND overall_rating > 70) / COUNT(id)) * 100 AS percentage FROM Player;	european_football_2
SELECT      COUNT(CASE WHEN SEX = 'M' AND Admission = '+' THEN ID END) AS InpatientMaleCount,     COUNT(CASE WHEN SEX = 'M' AND Admission = '-' THEN ID END) AS OutpatientMaleCount,     (COUNT(CASE WHEN SEX = 'M' AND Admission = '+' THEN ID END) /       COUNT(CASE WHEN SEX = 'M' AND Admission = '-' THEN ID END)) * 100 AS Percentage FROM Patient;	thrombosis_prediction
SELECT (COUNT(*) / (SELECT COUNT(*) FROM Patient WHERE SEX = 'F')) * 100 AS Percentage FROM Patient WHERE SEX = 'F' AND YEAR(Birthday) > 1930;	thrombosis_prediction
SELECT ((COUNT(CASE WHEN Admission = '+' THEN 1 ELSE NULL END) / COUNT(*)) * 100) AS Percentage  FROM Patient  WHERE Birthday BETWEEN '1930-01-01' AND '1940-12-31';	thrombosis_prediction
SELECT      (COUNT(CASE WHEN Admission = '+' THEN ID END) / COUNT(CASE WHEN Admission = '-' THEN ID END)) AS Ratio FROM      Patient WHERE      Diagnosis = 'SLE';	thrombosis_prediction
SELECT `Diagnosis` FROM `Patient` WHERE `ID` = 30609; SELECT `Date` FROM `Laboratory` WHERE `ID` = 30609;	thrombosis_prediction
SELECT P.SEX, P.Birthday, E.`Examination Date`, E.Symptoms  FROM Patient AS P  LEFT JOIN Examination AS E ON P.ID = E.ID  WHERE P.ID = 163109;	thrombosis_prediction
SELECT Patient.ID, Patient.SEX, Patient.Birthday  FROM Patient  JOIN Laboratory ON Patient.ID = Laboratory.ID  WHERE Laboratory.LDH > 500;	thrombosis_prediction
SELECT DISTINCT P.ID, (YEAR(CURRENT_TIMESTAMP) - YEAR(P.Birthday)) AS Age  FROM Patient P  INNER JOIN Examination E ON P.ID = E.ID  WHERE E.RVVT = '+';	thrombosis_prediction
SELECT `Patient`.`ID`, `Patient`.`SEX`, `Patient`.`Diagnosis` FROM `Patient` JOIN `Examination` ON `Patient`.`ID` = `Examination`.`ID` WHERE `Examination`.`Thrombosis` = 2;	thrombosis_prediction
SELECT `Patient`.`ID`  FROM `Patient`  JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID`  WHERE YEAR(`Patient`.`Birthday`) = 1937  AND `Laboratory`.`T-CHO` >= 250;	thrombosis_prediction
SELECT `Patient`.`ID`, `Patient`.`SEX`, `Patient`.`Diagnosis`  FROM `Patient`  JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID`  WHERE `Laboratory`.`ALB` < 3.5;	thrombosis_prediction
SELECT      (SUM(CASE WHEN p.SEX = 'F' AND l.TP < 6.0 OR l.TP > 8.5 THEN 1 ELSE 0 END) / COUNT(CASE WHEN p.SEX = 'F' THEN p.ID ELSE NULL END)) * 100 AS percentage FROM      Patient p JOIN      Laboratory l ON p.ID = l.ID;	thrombosis_prediction
SELECT AVG(`Examination`.`aCL IgG`)  FROM `Examination`  JOIN `Patient` ON `Examination`.`ID` = `Patient`.`ID`  WHERE `Patient`.`Admission` = '+'  AND (YEAR(CURRENT_TIMESTAMP) - YEAR(`Patient`.`Birthday`)) >= 50;	thrombosis_prediction
SELECT COUNT(*) AS Total FROM Patient WHERE SEX = 'F' AND YEAR(Description) = 1997 AND Admission = '-';	thrombosis_prediction
SELECT MIN(YEAR(`First Date`) - YEAR(`Birthday`)) AS Youngest_Age  FROM `Patient`;	thrombosis_prediction
SELECT COUNT(*) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE YEAR(e.ExaminationDate) = 1997 AND e.Thrombosis = 1 AND p.SEX = 'F';	thrombosis_prediction
SELECT (MAX(YEAR(Patient.Birthday)) - MIN(YEAR(Patient.Birthday))) AS AgeGap   FROM Patient   INNER JOIN Examination ON Patient.ID = Examination.ID   WHERE Examination.Diagnosis = 'PSS';	thrombosis_prediction
SELECT ID FROM Patient WHERE Birthday = (SELECT MAX(Birthday) FROM Patient);	thrombosis_prediction
SELECT      (COUNT(DISTINCT p.ID) / 12) AS average_monthly_male_patients FROM      Patient p JOIN      Laboratory l ON p.ID = l.ID WHERE      l.Date BETWEEN '1998-01-01' AND '1998-12-31'     AND p.SEX = 'M';	thrombosis_prediction
SELECT      p.ID,     p.Birthday,     p.FirstDate,     (SELECT MAX(l.DateCompleted) FROM Laboratory l WHERE l.PatientID = p.ID) AS LabCompletionDate,     YEAR(p.FirstDate) - YEAR(p.Birthday) AS AgeUponArrival FROM Patient p JOIN Examination e ON p.ID = e.PatientID WHERE e.Diagnosis = 'SJS' ORDER BY p.Birthday ASC LIMIT 1;	thrombosis_prediction
SELECT      (SUM(CASE WHEN P.SEX = 'M' AND L.UA <= 8.0 THEN 1 ELSE 0 END) /       SUM(CASE WHEN P.SEX = 'F' AND L.UA <= 6.5 THEN 1 ELSE 0 END)) AS Ratio FROM Patient P JOIN Laboratory L ON P.ID = L.ID;	thrombosis_prediction
SELECT COUNT(*) AS NumberOfPatients FROM Patient p WHERE NOT EXISTS (     SELECT 1      FROM Examination e      WHERE e.PatientID = p.ID        AND (YEAR(e.ExamDate) - YEAR(p.FirstVisitDate)) < 1 );	thrombosis_prediction
SELECT COUNT(DISTINCT Patient.ID) AS NumberOfUnderagePatients FROM Patient  JOIN Examination ON Patient.PatientID = Examination.PatientID WHERE YEAR(Examination.Date) BETWEEN 1990 AND 1993 AND DATEDIFF(year, Patient.Birthday, Examination.Date) < 18;	thrombosis_prediction
SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.T_CHO >= 2.0;	thrombosis_prediction
SELECT e.Diagnosis, COUNT(e.ID) AS Count  FROM Examination e  JOIN Patient p ON e.ID = p.ID  WHERE e.`Examination Date` BETWEEN '1985-01-01' AND '1995-12-31'  GROUP BY e.Diagnosis  ORDER BY Count DESC  LIMIT 1;	thrombosis_prediction
SELECT AVG(1999 - YEAR(Patient.Birthday)) AS AverageAge  FROM Patient  JOIN Examination ON Patient.ID = Examination.ID  WHERE Examination.`Examination Date` BETWEEN '1991-10-01' AND '1991-10-31';	thrombosis_prediction
SELECT (YEAR(e.`Examination Date`) - YEAR(p.`Birthday`)) AS Age, p.`Diagnosis` FROM `Examination` e JOIN `Patient` p ON e.ID = p.ID WHERE e.HGB = (SELECT MAX(HGB) FROM `Examination`);	thrombosis_prediction
SELECT `ANA` FROM `Examination` WHERE `ID` = 3605340 AND `Examination Date` = '1996-12-02';	thrombosis_prediction
SELECT `T-CHO` < 250 AS `Normal Level` FROM `Laboratory` WHERE `ID` = 2927464 AND `Date` = '1995-09-04';	thrombosis_prediction
SELECT `SEX` FROM `Patient` WHERE `Diagnosis` = 'AORTITIS' ORDER BY `First Date` LIMIT 1;	thrombosis_prediction
SELECT `aCL IgM` FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Patient.Diagnosis = 'SLE' AND Patient.Description = '1994-02-19' AND Examination.`Examination Date` = '1993-11-12';	thrombosis_prediction
SELECT P.SEX FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GPT = 9 AND L.Date = '1992-06-12';	thrombosis_prediction
SELECT (YEAR('1991-10-21') - YEAR(P.Birthday)) AS Age   FROM Laboratory L   JOIN Patient P ON L.ID = P.ID   WHERE L.Date = '1991-10-21' AND L.UA = 8.4;	thrombosis_prediction
SELECT COUNT(L.ID) FROM `Laboratory` L WHERE L.ID = (SELECT P.ID FROM `Patient` P WHERE P.`First Date` = '1991-06-13' AND P.Diagnosis = 'SJS') AND YEAR(L.Date) = 1995;	thrombosis_prediction
SELECT P.Diagnosis FROM Patient AS P WHERE P.ID = (SELECT E.ID FROM Examination AS E WHERE E.`Examination Date` = '1997-01-27' AND E.Diagnosis = 'SLE');	thrombosis_prediction
SELECT `Symptoms` FROM `Examination`  JOIN `Patient` ON `Examination`.`ID` = `Patient`.`ID`  WHERE `Patient`.`Birthday` = '1959-03-01' AND `Examination Date` = '1993-09-27';	thrombosis_prediction
SELECT      (SUM(CASE WHEN Date LIKE '1981-11-%' THEN `T-CHO` ELSE 0 END) -       SUM(CASE WHEN Date LIKE '1981-12-%' THEN `T-CHO` ELSE 0 END)) AS Decrease_Rate FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Birthday = '1959-02-18' AND l.Date LIKE '1981-%';	thrombosis_prediction
SELECT p.ID  FROM Patient AS p  JOIN Examination AS e ON p.ID = e.ID  WHERE e.Diagnosis = 'Behcet'  AND e.`Examination Date` BETWEEN '1997-01-01' AND '1997-12-31';	thrombosis_prediction
SELECT e.ID FROM Examination e INNER JOIN Laboratory l ON e.ID = l.ID WHERE e.[Examination Date] BETWEEN '1987-07-06' AND '1996-01-31' AND l.GPT > 30 AND l.ALB < 4;	thrombosis_prediction
SELECT ID FROM Patient WHERE SEX = 'F' AND YEAR(Birthday) = 1964 AND Admission = '+';	thrombosis_prediction
SELECT COUNT(*)  FROM Examination  WHERE Thrombosis = 2  AND `ANA Pattern` = 'S'  AND `aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.2 FROM Examination);	thrombosis_prediction
SELECT      (COUNT(CASE WHEN U_PRO > 0 AND U_PRO < 30 AND UA <= 6.5 THEN 1 END) * 100.0 /       COUNT(CASE WHEN U_PRO > 0 AND U_PRO < 30 THEN 1 END)) AS percentage FROM Laboratory;	thrombosis_prediction
SELECT      (COUNT(CASE WHEN DIAGNOSIS = 'BEHCET' THEN 1 ELSE NULL END) / COUNT(*) * 100) AS PERCENTAGE  FROM Patient  WHERE SEX = 'M' AND YEAR(`First Date`) = 1981;	thrombosis_prediction
SELECT DISTINCT `Patient`.`ID` FROM `Patient`  JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID`  WHERE `Patient`.`Admission` = '-' AND `Laboratory`.`Date` LIKE '1991-10%' AND `Laboratory`.`T-CHO` < 2.0;	thrombosis_prediction
SELECT COUNT(DISTINCT Patient.ID) FROM Patient  JOIN Examination ON Patient.ID = Examination.ID  WHERE Examination.ANA_Pattern != 'P' AND Patient.SEX = 'F' AND Patient.Birthday >= '1980-01-01' AND Patient.Birthday <= '1989-12-31';	thrombosis_prediction
SELECT SEX  FROM Patient JOIN Examination ON Patient.ID = Examination.PatientID JOIN Laboratory ON Patient.ID = Laboratory.PatientID WHERE Examination.Diagnosis = 'PSS' AND Laboratory.CRP > 2 AND Laboratory.CRE = 1 AND Laboratory.LDH = 123;	thrombosis_prediction
SELECT AVG(L.ALB) AS AverageAlbumin FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE P.SEX = 'F' AND P.Diagnosis = 'SLE' AND L.PLT > 400;	thrombosis_prediction
SELECT Symptoms FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE p.Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(*) DESC LIMIT 1;	thrombosis_prediction
SELECT `Description`, `Diagnosis` FROM `Patient` WHERE ID = 48473;	thrombosis_prediction
SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS';	thrombosis_prediction
SELECT COUNT(DISTINCT ID) FROM `Laboratory` WHERE YEAR(`Date`) = 1997 AND (`TP` <= 6 OR `TP` >= 8.5);	thrombosis_prediction
WITH trombopat AS (     SELECT DISTINCT e.id      FROM Examination e      WHERE Symptoms LIKE '%thrombocytopenia%' ), has_sle AS (     SELECT p.id      FROM Patient p      WHERE Diagnosis LIKE '%SLE%'      UNION     SELECT e.id      FROM Examination e      WHERE Diagnosis LIKE '%SLE%' ) SELECT      (CAST(COUNT(hs.id) AS FLOAT) / CAST(COUNT(*) AS FLOAT)) * 100 as percentage FROM trombopat tp LEFT JOIN has_sle hs ON tp.id = hs.id;	thrombosis_prediction
SELECT (SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) / COUNT(SEX)) * 100 AS Percentage  FROM Patient  WHERE YEAR(Birthday) = 1980 AND Diagnosis = 'RA';	thrombosis_prediction
SELECT COUNT(*) FROM Patient  INNER JOIN Examination ON Patient.ID = Examination.ID  WHERE SEX = 'M' AND Admission = '-' AND Diagnosis = 'Behcet' AND `Examination Date` BETWEEN '1995-01-01' AND '1997-12-31';	thrombosis_prediction
SELECT COUNT(*) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'F' AND L.WBC < 3.5;	thrombosis_prediction
SELECT DATEDIFF(e.`Examination Date`, p.`First Date`) AS Days   FROM `Patient` p   JOIN `Examination` e ON p.ID = e.ID   WHERE p.ID = 821298;	thrombosis_prediction
SELECT      Patient.ID,     Patient.SEX,     Laboratory.UA,     CASE          WHEN Patient.SEX = 'M' AND Laboratory.UA > 8.0 THEN 'Normal'         WHEN Patient.SEX = 'F' AND Laboratory.UA > 6.5 THEN 'Normal'         ELSE 'Abnormal'     END AS UricAcidStatus FROM      Patient JOIN      Laboratory ON Patient.ID = Laboratory.ID WHERE      Patient.ID = 57266;	thrombosis_prediction
SELECT `Date` FROM `Laboratory` WHERE `ID` = 48473 AND `GOT` >= 60;	thrombosis_prediction
SELECT Patient.ID, Patient.SEX, Patient.Birthday  FROM Patient  INNER JOIN Laboratory ON Patient.ID = Laboratory.ID  WHERE YEAR(Laboratory.Date) = 1994 AND Laboratory.GOT < 60;	thrombosis_prediction
SELECT DISTINCT `Patient`.`ID`  FROM `Patient` JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID` WHERE `SEX` = 'M' AND `GPT` >= 60;	thrombosis_prediction
SELECT `Patient`.`Diagnosis` FROM `Patient` JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID` WHERE `Laboratory`.`GPT` > 60 ORDER BY `Patient`.`Birthday` ASC;	thrombosis_prediction
SELECT AVG(LDH) FROM Laboratory WHERE LDH < 500 AND LDH IS NOT NULL;	thrombosis_prediction
SELECT `Patient`.`ID`, (YEAR(CURRENT_TIMESTAMP) - YEAR(`Patient`.`Birthday`)) AS Age FROM `Patient` JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID` WHERE `Laboratory`.`LDH` BETWEEN 600 AND 800;	thrombosis_prediction
SELECT p.Admission FROM Patient AS p INNER JOIN Laboratory AS l ON p.ID = l.ID WHERE l.ALP < 300;	thrombosis_prediction
SELECT P.ID, L.ALP  FROM Patient P  JOIN Laboratory L ON P.ID = L.ID  WHERE P.Birthday = '1982-04-01' AND L.ALP < 300;	thrombosis_prediction
SELECT Patient.ID, Patient.SEX, Patient.Birthday  FROM Patient  INNER JOIN Laboratory ON Patient.ID = Laboratory.ID  WHERE Laboratory.TP < 6.0;	thrombosis_prediction
SELECT P.ID, L.TP, (L.TP - 8.5) AS `TP Deviation` FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'F' AND L.TP > 8.5;	thrombosis_prediction
SELECT p.*, l.* FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND (l.ALB <= 3.5 OR l.ALB >= 5.5) ORDER BY p.Birthday DESC;	thrombosis_prediction
SELECT `Patient`.`ID`, `Laboratory`.`ALB`  FROM `Patient`  INNER JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID`  WHERE YEAR(`Patient`.`Birthday`) = 1982 AND `Laboratory`.`ALB` BETWEEN 3.5 AND 5.5;	thrombosis_prediction
SELECT      (         (SELECT COUNT(*) FROM              (SELECT DISTINCT p.ID FROM Patient p              WHERE p.SEX = 'F' AND EXISTS                  (SELECT 1 FROM Laboratory l WHERE l.ID = p.ID AND l.UA > 6.5)             ) AS high_ua_patients          )         /          (SELECT COUNT(DISTINCT ID) FROM Patient WHERE SEX = 'F')     ) * 100 AS percentage;	thrombosis_prediction
SELECT AVG(L.UA) AS average_UA  FROM Patient P  JOIN (     SELECT L1.ID, MAX(L1.Date) AS latest_date      FROM Laboratory L1      GROUP BY L1.ID ) LD ON P.ID = LD.ID  JOIN Laboratory L ON LD.ID = L.ID AND LD.latest_date = L.Date  WHERE (P.SEX = 'M' AND L.UA < 8.0) OR (P.SEX = 'F' AND L.UA < 6.5);	thrombosis_prediction
SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.UN = 29;	thrombosis_prediction
SELECT Patient.ID, SEX, Birthday  FROM Patient  JOIN Laboratory ON Patient.ID = Laboratory.ID  WHERE Diagnosis = 'RA' AND UN < 30;	thrombosis_prediction
SELECT COUNT(*)  FROM Patient P  JOIN Laboratory L ON P.ID = L.ID  WHERE P.SEX = 'M' AND L.CRE >= 1.5;	thrombosis_prediction
SELECT      SUM(CASE WHEN SEX = 'M' THEN 1 ELSE 0 END) AS MaleCount,     SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) AS FemaleCount FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE CRE >= 1.5;	thrombosis_prediction
SELECT P.ID, P.SEX, P.Birthday FROM Patient AS P JOIN (     SELECT ID, `T-BIL`     FROM Laboratory ) AS L ON P.ID = L.ID WHERE L.`T-BIL` = (SELECT MAX(`T-BIL`) FROM Laboratory);	thrombosis_prediction
SELECT p.sex, GROUP_CONCAT(DISTINCT p.ID) AS patient_ids FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.`T-BIL` >= 2.0 GROUP BY p.sex;	thrombosis_prediction
SELECT P.ID,         (SELECT MAX(T_cho) FROM Laboratory) AS Max_T_Cho FROM Patient P JOIN (     SELECT DISTINCT ID      FROM Laboratory      WHERE T_cho = (SELECT MAX(T_cho) FROM Laboratory) ) L ON P.ID = L.ID ORDER BY P.Birthdate ASC LIMIT 1;	thrombosis_prediction
SELECT (SUM(YEAR(NOW()) - YEAR(`Patient`.`Birthday`)) / COUNT(`Patient`.`ID`)) AS average_age FROM `Patient` JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID` WHERE `Patient`.`SEX` = 'M' AND `Laboratory`.`T-CHO` >= 250;	thrombosis_prediction
SELECT P.ID, P.Diagnosis FROM Patient P WHERE EXISTS (     SELECT 1     FROM Laboratory L     WHERE L.TG > 300 AND L.ID = P.ID );	thrombosis_prediction
SELECT COUNT(DISTINCT P.ID)  FROM Patient P  JOIN Laboratory L ON P.ID = L.ID  WHERE L.TG >= 200 AND (YEAR(CURRENT_TIMESTAMP) - YEAR(P.Birthday)) > 50;	thrombosis_prediction
SELECT DISTINCT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Admission = '-' AND l.CPK < 250;	thrombosis_prediction
SELECT COUNT(DISTINCT p.ID) FROM Patient p INNER JOIN Laboratory l ON p.ID = l.ID WHERE YEAR(p.Birthday) BETWEEN 1936 AND 1956 AND p.SEX = 'M' AND l.CPK >= 250;	thrombosis_prediction
SELECT      P.ID,      P.SEX,      (YEAR(CURRENT_TIMESTAMP) - YEAR(P.Birthday)) AS Age FROM      Patient P JOIN      Examination E ON P.ID = E.ID WHERE      E.GLU >= 180 AND E.T-CHO < 250;	thrombosis_prediction
SELECT Patient.ID, Laboratory.GLU FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE YEAR(Patient.`First Date`) = 1991 AND Laboratory.GLU < 180;	thrombosis_prediction
SELECT p.ID, p.SEX, p.Birthday  FROM Patient p  JOIN Laboratory l ON p.ID = l.ID  WHERE l.WBC <= 3.5 OR l.WBC >= 9.0  GROUP BY p.SEX  ORDER BY TIMESTAMPDIFF(YEAR, p.Birthday, CURDATE()) ASC;	thrombosis_prediction
SELECT P.ID, (YEAR(CURRENT_TIMESTAMP) - YEAR(P.Birthday)) AS Age, P.Diagnosis  FROM Patient P  WHERE EXISTS (     SELECT 1 FROM Laboratory L      WHERE L.ID = P.ID AND L.RBC < 3.5 );	thrombosis_prediction
SELECT Patient.ID, Patient.SEX, Patient.Birthday, Patient.Admission  FROM Patient  INNER JOIN Laboratory ON Patient.ID = Laboratory.ID  WHERE Patient.SEX = 'F' AND (YEAR(CURRENT_TIMESTAMP) - YEAR(Patient.Birthday)) >= 50  AND (Laboratory.RBC <= 3.5 OR Laboratory.RBC >= 6.0);	thrombosis_prediction
SELECT DISTINCT `Patient`.`ID`, `Patient`.`SEX`  FROM `Patient`  INNER JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID`  WHERE `Patient`.`Admission` = '-' AND `Laboratory`.`HGB` < 10;	thrombosis_prediction
SELECT `Patient`.`ID`, `Patient`.`SEX` FROM `Patient`  JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID`  WHERE `Patient`.`Diagnosis` = 'SLE' AND `Laboratory`.`HGB` > 10 AND `Laboratory`.`HGB` < 17  ORDER BY `Patient`.`Birthday` ASC LIMIT 1;	thrombosis_prediction
SELECT P.ID, (YEAR(CURRENT_TIMESTAMP) - YEAR(P.Birthday)) AS Age  FROM Patient P  JOIN Laboratory L ON P.ID = L.ID  WHERE L.HCT >= 52  GROUP BY P.ID  HAVING COUNT(L.ID) >= 2;	thrombosis_prediction
SELECT AVG(HCT) FROM Laboratory WHERE `Date` LIKE '1991%' AND HCT < 29;	thrombosis_prediction
SELECT      COUNT(CASE WHEN PLT < 100 THEN ID END) AS LowPlateletCount,     COUNT(CASE WHEN PLT > 400 THEN ID END) AS HighPlateletCount,     (COUNT(CASE WHEN PLT < 100 THEN ID END) - COUNT(CASE WHEN PLT > 400 THEN ID END)) AS Difference FROM      Laboratory WHERE      PLT <= 100 OR PLT >= 400;	thrombosis_prediction
SELECT p.ID FROM Patient AS p INNER JOIN Examination AS e ON p.ID = e.ID WHERE YEAR(e.[Examination Date]) = '1984' AND  SUBTRACT(year(current_timestamp), year(p.Birthday)) < 50 AND  e.PLATFORM >= 100 AND e.PLATFORM <= 400;	thrombosis_prediction
SELECT (COUNT(CASE WHEN SEX = 'F' THEN 1 END) * 100.0 / COUNT(*)) AS Percentage FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE (year(current_timestamp) - year(p.Birthday)) > 55 AND l.PT >= 14;	thrombosis_prediction
SELECT p.ID  FROM Patient AS p  JOIN Examination AS e ON p.ID = e.ID  WHERE YEAR(p.`First Date`) > 1992 AND e.PT < 14;	thrombosis_prediction
SELECT COUNT(*) FROM Examination WHERE `Examination Date` > '1997-01-01' AND APTT < 45;	thrombosis_prediction
SELECT COUNT(DISTINCT e.ID)  FROM Examination e  JOIN Laboratory l ON e.ID = l.ID  WHERE e.Thrombosis = 0 AND l.APTT > 45;	thrombosis_prediction
SELECT COUNT(DISTINCT P.ID) AS Count FROM Patient P INNER JOIN Laboratory L ON P.ID = L.PatientID WHERE P.SEX = 'M'  AND (L.WBC > 3.5 AND L.WBC < 9) AND (L.FG <= 150 OR L.FG >= 450);	thrombosis_prediction
SELECT COUNT(DISTINCT Patient.ID)  FROM Patient  JOIN Laboratory ON Patient.ID = Laboratory.ID  WHERE Patient.Birthday > '1980-01-01' AND (Laboratory.FG < 150 OR Laboratory.FG > 450);	thrombosis_prediction
SELECT Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.`U-PRO` >= 30;	thrombosis_prediction
SELECT P.ID  FROM Patient AS P  INNER JOIN Laboratory AS L  ON P.ID = L.ID  WHERE P.Diagnosis = 'SLE' AND CAST(L.`U-PRO` AS INTEGER) > 0 AND CAST(L.`U-PRO` AS INTEGER) < 30;	thrombosis_prediction
SELECT COUNT(DISTINCT ID) FROM Laboratory WHERE IGG >= 2000;	thrombosis_prediction
SELECT COUNT(*) FROM Examination WHERE (`aCL IgG` > 900 AND `aCL IgG` < 2000) AND Symptoms IS NOT NULL;	thrombosis_prediction
SELECT Diagnosis FROM Patient WHERE ID = (     SELECT ID      FROM (         SELECT ID, MAX(IGA) AS max_iga          FROM Laboratory          WHERE IGA BETWEEN 80 AND 500          GROUP BY ID         ORDER BY max_iga DESC         LIMIT 1     ) sub );	thrombosis_prediction
SELECT COUNT(*)  FROM Patient p  INNER JOIN Laboratory l ON p.ID = l.ID  WHERE l.IGA > 80 AND l.IGA < 500  AND YEAR(p.`First Date`) >= 1990;	thrombosis_prediction
SELECT Diagnosis FROM (     SELECT P.Diagnosis, COUNT(*) AS cnt     FROM Patient P     WHERE EXISTS (         SELECT 1         FROM Laboratory L         WHERE L.ID = P.ID AND (L.IGM <=40 OR L.IGM >=400)     )     GROUP BY P.Diagnosis ) AS DiagCounts ORDER BY cnt DESC LIMIT 1;	thrombosis_prediction
SELECT COUNT(*)  FROM Patient  WHERE ID IN (SELECT DISTINCT ID FROM Laboratory WHERE CRP = '+') AND Description IS NULL;	thrombosis_prediction
SELECT COUNT(*) FROM Patient  JOIN Laboratory ON Patient.ID = Laboratory.ID  WHERE Laboratory.CRE >= 1.5  AND (YEAR(CURDATE()) - YEAR(Patient.Birthday)) < 70;	thrombosis_prediction
SELECT COUNT(DISTINCT p.ID) FROM Patient p INNER JOIN Examination e ON p.ID = e.ID WHERE e.RA IN ('-', '+-') AND e.KCT = '+';	thrombosis_prediction
SELECT Diagnosis FROM Patient  WHERE YEAR(Birthday) >= 1985  AND ID IN (     SELECT ID FROM Laboratory      WHERE RA IN ('-', '+-') );	thrombosis_prediction
SELECT p.ID  FROM Patient AS p  JOIN Laboratory AS l ON p.ID = l.ID  WHERE YEAR(CURDATE()) - YEAR(p.Birthday) > 60 AND l.RF < 20;	thrombosis_prediction
SELECT COUNT(DISTINCT P.ID) AS NumberOfPatients FROM Patient P WHERE EXISTS (     SELECT 1      FROM Examination E      WHERE E.ID = P.ID AND E.Thrombosis = 0 ) AND EXISTS (     SELECT 1      FROM Laboratory L      WHERE L.ID = P.ID AND L.RF < 20 );	thrombosis_prediction
SELECT COUNT(DISTINCT e.ID) FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE e.ANA_Pattern = 'P' AND l.C3 > 35;	thrombosis_prediction
SELECT p.id FROM Examination e JOIN Patient p ON e.ID = p.ID JOIN Laboratory l ON p.ID = l.ID WHERE (l.HCT <= 29 OR l.HCT >=52) ORDER BY e.`aCL IgA` DESC LIMIT 1;	thrombosis_prediction
SELECT COUNT(DISTINCT `Examination`.`ID`) AS `Count` FROM `Examination`  JOIN `Laboratory` ON `Examination`.`ID` = `Laboratory`.`ID` WHERE `Examination`.`Thrombosis` = 1 AND `Laboratory`.`C4` > 10;	thrombosis_prediction
SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Admission = '+' AND (Laboratory.RNP = '-' OR Laboratory.RNP = '+-');	thrombosis_prediction
SELECT P.Birthday  FROM Patient P  JOIN Laboratory L ON P.ID = L.ID  WHERE L.RNP NOT IN ('-', '+-')  ORDER BY P.Birthday DESC  LIMIT 1;	thrombosis_prediction
SELECT COUNT(*) FROM Patient p  JOIN Examination e ON p.ID = e.ID  JOIN Laboratory l ON p.ID = l.ID  WHERE l.SM IN ('-', '+-') AND e.Thrombosis = 0;	thrombosis_prediction
SELECT Patient.ID FROM Patient  JOIN Laboratory ON Patient.ID = Laboratory.ID  WHERE SM NOT IN ('negative', '0')  ORDER BY Birthday DESC LIMIT 3;	thrombosis_prediction
SELECT e.ID FROM Examination e INNER JOIN Laboratory l ON e.ID = l.ID WHERE e.`Examination Date` > '1997-01-01' AND l.SC170 IN ('negative', '0');	thrombosis_prediction
SELECT COUNT(DISTINCT p.id) AS female_no_symptom_count FROM Patient p JOIN Laboratory l ON p.id = l.patient_id WHERE l.sc170 IN ('negative', '0') AND NOT EXISTS (     SELECT 1     FROM Examination e     WHERE e.patient_id = p.id AND e.symptoms IS NOT NULL ) AND p.gender = 'female';	thrombosis_prediction
SELECT COUNT(DISTINCT e.ID) AS 'Number of Patients' FROM Examination AS e JOIN Patient AS p ON e.ID = p.ID WHERE e.SSA IN ('-', '+-') AND YEAR(p.`First Date`) < 2000;	thrombosis_prediction
SELECT Patient.ID AS P_ID  FROM Patient  JOIN Laboratory ON Patient.ID = Laboratory.ID  WHERE Laboratory.SSA NOT IN ('negative', '0') AND Patient.First Date IS NOT NULL  ORDER BY Patient.First Date ASC  LIMIT 1;	thrombosis_prediction
SELECT COUNT(DISTINCT p.ID) AS CountPatients FROM Patient p WHERE      EXISTS (         SELECT 1          FROM Examination e          WHERE e.ID = p.ID AND e.Diagnosis = 'SLE'     )     AND      EXISTS (         SELECT 1          FROM Laboratory l          WHERE l.ID = p.ID AND (l.SSB = 'negative' OR l.SSB = '0')     );	thrombosis_prediction
SELECT COUNT(DISTINCT p.ID)  FROM Patient p  JOIN Examination e ON p.ID = e.ID  JOIN Laboratory l ON p.ID = l.ID  WHERE l.SSB IN ('negative', '0') AND e.Symptoms IS NOT NULL;	thrombosis_prediction
SELECT DISTINCT ID FROM Patient WHERE SEX = 'M' AND SSB IN ('-', '+-') AND CENTROMEA IN ('-', '+-');  # Note: The provided answer is based on the user's query structure but may not correctly reference antibody levels since they are in a different table. A more accurate query should involve joining with the Laboratory or Examination tables where these values are stored.	thrombosis_prediction
SELECT `Diagnosis` FROM `Patient` WHERE `ID` IN (SELECT `ID` FROM `Laboratory` WHERE `DNA` >= 8);	thrombosis_prediction
SELECT COUNT(DISTINCT p.ID) AS NumberOfPatients FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.Description IS NULL AND CAST(e.DNA AS INT) < 8;	thrombosis_prediction
SELECT COUNT(*) FROM Patient  JOIN Laboratory ON Patient.ID = Laboratory.ID  WHERE Admission = '+' AND IGG > 900 AND IGG < 2000;	thrombosis_prediction
SELECT      (COUNT(DISTINCT CASE WHEN p.Diagnosis = 'SLE' AND l.GOT >= 60 THEN p.ID END) / COUNT(DISTINCT CASE WHEN l.GOT >= 60 THEN p.ID END)) * 100 AS percentage FROM Patient p JOIN Laboratory l ON p.ID = l.PatientID;	thrombosis_prediction
SELECT COUNT(DISTINCT P.ID) FROM Patient P  JOIN Laboratory L ON P.ID = L.ID  WHERE P.SEX = 'M' AND L.GOT < 60;	thrombosis_prediction
SELECT MAX(Patient.Birthday) FROM Patient  JOIN Examination ON Patient.ID = Examination.ID  WHERE Examination.GOT >= 60;	thrombosis_prediction
SELECT P.Birthday, MAX(L.GPT) AS MaxGPT FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.GPT < 60 GROUP BY P.ID ORDER BY MaxGPT DESC, P.Birthday LIMIT 3;	thrombosis_prediction
SELECT COUNT(*) AS total  FROM Patient p  JOIN Laboratory l ON p.ID = l.ID  WHERE p.SEX = 'M' AND l.GOT < 60;	thrombosis_prediction
SELECT MIN(FirstDate)  FROM Patient  WHERE ID IN (     SELECT ID      FROM Laboratory      WHERE LDH = (SELECT MAX(LDH) FROM Laboratory WHERE LDH < 500) );	thrombosis_prediction
SELECT MAX(`Date`)  FROM `Laboratory`  WHERE `ID` IN (     SELECT `ID`      FROM `Patient`      WHERE `First Date` = (SELECT MAX(`First Date`) FROM `Patient`) )  AND LDH >= 500;	thrombosis_prediction
SELECT COUNT(*) FROM Laboratory AS lab JOIN Patient AS pat ON lab.ID = pat.ID WHERE lab.ALP >= 300 AND pat.Admission = '+';	thrombosis_prediction
SELECT COUNT(DISTINCT `Patient`.`ID`)  FROM `Patient` JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID`  WHERE `Patient`.`Admission` = '-' AND `Laboratory`.`ALP` < 300;	thrombosis_prediction
SELECT `Patient`.`Diagnosis`, `Examination`.`Diagnosis`  FROM `Patient`  LEFT JOIN `Examination` ON `Patient`.`ID` = `Examination`.`ID`  JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID`  WHERE `Laboratory`.`TP` < 6.0;	thrombosis_prediction
SELECT COUNT(DISTINCT p.ID) FROM Patient AS p JOIN Examination AS e ON p.ID = e.ID WHERE p.Diagnosis = 'SJS' AND e.TP > 6.0 AND e.TP < 8.5;	thrombosis_prediction
SELECT `Date` FROM `Laboratory` WHERE `ALB` > 3.5 AND `ALB` < 5.5 ORDER BY `ALB` DESC LIMIT 1;	thrombosis_prediction
SELECT COUNT(DISTINCT p.ID)  FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M'  AND l.ALB > 3.5  AND l.ALB < 5.5  AND l.TP >= 6.0  AND l.TP <= 8.5;	thrombosis_prediction
WITH max_ua AS (     SELECT MAX(UA) as ua_value     FROM Laboratory l     JOIN Patient p ON l.ID = p.ID     WHERE p.SEX = 'F' AND l.UA > 6.50 ) SELECT e.aCL_IgG, e.aCL_IgM, e.aCL_IgA FROM Examination e WHERE e.ID IN (     SELECT l.ID     FROM Laboratory l     JOIN Patient p ON l.ID = p.ID     WHERE p.SEX = 'F' AND l.UA > 6.50 AND l.UA = (SELECT ua_value FROM max_ua) );	thrombosis_prediction
SELECT MAX(Examination.ANA) FROM Examination  INNER JOIN Laboratory ON Examination.ID = Laboratory.ID  WHERE Laboratory.CRE < 1.5;	thrombosis_prediction
WITH PatientMax AS (     SELECT          e.ID,          MAX(e.aCL_IgA) AS max_acl     FROM          Examination e     JOIN          Laboratory l ON e.ID = l.ID     WHERE          l.CRE < 1.5     GROUP BY          e.ID ) SELECT      pm.ID FROM      PatientMax pm WHERE      pm.max_acl = (SELECT MAX(max_acl) FROM PatientMax);	thrombosis_prediction
SELECT COUNT(*) AS Count FROM Patient p WHERE p.ID IN (     SELECT l.ID FROM Laboratory l WHERE l.T_BIL >= 2.0 ) AND p.ID IN (     SELECT e.ID FROM Examination e WHERE e.ANA_Pattern LIKE '%P%' );	thrombosis_prediction
SELECT DISTINCT exam.ANA FROM Examination exam WHERE exam.ID IN (     SELECT lab.ID      FROM Laboratory lab     GROUP BY lab.ID     HAVING MAX(lab.`T- BIL`) = (         SELECT MAX(`T- BIL`)         FROM Laboratory          WHERE `T- BIL` < 2.0     ) );	thrombosis_prediction
SELECT COUNT(*)  FROM Examination E JOIN Laboratory L ON E.ID = L.ID WHERE L.TGL >= 200 AND E.KCT = 0;	thrombosis_prediction
SELECT COUNT(*) FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE l.T-CHO < 250 AND e.ANA Pattern = 'P';	thrombosis_prediction
SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Laboratory L ON P.ID = L.ID JOIN Examination E ON P.ID = E.ID WHERE L.TG < 200 AND E.Symptoms IS NOT NULL;	thrombosis_prediction
SELECT Diagnosis  FROM Patient  WHERE ID = (     SELECT ID      FROM Laboratory      WHERE TG < 200 AND ID IN (SELECT ID FROM Patient)      ORDER BY TG DESC      LIMIT 1 );	thrombosis_prediction
SELECT DISTINCT `Patient`.`ID`  FROM `Patient` JOIN `Examination` ON `Patient`.`ID` = `Examination`.`ID` JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID` WHERE `Examination`.`Thrombosis` = 0 AND `Laboratory`.`CPK` < 250;	thrombosis_prediction
SELECT COUNT(DISTINCT P.ID) FROM Patient P  JOIN Examination E ON P.ID = E.ID  JOIN Laboratory L ON P.ID = L.ID  WHERE L.CPK < 250 AND (E.KCT = '+' OR E.RVVT = '+' OR E.LAC = '+');	thrombosis_prediction
SELECT P.Birthday  FROM Patient P  JOIN Laboratory L ON P.ID = L.ID  WHERE L.GLU > 180  ORDER BY P.Birthday ASC  LIMIT 1;	thrombosis_prediction
SELECT COUNT(*)  FROM (     SELECT DISTINCT ID      FROM Laboratory      WHERE GLU < 180 ) AS labIDs WHERE NOT EXISTS (     SELECT 1      FROM Examination e      WHERE e.ID = labIDs.ID AND Thrombosis > 0 );	thrombosis_prediction
SELECT COUNT(*) FROM `Laboratory` l JOIN `Patient` p ON l.ID = p.ID WHERE p.Admission = '+' AND l.WBC BETWEEN 3.5 AND 9.0;	thrombosis_prediction
SELECT COUNT(*) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.Diagnosis = 'SLE' AND (e.WBC BETWEEN 3.5 AND 9.0);	thrombosis_prediction
SELECT `Patient`.`ID` FROM `Laboratory`   JOIN `Patient` ON `Laboratory`.`ID` = `Patient`.`ID`   WHERE (`RBC` <= 3.5 OR `RBC` >= 6.0) AND `Admission` = '-';	thrombosis_prediction
SELECT COUNT(*)  FROM Patient p  JOIN Laboratory l ON p.ID = l.ID  WHERE l.PLT > 100 AND l.PLT < 400 AND p.Diagnosis IS NOT NULL;	thrombosis_prediction
SELECT P.ID, L.PLT  FROM Patient AS P  JOIN Laboratory AS L ON P.ID = L.ID  WHERE P.Diagnosis = 'MCTD' AND L.PLT > 100 AND L.PLT < 400;	thrombosis_prediction
SELECT AVG(l.PT)  FROM Laboratory l  JOIN Patient p ON l.ID = p.ID  WHERE p.SEX = 'M' AND l.PT < 14;	thrombosis_prediction
SELECT COUNT(*)  FROM Examination e  JOIN Laboratory l ON e.ID = l.ID  WHERE e.Thrombosis IN (1, 2) AND l.PT < 14;	thrombosis_prediction
SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Angela' AND member.last_name = 'Sanders';	student_club
SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Engineering';	student_club
SELECT first_name, last_name FROM member WHERE position = 'Student_Club' AND link_to_major IN (SELECT major_id FROM major WHERE department = 'Art and Design');	student_club
SELECT COUNT(*) AS total_attendees  FROM `event` e  JOIN `attendance` a ON e.`event_id` = a.`link_to_event`  JOIN `member` m ON a.`link_to_member` = m.`member_id`  WHERE e.`event_name` = 'Women''s Soccer' AND m.`position` = 'Student_Club';	student_club
SELECT m.phone  FROM member m  JOIN attendance a ON m.member_id = a.link_to_member  JOIN event e ON a.link_to_event = e.event_id  WHERE e.event_name = 'Women''s Soccer';	student_club
SELECT COUNT(m.member_id)  FROM member m  JOIN attendance a ON m.member_id = a.link_to_member  JOIN event e ON a.link_to_event = e.event_	student_club
SELECT link_to_event  FROM attendance  GROUP BY link_to_event  ORDER BY COUNT(*) DESC  LIMIT 1;	student_club
SELECT college FROM major JOIN member ON member.link_to_major = major.major_id WHERE position = 'Vice President';	student_club
SELECT e.event_name  FROM event e  JOIN attendance a ON e.event_id = a.link_to_vent  JOIN member m ON a.link_to_member = m.member_id  WHERE m.first_ename = 'Maya' AND m.last_ename = 'Mclean';	student_club
SELECT COUNT(*) FROM attendance  JOIN event ON attendance.link_to_event = event.event_id  JOIN member ON attendance.link_to_member = member.member_id  WHERE event.type = 'Student_Club' AND YEAR(event.event_date) = 2019 AND member.first_name = 'Sacha' AND member.last_name = 'Harrison';	student_club
SELECT COUNT(*)  FROM (     SELECT a.link_to_event      FROM attendance a      GROUP BY a.link_to_event      HAVING COUNT(a.link_to_event) > 10 ) AS attended_events  JOIN event e ON attended_events.link_to_event = e.event_id  WHERE e.type = 'Meeting';	student_club
SELECT e.event_name FROM event e JOIN attendance a ON e.aid = a.link_aid_event GROUP BY e.aid, e.event_name HAVING COUNT(a.link_std_id) > 20 AND e.type != 'fundraiser';	student_club
SELECT COUNT(a.link_to_event) / COUNT(DISTINCT e.event_name) AS avg_attendance FROM attendance a JOIN event e ON a.link_to_event = e.event_id WHERE e.type = 'Meeting' AND YEAR(e.event_date) = 2020;	student_club
SELECT DISTINCT expense_description, MAX(cost) FROM expense  JOIN budget ON expense.link_to_budget = budget.budget_id  JOIN event ON budget.link_ to_event = event.event_id;	student_club
SELECT COUNT(*) FROM member  JOIN major ON member.link_to_major = major.major_id  WHERE major.major_name = 'Environmental Engineering';	student_club
SELECT first_name, last_name FROM member  JOIN attendance ON member.member_id = attendance.link_to_member  JOIN event ON attendance.link_to_	student_club
SELECT member.last_name  FROM member  JOIN major ON member.link_to_major = major.major_id  WHERE major.major_name = 'Law and Constitutional Studies';	student_club
SELECT m.first_name, m.last_name, z.county  FROM member AS m  INNER JOIN zip_code AS z ON m.zip = z.zip_code  WHERE m.first_name = 'Sherri' AND m.last_name = 'Ramsey';	student_club
SELECT m.college  FROM member AS mem  JOIN major AS m ON mem.link_to_major = m.major_id  WHERE mem.first_name = 'Tyler' AND mem.last_name = 'Hewitt';	student_club
SELECT SUM(amount) FROM income WHERE link_то_member IN (SELECT member_id FROM member WHERE position = 'Vice President');	student_club
SELECT SUM(expense.cost) AS total_spent FROM event JOIN budget ON event.event_id = budget.link_to_vent JOIN expense ON budget.budget_id = expense.link_to_budget WHERE event.event_name = 'September Meeting' AND budget.category = 'Food';	student_club
SELECT `city`, `state` FROM `zip_code` WHERE `zip_code`.`zip_code` = (SELECT `zip` FROM `member` WHERE `position` = 'President');	student_club
SELECT member.first_name, member.last_name  FROM member  JOIN zip_code ON member.zip = zip_code.zip_ode  WHERE zip_code.state = 'Illinois';	student_club
SELECT spent FROM budget  JOIN event ON event.event_id = budget.link_то_event  WHERE category = 'Advertisement' AND event_name = 'September Meeting';	student_club
SELECT m.department FROM major m JOIN member p ON m.major_id = p.link_to_major JOIN member g ON m.major_id = g.link_to_major WHERE (p.first_name = 'Pierce' OR p.last_name = 'Pierce')   AND (g.first_name = 'Guidi' OR g.last_name = 'Guidi');	student_club
SELECT SUM(amount) FROM budget   JOIN event ON budget.link_to_event = event.event_id   WHERE event.event_name = 'October Speaker';	student_club
SELECT e.approved  FROM expense e  JOIN budget b ON e.link_to_budget = b.budget_id  JOIN event ev ON b.link_eto_event = ev.event_id  WHERE ev.event_name = 'October Meeting' AND ev.event_date = '2019-10-08';	student_club
SELECT AVG(cost) AS average_cost FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE (first_name = 'Elijah' AND last_name = 'Allen')  AND SUBSTR(expense_date, 6, 2) IN ('09', '10');	student_club
SELECT      (SUM(CASE WHEN LEFT(event.event_date, 4) = '2019' THEN budget.spent ELSE 0 END) -      SUM(CASE WHEN LEFT(event.event_date, 4) = '2020' THEN budget.spent ELSE 0 END)) AS difference FROM      event JOIN      budget ON event.event_id = budget.link_eto_event;	student_club
SELECT `location` FROM `event` WHERE `event_name` = 'Spring Budget Review';	student_club
SELECT e.cost  FROM event e JOIN budget b ON e.link_to_budget = b.budget_id WHERE e.event_name = 'Posters' AND e.event_date = '2019-09-04';	student_club
SELECT remaining FROM budget WHERE category = 'Food' AND amount = (SELECT MAX(amount) FROM budget WHERE category = 'Food') LIMIT 1;	student_club
SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14';	student_club
SELECT COUNT(*) FROM `major` WHERE `college` = 'College of Humanities and Social Sciences';	student_club
SELECT phone FROM member WHERE first_ename = 'Carlo' AND last_ename = 'Jacobs';	student_club
SELECT `zip_code`.`county` FROM `member`, `zip_code` WHERE `member`.`first_name` = 'Adela' AND `member`.`last_name` = "O'Gallagher" AND `member`.`zip` = `zip_code`.`zip_code` LIMIT 1;	student_club
SELECT COUNT(*)  FROM event e  JOIN budget b ON e.event_id = b.link_to_event  WHERE e.event_name = 'November Meeting' AND b.remaining < 0;	student_club
SELECT SUM(b.amount)  FROM budget b  JOIN event e ON b.link_to_event = e.event_id  WHERE e.event_name = 'September Speaker';	student_club
SELECT v.name AS event_venue FROM expense ex JOIN budget b ON ex.budget_id = b.id JOIN venue v ON b.link_to_venue = v.id WHERE ex.description = 'Post Cards, Posters' AND ex.date = '2019-08-20';	student_club
SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Brent' AND member.last_name = 'Thomason';	student_club
SELECT COUNT(*) FROM member m  INNER JOIN major ma ON m.link_to_major = ma.major_id  WHERE ma.major_name = 'Business' AND m.t_shirt_size = 'Medium';	student_club
SELECT m.zip, z.type  FROM member m  INNER JOIN zip_code z ON m.zip = z.zip_ode  WHERE m.first_name = 'Christof' AND m.last_name = 'Nielson';	student_club
SELECT major.major_name  FROM member  JOIN major ON member.link_to_major = major.major_id  WHERE member.position = 'Vice President';	student_club
SELECT z.state FROM member AS m JOIN zip_code AS z ON m.zip = z.zip_code WHERE m.first_name = 'Sacha' AND m.last_name = 'Harrison';	student_club
SELECT `major`.`department` FROM `major`  JOIN `member` ON `major`.`major_id` = `member`.`link_to_major`  WHERE `member`.`position` = 'President';	student_club
SELECT income.date_received  FROM member  JOIN income ON member.member_id = income.link_to_member  WHERE member.first_name = 'Connor'  AND member.last_name = 'Hilton'  AND income.source = 'Dues';	student_club
SELECT m.first_name, m.last_name  FROM member m  JOIN income i ON m.member_id = i.link_to_member  WHERE i.source = 'Dues'  ORDER BY i.date_received ASC  LIMIT 1;	student_club
SELECT DIVIDE(SUM(CASE WHEN e.event_name = 'Yearly Kickoff' THEN b.amount END), SUM(CASE WHEN e.event_name = 'October Meeting' THEN b.amount END))  FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE b.category = 'Advertisement';	student_club
SELECT      (SUM(CASE WHEN b.category = 'Parking' THEN b.amount ELSE 0 END) / SUM(b.amount)) * 100 AS percentage,     e.event_name FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'November Speaker' GROUP BY e.event_name;	student_club
SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza';	student_club
SELECT COUNT(DISTINCT city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia';	student_club
SELECT DISTINCT department AS "College of Humanities and Social Sciences Departments"  FROM major  WHERE college = 'College of Humanities and Social Sciences';	student_club
SELECT `city`, `county`, `state` FROM `member` JOIN `zip_code` ON `member`.`zip` = `zip_code`.`zip_` WHERE `first_name` = 'Amy' AND `last_name` = 'Firth';	student_club
SELECT expense.expense_description FROM expense  JOIN budget ON expense.link_to_budget = budget.budget_id  WHERE budget.remaining = (SELECT MIN(remaining) FROM budget);	student_club
SELECT m.* FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'October Meeting';	student_club
WITH college_counts AS (     SELECT          ma.college,         COUNT(*) as member_count     FROM          member m     INNER JOIN          major ma ON m.link_to_major = ma.major_id     GROUP BY          ma.college ) SELECT      college, member_count FROM      college_counts WHERE      member_count = (SELECT MAX(member_count) FROM college_counts);	student_club
SELECT major.major_name FROM major JOIN member ON major.major_id = member.link_to_major WHERE member.phone = '809-555-3360';	student_club
SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event GROUP BY e.event_name HAVING MAX(b.amount) = (SELECT MAX(amount) FROM budget);	student_club
SELECT * FROM expense  JOIN member ON expense.link_to_member = member.member_id  WHERE member.position = 'Vice President';	student_club
SELECT COUNT(DISTINCT attendance.link_to_(member)) AS member_count  FROM attendance  JOIN event ON attendance.link_to_event = event.event_id  WHERE event.event_name = "Women's Soccer";	student_club
SELECT i.date_received  FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE m.first_name = 'Casey' AND m.last_name = 'Mason';	student_club
SELECT COUNT(m.member_id) AS md_count  FROM member m  JOIN zip_code z ON m.zip = z.zip_code  WHERE z.state = 'MD';	student_club
SELECT COUNT(DISTINCT a.link_to_event) AS event_count  FROM attendance a  JOIN member m ON a.link_to_member = m.member_id  WHERE m.phone = '954-555-6240';	student_club
SELECT member.first_ame, member.last_ame FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = "School of Applied Sciences, Technology and Education";	student_club
SELECT      e.event_name,     SUM(b.spent) / SUM(b.amount) AS spend_ratio FROM      event e JOIN      budget b ON e.event_id = b.link_to_event WHERE      e.status = 'Closed' GROUP BY      e.event_id, e.event_name ORDER BY      spend_ratio DESC LIMIT 1;	student_club
SELECT COUNT(*) FROM member WHERE position = 'President';	student_club
SELECT MAX(spent) FROM budget;	student_club
SELECT COUNT(*) FROM event WHERE type = 'Meeting' AND YEAR(event_date) = 2020;	student_club
SELECT SUM(spent) FROM budget WHERE category = 'Food';	student_club
SELECT m.first_name, m.last_name FROM attendance AS a JOIN member AS m ON a.link_to_member = m.member_id GROUP BY m.member_id HAVING COUNT(a.link_to_event) > 7;	student_club
SELECT m.member_id  FROM member m JOIN major mj ON m.link_to_major = mj.major_id JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE mj.major_name = 'Interior Design' AND e.event_name = 'Community Theater';	student_club
SELECT first_name, last_name FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Georgetown' AND zip_code.state = 'South Carolina';	student_club
SELECT SUM(income.amount) AS total_income  FROM income  JOIN member ON income.link_to_member = member.member_id  WHERE member.first_name = 'Grant' AND member.last_name = 'Gilmour';	student_club
SELECT m.first_name, m.last_name  FROM member AS m  JOIN income AS i ON m.member_id = i.link_to_member  WHERE i.amount > 40;	student_club
SELECT SUM(expense.cost) FROM expense  JOIN budget ON expense.link_to_budget = budget.budget_id  JOIN event ON budget.link_eto_event = event.event_id  WHERE event.event_name = 'Yearly Kickoff';	student_club
SELECT m.first_name, m.last_name FROM member AS m JOIN event AS e ON e.manager_id = m.member_id WHERE e.event_name = 'Yearly Kickoff';	student_club
SELECT member.first_name, member.last_name, income.source  FROM member  INNER JOIN income ON member.member_id = income.link_to_member  WHERE income.amount = (SELECT MAX(income.amount) FROM income);	student_club
SELECT `event`.`event_name`, MIN(`expense`.`cost`) AS min_cost FROM `event` JOIN `budget` ON `event`.`event_id` = `budget`.`link_to_event` JOIN `expense` ON `budget`.`budget_id` = `expense`.`link_to_budget` GROUP BY `event`.`event_name` ORDER BY min_cost ASC LIMIT 1;	student_club
WITH yearly_kickoff_cost AS (     SELECT SUM(e.cost) AS total_yearly_cost     FROM expense e     JOIN budget b ON e.link_to_budget = b.budget_id     JOIN event ev ON b.link_to_event = ev.event_id     WHERE ev.event_name = 'Yearly Kickoff' ), total_expenses AS (     SELECT SUM(e.cost) AS total_all_costs     FROM expense e ) SELECT      (yearly_kickoff_cost.total_yearly_cost / total_expenses.total_all_costs) * 100 AS percentage FROM yearly_kickoff_cost, total_expenses;	student_club
SELECT      (COUNT(CASE WHEN m.major_name = 'Finance' THEN 1 ELSE NULL END) /       COUNT(CASE WHEN m.major_name = 'Physics' THEN 1 ELSE NULL END)) AS finance_physics_ratio  FROM      member me  JOIN      major m ON me.link_to_major = m.major_id;	student_club
SELECT `source`, SUM(`amount`) AS total_amount FROM `income` WHERE `date_earned` BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY `source` ORDER BY total_amount DESC LIMIT 1;	student_club
SELECT member.first_name || ' ' || member.last_name AS full_name, member.email FROM member WHERE member.position = 'Secretary';	student_club
SELECT COUNT(member.member_id) AS total_members  FROM member  INNER JOIN major ON member.link_to_major = major.major_id  WHERE major.major_name = 'Physics Teaching';	student_club
SELECT COUNT(DISTINCT a.link_to_member) AS total_attendees  FROM attendance a  JOIN event e ON a.link_eto_event = e.event_id  WHERE e.event_name = 'Community Theater' AND YEAR(e.event_date) = 2019;	student_club
SELECT COUNT(*) AS event_count, m.major_name FROM attendance a JOIN member m ON a.link_to_member = m.member_id JOIN major mj ON m.link_to_major = mj.major_ id WHERE m.first_name = 'Luisa' AND m.last_name = 'Guidi' GROUP BY m.first_name, m.last_name, mj.major_name;	student_club
SELECT SUM(spent) / COUNT(*) FROM budget WHERE category = 'Food' AND event_status = 'Closed';	student_club
SELECT e.event_name, MAX(b.spent) AS max_spent  FROM event e  JOIN budget b ON e.event_id = b.link_to_event  WHERE b.category = 'Advertisement'  GROUP BY e.event_name;	student_club
SELECT COUNT(*) AS attended FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_vent = e.event_id WHERE m.first_name = 'Maya' AND m.last_name = 'Mclean' AND e.event_name = "Women's Soccer";	student_club
SELECT      (SUM(CASE WHEN `type` = 'Community Service' THEN 1 ELSE 0 END) / COUNT(`event_id`)) * 100 AS percentage FROM      event WHERE      `event_date` BETWEEN '2019-01-01' AND '2019-12-31';	student_club
SELECT SUM(expense.cost) AS cost_of_posters  FROM expense  JOIN budget ON expense.link_to_budget = budget.budget_id  JOIN event ON budget.link_to_event = event.event_id  WHERE event.event_name = 'September Speaker'  AND expense.expense_description = 'Posters';	student_club
SELECT t_shirt_size, COUNT(*) AS total  FROM member  GROUP BY t_shirt_size  ORDER BY total DESC  LIMIT 1;	student_club
SELECT e.event_name, b.budget_entry, b.remaining FROM event e JOIN budget b ON e.event_id = b.event_id;	student_club
SELECT e.expense_description AS type_of_expenses, SUM(e.cost) AS total_value_approved  FROM expense e  JOIN budget b ON e.link_to_budget = b.budget_id  JOIN event ev ON b.link_to_event = ev.event_id  WHERE ev.event_name = 'October Meeting' AND e.approved = 'yes'  GROUP BY e.expense_description;	student_club
SELECT      b.category,     SUM(b.amount) AS amount_budgeted FROM      budget b JOIN      event e ON b.link_to_event = e.event_id WHERE      e.event_name = 'April Speaker' GROUP BY      b.category ORDER BY      amount_budgeted ASC;	student_club
SELECT MAX(amount) FROM budget WHERE category = 'Food';	student_club
SELECT budget_ id, amount FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3;	student_club
SELECT SUM(cost) FROM expense WHERE expense_description = 'Parking';	student_club
SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20';	student_club
SELECT m.first_name, m.last_name, SUM(e.cost) AS total_cost FROM member m INNER JOIN expense e ON m.member_id = e.link_to_member WHERE m.member_id = 'rec4BLdZHS2Blfp4v';	student_club
SELECT expense.expense_description FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison';	student_club
SELECT e.expense_description  FROM expense e  JOIN member m ON e.link_to_member = m.member_id  WHERE m.t_shirt_size = 'X-Large';	student_club
SELECT member.zip  FROM member  JOIN expense ON member.member_id = expense.link_to_member  WHERE expense.cost < 50;	student_club
SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Phillip' AND member.last_name = 'Cullen';	student_club
SELECT `position` FROM `member`   JOIN `major` ON `member`.`link_to_major` = `major`.`major_id`   WHERE `major`.`major_name` = 'Business';	student_club
SELECT COUNT(member.member_id)  FROM member  INNER JOIN major ON member.link_to_major = major.major_id  WHERE major.major_name = 'Business'  AND member.t_shirt_size = 'Medium';	student_club
SELECT type FROM event e JOIN budget b ON e.event_id = b.link_to_vent WHERE b.remaining > 30;	student_club
SELECT DISTINCT type FROM event WHERE location = 'MU 215';	student_club
SELECT e.event_date, b.category FROM event e INNER JOIN budget b ON e.event_id = b.link_to_event WHERE e.event_date = '2020-03-24T12:00:00';	student_club
SELECT `major`.`major_name` FROM `member` JOIN `major` ON `member`.`link_to_major` = `major`.`major_id` WHERE `member`.`position` = 'Vice President';	student_club
SELECT (COUNT(b.major_id) / COUNT(m.member_id)) * 100 AS percentage_business_major FROM member m LEFT JOIN major b ON m.link_to_major = b.major_id WHERE b.major_name = 'Business';	student_club
SELECT type FROM event WHERE location = 'MU 215';	student_club
SELECT COUNT(*) FROM income WHERE amount = 50;	student_club
SELECT COUNT(*) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large';	student_club
SELECT COUNT(*) FROM major WHERE college = 'College of Agriculture and Applied Sciences' AND department = 'School of Applied Sciences, Technology and Education';	student_club
SELECT `last_name` FROM `member` WHERE `link_to_	student_club
SELECT b.category FROM budget as b JOIN event as e ON b.link_to_event = e.event_id WHERE e.location = 'MU 215' AND e.type = 'Guest Speaker' AND b.spent = 0;	student_club
SELECT city, state FROM member  JOIN major ON member.link_to_major = major.major_id  WHERE major.department = 'Electrical and Computer Engineering Department' AND member.position = 'Member'  JOIN zip_code ON member.zip = zip_code.zip_code;	student_club
SELECT event_name FROM event e  WHERE type = 'Social' AND location = '900 E. Washington St.'  AND (SELECT COUNT(*) FROM attendance a JOIN member m ON a.member_id = m.member_id WHERE a.link_to_event = e.event_id AND m.position = 'Vice President') > 0;	student_club
SELECT m.last_name, m.position  FROM member m  JOIN expense e ON m.member_id = e.link_to_member  WHERE e.expense_description = 'Pizza' AND e.expense_date = '2019-09-10';	student_club
SELECT DISTINCT m.last_name  FROM member AS m  JOIN attendance AS a ON m.member_id = a.link_to_member  JOIN event AS e ON a.link_to_event = e.event_id  WHERE e.event_name = 'Women''s Soccer' AND m.position = 'Member';	student_club
SELECT ROUND((COUNT(CASE WHEN i.amount = 50 THEN 1 ELSE NULL END) / COUNT(m.member_id)) * 100, 2) AS percentage  FROM member m  LEFT JOIN income i ON m.member_id = i.link_to_member  WHERE m.t_shirt_size = 'Medium' AND m.position = 'Member' AND i.source = 'Student_Club';	student_club
SELECT DISTINCT `short_state` FROM `zip_ode` WHERE `type` = 'PO Box';	student_club
SELECT zip_code FROM zip_code WHERE type = 'PO Box' AND county = 'San Juan Municipio' AND state = 'Puerto Rico';	student_club
SELECT `event_name` FROM `event` WHERE `type` = 'Game' AND `status` = 'Closed' AND `event_date` BETWEEN '2019-03-15' AND '2020-03-20';	student_club
SELECT DISTINCT a.link_to_event FROM attendance a JOIN expense ex ON a.link_to_member = ex.link_to_member WHERE ex.cost > 50;	student_club
SELECT m.first_name, m.last_name, m.email, a.link_to_event  FROM member m  JOIN attendance a ON m.member_id = a.link_to_member  WHERE m.member_id IN (     SELECT e.link_to_member      FROM expense e      WHERE e.approved = 'true' AND e.expense_date BETWEEN '2019-01-10' AND '2019-11-19' );	student_club
SELECT `college` FROM `major`  WHERE `major_id` = (     SELECT `link_to_ajor` FROM `member`      WHERE `first_name` = 'Katy' );	student_club
SELECT `phone` FROM `member`  JOIN `major` ON `member`.`link_to_major` = `major`.`major_id`  WHERE `major`.`major_name` = 'Business' AND `major`.`college` = 'College of Agriculture and Applied Sciences';	student_club
SELECT m.email  FROM member m  JOIN expense e ON m.member_id = e.link_to_member  WHERE e.cost > 20  AND e.expense_date BETWEEN '2019-09-10' AND '2019-11-19';	student_club
SELECT COUNT(*)  FROM member  JOIN major ON member.link_to_major = major.major_id  WHERE major.major_name = 'Education' AND major.college = 'College of Education & Human Services';	student_club
SELECT      (SUM(CASE WHEN b.remaining < 0 THEN 1 ELSE 0 END) / COUNT(e.event_id)) * 100 AS over_budget_percentage  FROM      event e  JOIN      budget b ON e.event_id = b.link_to_event;	student_club
SELECT event_id, location, status FROM event WHERE event_date BETWEEN '2019-11-01' AND '2020-03-31';	student_club
WITH avg_cost AS (     SELECT SUM(cost) / COUNT(expense_id) AS average     FROM expense ) SELECT e.* FROM expense e JOIN avg_cost ac ON TRUE WHERE ac.average > 50 AND e.cost > ac.average;	student_club
SELECT `first_name`, `last_name` FROM `member` WHERE `t_shirt_size` = 'X-Large';	student_club
SELECT (SUM(type = 'PO Box') / COUNT(zip_code)) * 100 AS percentage_po_box;	student_club
SELECT event_name, location FROM event  JOIN budget ON event.event_id = budget.link_to_event  WHERE budget.remaining > 0;	student_club
SELECT e.event_name, e.event_date  FROM event AS e  JOIN budget AS b ON e.event_id = b.link_to_event  JOIN expense AS ex ON b.budget_id = ex.link_to_budget  WHERE ex.expense_description = 'Pizza' AND ex.cost > 50 AND ex.cost < 100;	student_club
SELECT m.first_name, m.last_name, ma.major_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id JOIN expense e ON m.member_id = e.link_to_member WHERE e.cost > 100 GROUP BY m.member_id;	student_club
WITH event_income AS (     SELECT          e.event_id,         SUM(i.amount) as total_income     FROM          event e     JOIN          attendance a ON e.event_id = a.event_id     JOIN          member m ON a.member_id = m.member_id     LEFT JOIN          income i ON m.member_id = i.member_id     GROUP BY          e.event_id ) SELECT      ei.event_id,     z.city,     z.country FROM      event_income ei JOIN      attendance a ON ei.event_id = a.event_id JOIN      member m ON a.member_id = m.member_id JOIN      zip_code z ON m.zip_code = z.zip_code WHERE      ei.total_income > 40 GROUP BY      ei.event_id, z.city, z.country LIMIT 1;	student_club
WITH members_expenses AS (     SELECT          m.member_id,         m.first_name,         m.last_name,         SUM(e.cost) AS total_cost,         COUNT(DISTINCT e.link_to_budget) AS event_count     FROM          expense e     JOIN          member m ON e.link_to_member = m.member_id     GROUP BY          m.member_id, m.first_name, m.last_name ) SELECT      member_id, first_name, last_name, total_cost FROM      members_expenses WHERE      event_count > 1 ORDER BY      total_cost DESC LIMIT 1;	student_club
WITH event_totals AS (     SELECT ev.event_id, SUM(e.cost) as total_cost     FROM expense e     JOIN budget b ON e.link_Expense_to_budget = b.budget_id     JOIN event ev ON b.link_Budget_to_event = ev.event_id     JOIN member m ON e.link_Expense_to_member = m.member_id     WHERE m.position != 'Member'     GROUP BY ev.event_id ) SELECT SUM(et.total_cost) / COUNT(et.event_id) AS average_amount FROM event_totals et;	student_club
WITH    event_parking AS (     SELECT e.event_name, SUM(exp.cost) as total_parking_cost     FROM event e     JOIN budget b ON e.event_id = b.link_to_event     WHERE b.category = 'Parking'     GROUP BY e.event_name   ),   average_parking_cost AS (     SELECT (SUM(total_parking_cost) / COUNT(event_name)) as avg_cost     FROM event_parking   ) SELECT ep.event_name FROM event_parking ep, average_parking_cost apc WHERE ep.total_parking_cost < apc.avg_cost;	student_club
SELECT (SUM(e.cost) / COUNT(DISTINCT ev.event_id)) * 100 AS percentage FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id WHERE ev.type = 'Meeting';	student_club
SELECT b.budget_id, MAX(e.cost) AS max_cost  FROM expense e  JOIN budget b ON e.link_to_budget = b.budget_id  WHERE e.expense_description = 'Water, chips, cookies'  GROUP BY b.budget_id  ORDER BY max_cost DESC  LIMIT 1;	student_club
SELECT first_name, last_name FROM member  JOIN expense ON member.member_id = expense.link_to_member  GROUP BY member.member_id  ORDER BY SUM(expense.cost) DESC  LIMIT 5;	student_club
SELECT `first_name`, `last_name`, `phone` FROM `member`  WHERE `member_id` IN (     SELECT `link_to_member` FROM `expense`      WHERE `cost` > (SELECT AVG(`cost`) FROM `expense`) );	student_club
SELECT      ((COUNT(CASE WHEN state = 'New Jersey' THEN 1 END) * 100.0 / COUNT(*)) - (COUNT(CASE WHEN state = 'Vermont' THEN 1 END) * 100.0 / COUNT(*))) AS difference FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE position = 'Member';	student_club
SELECT m.major_name AS Major, d.department AS Department FROM member m  JOIN major d ON m.link_to_major = d.major_id WHERE m.first_name = 'Garrett' AND m.last_name = 'Gerke';	student_club
SELECT member.first_name || ' ' || member.last_name AS full_name, expense.cost  FROM member  INNER JOIN expense ON member.member_id = expense.link_to_member  WHERE expense.expense_description = 'Water, Veggie tray, supplies';	student_club
SELECT `last_name`, `phone` FROM `member` JOIN `major` ON `member`.`link_to_major` = `major`.`major_id` WHERE `major`.`major_name` = 'Elementary Education';	student_club
SELECT `category`, `amount` FROM `budget` INNER JOIN `event` ON `budget`.`link_to_event` = `event`.`event_id` WHERE `event`.`event_name` = 'January Speaker';	student_club
SELECT event.event_name  FROM event  JOIN budget ON event.event_id = budget.link_to_event  WHERE budget.category = 'Food';	student_club
SELECT m.first_name, m.last_name, i.amount  FROM member m  JOIN income i ON m.member_id = i.link_to_member  WHERE i.date_received = '9/9/2019';	student_club
SELECT      b.category  FROM      budget b  JOIN      expense e ON b.budget_id = e.link_to_budget  WHERE      e.expense_description = 'Posters';	student_club
SELECT member.first_name, member.last_name, major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Secretary';	student_club
SELECT      e.event_name AS EventName,     SUM(b.spent) AS TotalAmountSpent FROM      budget b JOIN      event e ON b.link_to_event = e.event_id WHERE      b.category = 'Speaker Gifts' GROUP BY      e.event_name;	student_club
SELECT z.city  FROM member m  JOIN zip_code z ON m.zip = z.zip_code  WHERE m.first_name = 'Garrett' AND m.last_name = 'Gerke';	student_club
SELECT m.first_name, m.last_name, m.position  FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE z.city = 'Lincolnton' AND z.state = 'North Carolina' AND z.zip_code = 28092;	student_club
SELECT COUNT(*) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium';	debit_card_specializing
SELECT      (SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) /       SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END)) AS ratio FROM customers;	debit_card_specializing
SELECT y.CustomerID, SUM(y.Consumption) AS TotalConsumption FROM yearmonth y JOIN customers c ON y.CustomerID = c.CustomerID WHERE y.Date BETWEEN '201201' AND '201212' AND c.Segment = 'LAM' GROUP BY y.CustomerID ORDER BY TotalConsumption ASC LIMIT 1;	debit_card_specializing
SELECT AVG(y.Consumption) AS AverageMonthlyConsumption FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE c.Segment = 'SME' AND y.Date BETWEEN '201301' AND '201312';	debit_card_specializing
SELECT c.CustomerID, SUM(y.Consumption) AS TotalConsumption FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE c.Currency = 'CZK' AND y.Date BETWEEN '201101' AND '201112' GROUP BY c.CustomerID ORDER BY TotalConsumption DESC;	debit_card_specializing
SELECT COUNT(DISTINCT c.CustomerID) AS NumberOfCustomers FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE c.Segment = 'SME'   AND y.Date BETWEEN '201201' AND '201212' GROUP BY c.CustomerID HAVING SUM(y.Consumption) < 30000;	debit_card_specializing
SELECT      SUM(CASE WHEN c.Currency = 'CZK' THEN y.Consumption ELSE 0 END) AS CZK_Total,     SUM(CASE WHEN c.Currency = 'EUR' THEN y.Consumption ELSE 0 END) AS EUR_Total,     (SUM(CASE WHEN c.Currency = 'CZK' THEN y.Consumption ELSE 0 END) -       SUM(CASE WHEN c.Currency = 'EUR' THEN y.Consumption ELSE 0 END)) AS Difference FROM      customers c JOIN      yearmonth y ON c.CustomerID = y.CustomerID WHERE      CAST(y.Date AS INT) BETWEEN 201201 AND 201212;	debit_card_specializing
SELECT substr(y.Date, 1, 4) AS Year, SUM(y.Consumption) AS TotalConsumption  FROM yearmonth y  JOIN customers c ON y.CustomerID = c.CustomerID  WHERE c.Currency = 'EUR'  GROUP BY substr(y.Date, 1, 4)  ORDER BY TotalConsumption DESC;	debit_card_specializing
SELECT c.Segment  FROM customers c  JOIN yearmonth y ON c.CustomerID = y.CustomerID  GROUP BY c.Segment  ORDER BY SUM(y.Consumption) ASC  LIMIT 1;	debit_card_specializing
SELECT substr(y.Date, 1, 4) AS Year, SUM(y.Consumption) AS TotalConsumption  FROM yearmonth y  JOIN customers c ON y.CustomerID = c.CustomerID  WHERE c.Currency = 'CZK'  GROUP BY Year  ORDER BY TotalConsumption DESC  LIMIT 1;	debit_card_specializing
WITH sme_2013 AS (     SELECT         c.Segment,         y.Consumption,         y.Date     FROM yearmonth y     JOIN customers c ON y.CustomerID = c.CustomerID     WHERE c.Segment = 'SME'       AND substr(y.Date, 1, 4) = '2013' ), max_consumption AS (     SELECT MAX(Consumption) as max_consume FROM sme_2013 ) SELECT      substr(Date,5,2) AS Month,     Consumption FROM sme_2013 WHERE Consumption = (SELECT max_consume FROM max_consumption);	debit_card_specializing
WITH AnnualTotals AS (     SELECT CustomerID, SUM(Consumption) as AnnualTotal     FROM yearmonth     WHERE Date BETWEEN '2013-01' AND '2013-12'     GROUP BY CustomerID ), RankedCustomers AS (     SELECT c.Segment, at.CustomerID, at.AnnualTotal,            RANK() OVER (PARTITION BY c.Segment ORDER BY at.AnnualTotal) as ConsumptionRank     FROM AnnualTotals at     JOIN customers c ON at.CustomerID = c.CustomerID ) SELECT Segment,        SUM(AnnualTotal) AS TotalSum,        COUNT(*) AS NumberOfCustomers,        CAST(SUM(AnnualTotal) AS FLOAT) / COUNT(*) AS AverageAnnualTotal FROM RankedCustomers WHERE ConsumptionRank = 1 GROUP BY Segment;	debit_card_specializing
WITH customer_yearly AS (     SELECT c.CustomerID,            YEAR(y.Date) as Year,            SUM(y.Consumption) as TotalConsumption     FROM yearmonth y     JOIN customers c ON y.CustomerID = c.CustomerID     WHERE c.Currency = 'EUR'     GROUP BY c.CustomerID, YEAR(y.Date) ), customer_2012_2013 AS (     SELECT cy2012.CustomerID,            cy2012.TotalConsumption as Consumption2012,            cy2013.TotalConsumption as Consumption2013     FROM customer_yearly cy2012     JOIN customer_yearly cy2013 ON cy2012.CustomerID = cy2013.CustomerID     WHERE cy2012.Year = 2012 AND cy2013.Year = 2013 ) SELECT     MAX(((Consumption2013 - Consumption2012) / NULLIF(Consumption2012, 0)) * 100) AS MaxIncrease,    MIN(((Consumption2013 - Consumption2012) / NULLIF(Consumption2012, 0)) * 100) AS MinChange FROM customer_2012_2013 WHERE Consumption2012 > 0;	debit_card_specializing
SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311';	debit_card_specializing
SELECT      (COUNT(*) FILTER (WHERE Country = 'CZE' AND Segment = 'Value for money') - COUNT(*) FILTER (WHERE Country = 'SVK' AND Segment = 'Value for money')) AS more_discount_stations FROM      gasstations;	debit_card_specializing
SELECT (COALESCE((SELECT Consumption FROM yearmonth WHERE CustomerID = 7 AND Date = '201304'), 0)) - (COALESCE((SELECT Consumption FROM yearmonth WHERE CustomerID = 5 AND Date = '201304'), 0));	debit_card_specializing
SELECT      COUNT(CASE WHEN Currency = 'CZK' THEN 1 END) AS CZK_Count,     COUNT(CASE WHEN Currency = 'EUR' THEN 1 END) AS EUR_Count,     (COUNT(CASE WHEN Currency = 'CZK' THEN 1 END) - COUNT(CASE WHEN Currency = 'EUR' THEN 1 END)) AS Difference FROM      customers WHERE      Segment = 'SME';	debit_card_specializing
SELECT y.CustomerID, MAX(y.Consumption) AS HighestConsumption  FROM yearmonth y  JOIN customers c ON y.CustomerID = c.CustomerID  WHERE c.Segment = 'LAM' AND c.Currency = 'EUR' AND y.Date = '201310' GROUP BY y.CustomerID ORDER BY HighestConsumption DESC LIMIT 1;	debit_card_specializing
SELECT c.CustomerID, SUM(y.Consumption) AS TotalConsumption FROM customers c LEFT JOIN yearmonth y ON c.CustomerID = y.CustomerID GROUP BY c.CustomerID ORDER BY TotalConsumption DESC LIMIT 1;	debit_card_specializing
;	debit_card_specializing
WITH  qualifying_customers AS (     SELECT COUNT(DISTINCT y.CustomerID) as q_count     FROM yearmonth y     JOIN customers c ON y.CustomerID = c.CustomerID     WHERE c.Segment = 'LAM' AND y.Consumption > 46.73 ), total_lam AS (     SELECT COUNT(*) as t_count     FROM customers      WHERE Segment = 'LAM' ) SELECT (q.q_count / t.t_count::float) * 100 as percentage FROM qualifying_customers q, total_lam t;	debit_card_specializing
SELECT Country, COUNT(GasStationID) AS NumberOfStations  FROM gasstations  WHERE Segment = 'Value for money'  GROUP BY Country;	debit_card_specializing
SELECT      COUNT(*) FILTER (WHERE currency = 'EUR')::numeric / COUNT(*) * 100 AS eur_percentage FROM      customers WHERE      segment = 'KAM';	debit_card_specializing
SELECT (COUNT(CASE WHEN Consumption > 528.3 THEN CustomerID END) * 100.0 / COUNT(CustomerID)) AS Percentage FROM yearmonth WHERE Date = '201202';	debit_card_specializing
SELECT CASE WHEN total_count = 0 THEN 0.0 ELSE (premium_count * 100.0 / total_count) END AS percentage_premium  FROM (     SELECT COUNT(CASE WHEN Segment='Premium' AND Country='Slovakia' THEN 1 END) AS premium_count,             COUNT(CASE WHEN Country='Slovakia' THEN 1 END) AS total_count      FROM gasstations );	debit_card_specializing
SELECT CustomerID FROM yearmonth WHERE Date = '201309' ORDER BY Consumption DESC LIMIT 1;	debit_card_specializing
SELECT c.Segment  FROM customers c  JOIN yearmonth y ON c.CustomerID = y.CustomerID  WHERE y.Date = '201309'  GROUP BY c.Segment  ORDER BY SUM(y.Consumption) ASC  LIMIT 1;	debit_card_specializing
SELECT y.CustomerID, y.Consumption  FROM yearmonth y JOIN customers c ON y.CustomerID = c.CustomerID WHERE c.Segment = 'SME' AND y.Date = '201206' ORDER BY y.Consumption ASC LIMIT 1;	debit_card_specializing
SELECT MAX(Consumption) AS HighestMonthlyConsumption  FROM yearmonth  WHERE substr(Date, 1, 4) = '2012';	debit_card_specializing
SELECT MAX(ym.Consumption) AS BiggestMonthlyConsumption  FROM yearmonth ym  JOIN customers c ON ym.CustomerID = c.CustomerID  WHERE c.Currency = 'EUR';	debit_card_specializing
SELECT DISTINCT p.Description FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID WHERE YEAR(t.Date) = 2013 AND MONTH(t.Date) = 9;	debit_card_specializing
SELECT gs.Country  FROM yearmonth ym  JOIN transactions_1k t ON ym.CustomerID = t.CustomerID  JOIN gasstations gs ON t.GasStationID = gs.GasStationID  WHERE ym.Date = '201306'  GROUP BY gs.Country;	debit_card_specializing
SELECT DISTINCT g.ChainID FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'EUR';	debit_card_specializing
SELECT DISTINCT p.Description FROM transactions_1k t  JOIN customers c ON t.CustomerID = c.CustomerID  JOIN products p ON t.ProductID = p.ProductID  WHERE c.Currency = 'EUR';	debit_card_specializing
SELECT AVG(Amount * Price) AS AverageTotalPrice  FROM transactions_1k  WHERE Date LIKE '2012-01%';	debit_card_specializing
SELECT COUNT(DISTINCT c.CustomerID) AS CountOfCustomers  FROM customers c  JOIN yearmonth y ON c.CustomerID = y.CustomerID  WHERE c.Currency = 'EUR' AND y.Consumption > 1000;	debit_card_specializing
SELECT p.Description FROM gasstations AS g JOIN transactions_1k AS t ON g.GasStationID = t.GasStationID JOIN products AS p ON t.ProductID = p.ProductID WHERE g.Country = 'CZE';	debit_card_specializing
SELECT DISTINCT `Time` FROM `transactions_1k`  JOIN `gasstations` ON `transactions_1k`.`GasStationID` = `gasstations`.`GasStationID`  WHERE `gasstations`.`ChainID` = 11;	debit_card_specializing
SELECT COUNT(*)  FROM transactions_1k t  JOIN gasstations g ON t.GasStationID = g.GasStationID  WHERE g.Country = 'CZE' AND t.Price > 1000;	debit_card_specializing
SELECT COUNT(t.TransactionID) AS NumberOfTransactions FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.Country = 'CZE' AND t.Date > '2012-01-01';	debit_card_specializing
SELECT AVG(t.Amount * t.Price) AS AverageTotalPrice FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.Country = 'CZE';	debit_card_specializing
SELECT AVG(total_price) AS avg_total_price  FROM (     SELECT t.CustomerID, SUM(t.Price) AS total_price      FROM transactions_1k t      JOIN customers c ON t.CustomerID = c.CustomerID      WHERE c.Currency = 'EUR'      GROUP BY t.CustomerID );	debit_card_specializing
SELECT CustomerId, SUM(Amount) AS TotalAmount FROM transactions_1k WHERE Date = '2012-08-25' GROUP BY CustomerId ORDER BY TotalAmount DESC LIMIT 1;	debit_card_specializing
SELECT g.Country  FROM gasstations g  JOIN transactions_1k t ON g.GasStationID = t.GasStationID  WHERE t.Date = '2012-08-25'  ORDER BY t.Time ASC  LIMIT 1;	debit_card_specializing
SELECT c.Currency  FROM transactions_1k t  JOIN customers c ON t.CustomerID = c.CustomerID  WHERE t.Date = '2012-08-24' AND t.Time = '16:25:00';	debit_card_specializing
SELECT c.Segment FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Date = '2012-08-23' AND t.Time = '21:20:00';	debit_card_specializing
SELECT COUNT(*) FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'CZK' AND t.Date = '2012-08-26' AND t.Time < '13:00:00';	debit_card_specializing
SELECT Segment FROM customers ORDER BY CustomerID ASC LIMIT 1;	debit_card_specializing
SELECT g.Country  FROM transactions_1k t  INNER JOIN gasstations g ON t.GasStationID = g.GasStationID  WHERE t.Date = '2012-08-24' AND t.Time = '12:42:00';	debit_card_specializing
SELECT ProductID FROM transactions_1k WHERE Date = '2012-08-23' AND Time = '21:20:00';	debit_card_specializing
SELECT CustomerID FROM transactions_1k WHERE Amount = 124.05 AND Date = '2012-08-24'; SELECT Consumption, Date FROM yearmonth WHERE CustomerID = (SELECT CustomerID FROM transactions_1k WHERE Amount = 124.05 AND Date = '2012-08-24') AND Date LIKE '201201%';	debit_card_specializing
SELECT COUNT(*)  FROM transactions_1k t  INNER JOIN gasstations g ON t.GasStationID = g.GasStationID  WHERE t.Date = '2012-08-26'  AND t.Time BETWEEN '08:00:00' AND '09:00:00'  AND g.Country = 'CZE';	debit_card_specializing
SELECT c.Currency  FROM customers c  JOIN yearmonth y ON c.CustomerID = y.CustomerID  WHERE y.Date = '201306' AND y.Consumption = 214582.17;	debit_card_specializing
SELECT g.Country FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.CardID = 667467;	debit_card_specializing
SELECT c.CustomerID FROM transactions_1k t  JOIN customers c ON t.CustomerID = c.CustomerID  WHERE t.Date = '2012-08-24' AND t.Amount = 548.4;  The query retrieves the CustomerID of the transaction that occurred on August 24, 2012, with an amount of 548.4. However, based on the provided schema, nationality information isn't available in the customers table, so it cannot be determined from this data.	debit_card_specializing
SELECT      (COUNT(c.CustomerID) * 100.0 /       (SELECT COUNT(*) FROM transactions_1k t WHERE t.Date = '2012-08-25')) AS Percentage  FROM      customers c  JOIN      transactions_1k t ON c.CustomerID = t.CustomerID  WHERE      t.Date = '2012-08-25' AND c.Currency = 'EUR';	debit_card_specializing
WITH customer_id AS (     SELECT CustomerID      FROM transactions_1k      WHERE Date = '2012-08-25' AND Amount = 634.8 ) SELECT ((sum_2012 - sum_2013) / sum_2012) * 100 AS decrease_rate FROM (     SELECT          SUM(CASE WHEN strftime('%Y', Date) = '2012' THEN Consumption ELSE 0 END) AS sum_2012,         SUM(CASE WHEN strftime('%Y', Date) = '2013' THEN Consumption ELSE 0 END) AS sum_2013     FROM yearmonth      WHERE CustomerID IN (SELECT * FROM customer_id) ) AS consumption_data;	debit_card_specializing
SELECT GasStationID, SUM(Amount * Price) AS TotalRevenue  FROM transactions_1k  GROUP BY GasStationID  ORDER BY TotalRevenue DESC  LIMIT 1;	debit_card_specializing
SELECT    (COUNT(CASE WHEN Segment = 'Premium' THEN 1 END) * 100.0 / COUNT(*)) AS premium_percentage FROM gasstations WHERE Country = 'SVK';  Note: The result will be NULL since there are no records with Country = "SVK" in the gasstations table.	debit_card_specializing
SELECT      SUM(t.Price) AS TotalAmountSpent,     'AllTime' AS TimePeriod FROM transactions_1k t WHERE t.CustomerID = 38508 AND t.GasStationID IS NOT NULL UNION ALL SELECT      SUM(y.Consumption) AS January2012Spending,     'January2012' AS TimePeriod FROM yearmonth y WHERE y.CustomerID = 38508 AND y.Date = '201201';	debit_card_specializing
SELECT p.Description AS FullProductName FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID GROUP BY t.ProductID ORDER BY SUM(t.Amount) DESC LIMIT 5;	debit_card_specializing
SELECT      c.Currency,     y.CustomerID,     SUM(t.Price) AS TotalPrice,     SUM(t.Amount) AS TotalAmount,     (SUM(t.Price) / SUM(t.Amount)) AS AvgPricePerItem FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID GROUP BY t.CustomerID ORDER BY TotalPrice DESC LIMIT 1;	debit_card_specializing
SELECT g.Country FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.ProductID = 2 GROUP BY g.Country ORDER BY MAX(t.Price / t.Amount) DESC LIMIT 1;	debit_card_specializing
SELECT t.CustomerID, y.Consumption  FROM transactions_1k t  INNER JOIN yearmonth y ON t.CustomerID = y.CustomerID  WHERE t.ProductID = 5 AND (t.Price / t.Amount) > 29.00 AND y.Date = '201208';	debit_card_specializing
