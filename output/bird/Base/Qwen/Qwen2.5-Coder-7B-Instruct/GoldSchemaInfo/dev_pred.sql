SELECT MAX("Free Meal Count (K-12)" / "Enrollment (K-12)") AS Highest_Eligible_Free_Rate FROM frpm WHERE "County Name" = 'Alameda'; 
SELECT "Educational Option Type", ("Free Meal Count (Ages 5-17)" / "Enrollment (Ages 5-17)") AS Eligible_Free_Rate FROM frpm WHERE "Educational Option Type" LIKE '%Continuation%' ORDER BY Eligible_Free_Rate ASC LIMIT 3; 
SELECT s.Zip FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`Charter School (Y/N)` = 1 AND f.`District Name` = 'Fresno County Office of Education'; 
SELECT s.MailStreet FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode ORDER BY f.`FRPM Count (K-12)` DESC LIMIT 1; 
SELECT s.Phone FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`Charter School (Y/N)` = 1 AND f.`Charter Funding Type` = 'Directly funded' AND s.OpenDate > '2000-01-01'; 
SELECT COUNT(schools.School) FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.AvgScrMath > 400 AND schools.Virtual = 'F'; 
SELECT s.School FROM schools s JOIN satscores st ON s.CDSCode = st.cds WHERE st.NumTstTakr > 500 AND s.Magnet = 1; 
SELECT Phone FROM schools WHERE CDSCode = (SELECT cds FROM satscores ORDER BY NumGE1500 DESC LIMIT 1); 
SELECT NumTstTakr FROM satscores WHERE cds IN (     SELECT CDSCode FROM frpm ORDER BY `FRPM Count (K-12)` DESC LIMIT 1 ); 
SELECT COUNT(DISTINCT f.School_Code) FROM satscores s JOIN frpm f ON CAST(s.cds AS INTEGER) = f.CDSCode WHERE s.AvgScrMath > 560 AND f.`Charter Funding Type` = 'Directly funded'; 
SELECT f.`FRPM Count (Ages 5-17)` FROM satscores s JOIN frpm f ON s.cds = f.CDSCode ORDER BY s.AvgScrRead DESC LIMIT 1; 
SELECT f.CDSCode FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE f.`Enrollment (K-12)` + f.`Enrollment (Ages 5-17)` > 500; 
SELECT MAX(f.`Free Meal Count (Ages 5-17)` / f.`Enrollment (Ages 5-17)`) AS HighestEligibleFreeRate FROM frpm f JOIN satscores s ON f.CDSCode = s.cds WHERE s.NumGE1500 / s.NumTstTakr > 0.3; 
SELECT s.Phone FROM schools s JOIN (     SELECT cds,            CAST(NumGE1500 AS FLOAT) / NumTstTakr AS ExcellenceRate     FROM satscores ) ss ON s.CDSCode = ss.cds ORDER BY ss.ExcellenceRate DESC LIMIT 3; 
SELECT s.NCESSchool, f.[Enrollment (Ages 5-17)] FROM frpm f JOIN schools s ON CAST(f.CDSCode AS TEXT) = s.CDSCode ORDER BY f.[Enrollment (Ages 5-17)] DESC LIMIT 5; 
SELECT s.District, MAX(ss.AvgScrRead) AS HighestAvgScore FROM satscores ss JOIN schools s ON ss.cds = s.CDSCode WHERE s.StatusType = 'Active' GROUP BY s.District ORDER BY HighestAvgScore DESC LIMIT 1; 
SELECT COUNT(*) FROM satscores AS T1 JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.County = 'Alameda' AND T2.StatusType = 'Merged' AND T1.NumTstTakr < 100; 
SELECT s.CharterNum, AVG(sw.AvgScrWrite) AS AvgWritingScore FROM schools s JOIN satscores sw ON s.CDSCode = sw.cds WHERE sw.AvgScrWrite > 499 AND s.CharterNum IS NOT NULL GROUP BY s.CharterNum ORDER BY AvgWritingScore DESC; 
SELECT COUNT(*) FROM satscores AS T1 JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.City = 'Fresno' AND T2.FundingType = 'Directly funded' AND T1.NumTstTakr <= 250; 
SELECT T2.Phone FROM satscores AS T1 JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 1; 
SELECT COUNT(*) FROM frpm WHERE CDSCode IN (SELECT CDSCode FROM schools WHERE County = 'Amador') AND LowGrade = '9' AND HighGrade = '12'; 
SELECT COUNT(*) FROM frpm WHERE "County Name" = 'Los Angeles' AND "Free Meal Count (K-12)" > 500 AND "Free Meal Count (K-12)" < 700; 
SELECT sname FROM satscores WHERE cname = 'Contra Costa' ORDER BY NumTstTakr DESC LIMIT 1; 
SELECT s.School, s.StreetAbr FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE ABS(f.`Enrollment (K-12)` - f.`Enrollment (Ages 5-17)`) > 30; 
SELECT f."School Name" FROM frpm f JOIN satscores s ON f.CDSCode = s.cds WHERE f."Free Meal Count (K-12)" / f."Enrollment (K-12)" > 0.1 AND s.NumGE1500 > 0; 
SELECT s.sname, f."Charter Funding Type" FROM satscores s JOIN frpm f ON CAST(s.cds AS INTEGER) = f.CDSCode WHERE s.AvgScrMath > 400 AND f."District Name" LIKE '%Riverside%'; 
SELECT s.School_Name, s.Street, s.City, s.State, s.Zip FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE s.County = 'Monterey' AND f.School_Type LIKE '%High Schools%' AND f.Free_Meal_Count_Ages_5_17 > 800; 
SELECT s.School, s.Phone, AVG(sw.AvgScrWrite) FROM schools s JOIN satscores sw ON s.CDSCode = sw.cds WHERE (s.OpenDate > '1991-12-31' OR s.ClosedDate < '2000-01-01') GROUP BY s.School, s.Phone; 
SELECT s.School, s.DOC FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`Enrollment (K-12)` - f.`Enrollment (Ages 5-17)` > (     SELECT AVG(f2.`Enrollment (K-12)` - f2.`Enrollment (Ages 5-17)`)     FROM frpm f2     JOIN schools s2 ON f2.CDSCode = s2.CDSCode     WHERE s2.FundingType = 'Locally funded' ); 
SELECT s.OpenDate FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.[Enrollment (K-12)] = (     SELECT MAX([Enrollment (K-12)])     FROM frpm ); 
SELECT s.City FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode ORDER BY f.`Enrollment (K-12)` ASC LIMIT 5; 
SELECT "Free Meal Count (K-12)" / "Enrollment (K-12)" AS "Eligible Free Rate" FROM frpm ORDER BY "Enrollment (K-12)" DESC LIMIT 2; 
SELECT (frpm."FRPM Count (K-12)" / frpm."Enrollment (K-12)") AS "Eligible Free or Reduced Price Meal Rate" FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.SOC = '66' ORDER BY frpm."FRPM Count (K-12)" DESC LIMIT 5; 
SELECT T2.SchoolName, T2.Website FROM frpm AS T1 JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000;
SELECT (frpm."Free Meal Count (Ages 5-17)" / frpm."Enrollment (Ages 5-17)") AS "Free Rate" FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.AdmFName1 = 'Kacey' AND schools.AdmLName1 = 'Gibson'; 
SELECT s.AdmEmail1 FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`Charter School (Y/N)` = 1 ORDER BY f.`Enrollment (K-12)` ASC LIMIT 1; 
SELECT DISTINCT T1.AdmFName1, T1.AdmLName1, T1.AdmFName2, T1.AdmLName2, T1.AdmFName3, T1.AdmLName3 FROM schools AS T1 JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.NumGE1500 IS NOT NULL AND T2.NumGE1500 > 0 ORDER BY T2.NumGE1500 DESC LIMIT 1; 
SELECT s.Street, s.City, s.Zip, s.State FROM schools s JOIN (     SELECT cds, (NumGE1500::float / NumTstTakr) AS ExcellenceRate     FROM satscores ) ss ON s.CDSCode = ss.cds ORDER BY ss.ExcellenceRate ASC LIMIT 1; 
SELECT s.Website FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.County = 'Los Angeles' AND ss.NumTstTakr BETWEEN 2000 AND 3000; 
SELECT AVG(s.NumTstTakr) AS AvgTestTakers FROM satscores s JOIN schools sc ON s.cds = sc.CDSCode WHERE sc.County = 'Fresno' AND YEAR(sc.OpenDate) = 1980; 
SELECT s.Phone  FROM schools s  JOIN satscores ss ON s.CDSCode = ss.cds  WHERE s.District = 'Fresno Unified'  ORDER BY ss.AvgScrRead ASC  LIMIT 1; 
SELECT T1.School FROM schools AS T1 JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.Virtual = 'F' GROUP BY T1.County, T1.School ORDER BY AVG(T2.AvgScrRead) DESC LIMIT 5
SELECT T2.EdOpsName FROM satscores AS T1 JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 1; 
SELECT AVG(AvgScrMath) AS avg_math_score, County  FROM satscores  JOIN schools ON satscores.cds = schools.CDSCode  WHERE (AvgScrMath + AvgScrRead + AvgScrWrite) IN (     SELECT MIN(AvgScrMath + AvgScrRead + AvgScrWrite)      FROM satscores ) 
SELECT AVG(s.AvgScrWrite) AS AvgWritingScore, sc.City FROM satscores s JOIN schools sc ON s.cds = sc.CDSCode WHERE s.NumGE1500 IS NOT NULL ORDER BY s.NumGE1500 DESC LIMIT 1; 
SELECT s.School, AVG(ss.AvgScrWrite) AS AverageWritingScore FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.AdmFName1 = 'Ricci' AND s.AdmLName1 = 'Ulrich' GROUP BY s.School; 
SELECT s.School, f.[Enrollment (K-12)] FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.DOC = '31' ORDER BY f.[Enrollment (K-12)] DESC LIMIT 1; 
SELECT AVG(COUNT(*)) AS monthly_average FROM (     SELECT *     FROM schools     WHERE County = 'Alameda' AND DOC = '52' AND YEAR(OpenDate) = 1980     GROUP BY MONTH(OpenDate) ) AS monthly_counts; 
SELECT      SUM(CASE WHEN DOC = '54' THEN 1 ELSE 0 END) AS merged_unified_schools,     SUM(CASE WHEN DOC = '52' THEN 1 ELSE 0 END) AS merged_elementary_schools FROM      schools WHERE      StatusType = 'Merged' AND County = 'Orange'; 
SELECT DISTINCT County, School, ClosedDate FROM schools WHERE StatusType = 'Closed' ORDER BY County DESC; 
SELECT s.Street FROM schools s JOIN satscores ss ON s.cds = ss.cds ORDER BY ss.AvgScrMath DESC LIMIT 1 OFFSET 6
SELECT s.School, s.MailStreet FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds ORDER BY ss.AvgScrRead ASC LIMIT 1; 
SELECT COUNT(*) FROM satscores AS T1 JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE (T1.AvgScrRead + T1.AvgScrMath + T1.AvgScrWrite) >= 1500 AND T2.MailCity = 'Lakeport'; 
SELECT SUM(s.NumTstTakr) AS TotalTestTakers FROM satscores s JOIN schools sch ON s.cds = sch.CDSCode WHERE sch.MailCity = 'Fresno'; 
SELECT School, MailZip FROM schools WHERE AdmFName1 = 'Avetik' AND AdmLName1 = 'Atoian'; 
SELECT      (COUNT(CASE WHEN County = 'Colusa' THEN 1 END) * 1.0 /       COUNT(CASE WHEN County = 'Humboldt' THEN 1 END)) AS ratio FROM      schools WHERE      MailState = 'CA'; 
SELECT COUNT(*) FROM schools WHERE State = 'CA' AND MailCity = 'San Jose'; 
SELECT T2.Phone, T2.Ext FROM satscores AS T1 JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrWrite DESC LIMIT 1 OFFSET 332; 
SELECT School, Phone, Ext FROM schools WHERE Zip = '95203-3704'; 
SELECT Website FROM schools WHERE (AdmFName1 = 'Mike' AND AdmLName1 = 'Larson') OR (AdmFName1 = 'Dante' AND AdmLName1 = 'Alvarez'); 
SELECT Website FROM schools WHERE County = 'San Joaquin' AND Charter = 1 AND Virtual = 'P';
SELECT COUNT(*) FROM schools WHERE City = 'Hickman' AND Charter = 1 AND DOC = 52; 
SELECT COUNT(*) FROM frpm AS T1 JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.Charter = 0 AND (T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`) < 0.18; 
SELECT s.School, s.City, s.AdmFName1 || ' ' || s.AdmLName1 AS AdministratorName FROM schools s WHERE s.Charter = 1 AND s.CharterNum = '00D2'; 
SELECT COUNT(*) FROM schools WHERE MailCity = 'Hickman' AND CharterNum = '00D4'; 
SELECT      (COUNT(CASE WHEN FundingType = 'Locally funded' THEN 1 ELSE NULL END) /       COUNT(FundingType)) * 100 AS PercentageLocallyFunded FROM      schools WHERE      County = 'Santa Clara'; 
SELECT COUNT(*) FROM schools WHERE FundingType = 'Directly Funded' AND OpenDate BETWEEN '2000-01-01' AND '2005-12-31' AND County = 'Stanislaus'; 
SELECT COUNT(*) FROM schools WHERE City = 'San Francisco' AND ClosedDate LIKE '1989%' AND DOCType = 'Community College District'; 
SELECT County, COUNT(*) AS ClosureCount FROM schools WHERE StatusType = 'Closed' AND SOC = '11' AND ClosedDate BETWEEN '1980-01-01' AND '1989-12-31' GROUP BY County ORDER BY ClosureCount DESC LIMIT 1; 
SELECT NCESDist FROM schools WHERE SOC = '31'; 
SELECT COUNT(*) AS TotalSchools FROM schools WHERE StatusType IN ('Active', 'Closed') AND County = 'Alpine' AND School LIKE '%District Community Day School%'; 
SELECT T2.District_Code FROM schools AS T1 JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.City = 'Fresno' AND T1.Magnet = 0; 
SELECT SUM(frm.Enrollment) AS Total_Enrollment FROM frpm frm JOIN schools sch ON frm.CDSCode = sch.CDSCode WHERE sch.City = 'Fremont' AND sch.EdOpsCode = 'SSS' AND frm.`Academic Year` = '2014-2015'; 
SELECT frpm.`FRPM Count (Ages 5-17)`  FROM frpm  JOIN schools ON frpm.CDSCode = schools.CDSCode  WHERE schools.MailStreet = 'PO Box 1040'; 
SELECT MIN(GSserved) AS LowestGrade FROM schools WHERE NCESDist = '0613360' AND EdOpsCode = 'SPECON'; 
SELECT s.School, s.EILName FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`NSLP Provision Status` = 'Breakfast Provision 2' AND s.`County Code` = 37; 
SELECT s.City FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`NSLP Provision Status` = 'Lunch Provision 2' AND f.`Low Grade` = '9' AND f.`High Grade` = '12' AND s.EILCode = 'HS' AND s.County = 'Merced'; 
SELECT s.School, (f."FRPM Count (Ages 5-17)" / f."Enrollment (Ages 5-17)") * 100 AS "Percent (%) Eligible FRPM" FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE s.County = 'Los Angeles' AND s.GSserved = 'K-9'; 
SELECT GSserved FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT COUNT(*) AS NumberOfSchools FROM schools WHERE County IN ('San Diego', 'Santa Barbara') AND Virtual = 'F'; 
SELECT s.School Name, s.Latitude, f.School Type FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode ORDER BY s.Latitude DESC LIMIT 1; 
SELECT s.City, f.LowGrade, f.[School Name] FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.State = 'CA' ORDER BY s.Latitude ASC LIMIT 1; 
SELECT GSoffered FROM schools WHERE ABS(longitude) = (SELECT MAX(ABS(longitude)) FROM schools); 
SELECT      s.City,     COUNT(s.SchoolName) AS NumberOfSchools,     COUNT(DISTINCT s.City) AS NumberOfCities FROM      schools s JOIN      frpm f ON s.CDSCode = f.CDSCode WHERE      s.GSoffered LIKE '%K-%' AND s.Magnet = 1 AND f.`NSLP Provision Status` = 'Multiple Provision Types' GROUP BY      s.City; 
SELECT AdmFName1, District, COUNT(*) AS AdminCount FROM schools GROUP BY AdmFName1, District ORDER BY AdminCount DESC LIMIT 2; 
SELECT      (frpm."Free Meal Count (K-12)" / frpm."Enrollment (K-12)") * 100 AS "Percent (%) Eligible Free (K-12)",      frpm."District Code" FROM      frpm JOIN      schools ON frpm.CDSCode = schools.CDSCode WHERE      schools."AdmFName1" = 'Alusine'; 
SELECT AdmLName1, District, County, School FROM schools WHERE CharterNum = '40'; 
SELECT DISTINCT AdmEmail1 FROM schools WHERE County = 'San Bernardino' AND City = 'San Bernardino City Unified' AND OpenDate BETWEEN '2009-01-01' AND '2010-12-31' AND (SOC = '62' OR DOC = '54'); 
SELECT s.School, s.AdmEmail1 FROM schools s JOIN (     SELECT cds, SUM(NumGE1500) AS total_num_ge_1500     FROM satscores     GROUP BY cds     ORDER BY total_num_ge_1500 DESC     LIMIT 1 ) ss ON s.CDSCode = ss.cds; 
SELECT COUNT(*) FROM account AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 LIKE '%East Bohemia%' AND T1.frequency LIKE '%POPLATEK PO OBRATU%'; 
SELECT COUNT(*)  FROM account AS acc  JOIN district AS dist ON acc.district_id = dist.district_id  WHERE dist.A3 = 'Prague'; 
SELECT      CASE          WHEN AVG(A12) > AVG(A13) THEN '1995'         ELSE '1996'     END AS HigherUnemploymentYear,     AVG(A12) AS AvgUnemploymentRate1995,     AVG(A13) AS AvgUnemploymentRate1996 FROM      district; 
SELECT COUNT(*) FROM district AS d JOIN client AS c ON d.district_id = c.district_id WHERE c.gender = 'F' AND d.A11 BETWEEN 6000 AND 10000; 
SELECT COUNT(*)  FROM client c  JOIN district d ON c.district_id = d.district_id  WHERE c.gender = 'M' AND d.A3 = 'north Bohemia' AND d.A11 > 8000; 
SELECT MIN(account.account_id) AS account_number, MAX(district.A11) - MIN(district.A11) AS salary_gap FROM account JOIN client ON account.district_id = client.district_id JOIN district ON account.district_id = district.district_id WHERE client.gender = 'F' ORDER BY client.birth_date ASC, district.A11 ASC LIMIT 1; 
SELECT a.account_id FROM account a JOIN client c ON a.district_id = c.district_id WHERE c.birth_date = (     SELECT MIN(birth_date)     FROM client ) AND a.district_id IN (     SELECT district_id     FROM district     WHERE A11 = (         SELECT MAX(A11)         FROM district     ) ); 
SELECT COUNT(*)  FROM disp  JOIN account ON disp.account_id = account.account_id  WHERE disp.type = 'OWNER' AND account.frequency = 'POPLATEK TYDNE'; 
SELECT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id WHERE d.type = 'DISPONENT'; 
SELECT a.account_id, a.frequency FROM account a JOIN loan l ON a.account_id = l.account_id WHERE YEAR(l.date) = 1997 ORDER BY l.amount ASC LIMIT 1; 
SELECT l.account_id FROM loan l JOIN disp d ON l.account_id = d.account_id WHERE l.duration > 12 AND YEAR(l.date) = 1993 ORDER BY l.amount DESC LIMIT 1; 
SELECT COUNT(client_id) FROM client WHERE gender = 'F' AND birth_date < '1950-01-01' AND district_id IN (SELECT district_id FROM district WHERE A2 = 'Sokolov'); 
SELECT DISTINCT account_id FROM trans WHERE YEAR(date) = 1995 ORDER BY date ASC LIMIT 1; 
SELECT DISTINCT a.account_id FROM account a JOIN trans t ON a.account_id = t.account_id WHERE a.date < '1997-01-01' AND t.amount > 3000; 
SELECT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card ca ON d.disp_id = ca.disp_id WHERE ca.issued = '1994-03-03'; 
SELECT a.date FROM account AS a JOIN trans AS t ON a.account_id = t.account WHERE t.amount = 840 AND t.date = '1998-10-14'; 
SELECT district_id FROM account WHERE account_id = (SELECT account_id FROM loan WHERE date = '1994-08-25'); 
SELECT MAX(amount) AS max_transaction_amount FROM trans JOIN account ON trans.account_id = account.account_id WHERE account.date = '19961021'; 
SELECT c.gender FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.birth_date = (     SELECT MIN(birth_date)     FROM client     WHERE district_id = (         SELECT district_id         FROM district         ORDER BY A11 DESC         LIMIT 1     ) ); 
SELECT t.amount FROM trans t JOIN (     SELECT l.account_id, MIN(t.date) AS first_transaction_date     FROM loan l     JOIN trans t ON l.account_id = t.account_id AND t.date > l.date     GROUP BY l.account_id     ORDER BY l.amount DESC     LIMIT 1 ) sub ON t.account_id = sub.account_id AND t.date = sub.first_transaction_date; 
SELECT COUNT(*) FROM client AS c JOIN district AS d ON c.district_id = d.district_id WHERE d.A2 = 'Jesenik' AND c.gender = 'F'; 
SELECT d.disp_id FROM disp d JOIN trans t ON d.account_id = t.account_id WHERE t.amount = 5100 AND t.date = '1998-09-02'; 
SELECT COUNT(account_id)  FROM account  JOIN district ON account.district_id = district.district_id  WHERE district_name = 'Litomerice' AND EXTRACT(YEAR FROM date::date) = 1996; 
SELECT T2.A2 FROM client AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T1.birth_date = '1976-01-29'; 
SELECT c.birth_date FROM client c JOIN account a ON c.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id WHERE l.amount = 98832 AND l.date = '1996-01-03'; 
SELECT account_id FROM account WHERE district_id = (SELECT district_id FROM district WHERE A3 = 'Prague') ORDER BY date ASC LIMIT 1; 
SELECT (COUNT(CASE WHEN c.gender = 'M' THEN 1 END) / COUNT(c.client_id)) * 100 AS percentage_male_clients FROM client c JOIN district d ON c.district_id = d.district_id WHERE d.A3 = 'south Bohemia'; 
SELECT ((t1.balance - t2.balance) / t2.balance) * 100 AS increase_rate FROM trans t1 JOIN trans t2 ON t1.account_id = t2.account_id AND t1.date = '1998-12-27' WHERE t1.type = 'PRIJEM' AND t1.date BETWEEN '1993-03-22' AND '1998-12-27' AND EXISTS (     SELECT 1     FROM loan l     WHERE l.account_id = t1.account_id AND l.date = '1993-07-05' ); 
SELECT CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS FLOAT) * 100 / SUM(amount) FROM loan 
SELECT ((SUM(CASE WHEN status = 'C' THEN 1 ELSE 0 END) * 100.0) / COUNT(*)) AS percentage FROM loan WHERE amount < 100000; 
SELECT a.account_id, d.A2 AS district_name, d.A3 AS district_region FROM account a JOIN district d ON a.district_id = d.district_id WHERE a.frequency = 'POPLATEK PO OBRATU' AND EXTRACT(YEAR FROM TO_DATE(a.date, 'YYMMDD')) = 1993; 
SELECT a.account_id, a.frequency FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.A3 = 'east Bohemia' AND a.date BETWEEN '19950101' AND '20001231'; 
SELECT a.account_id, a.date FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.A2 = 'Prachatice'; 
SELECT d.A2 AS district, d.A3 AS region FROM district d JOIN account a ON d.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id WHERE l.loan_id = 4990; 
SELECT account_id, T2.A2 AS district, T2.A3 AS region FROM loan AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.amount > 300000; 
SELECT l.loan_id, d.A2 AS district, AVG(d.A11) AS average_salary FROM loan l JOIN account a ON l.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE l.duration = 60 GROUP BY l.loan_id, d.A2; 
SELECT d.district_id, (d.A13 - d.A12) / d.A12 * 100 AS unemployment_rate_increment FROM district d JOIN account a ON d.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id WHERE l.status = 'D'; 
SELECT (COUNT(CASE WHEN T2.A2 = 'Decin' THEN 1 ELSE NULL END) * 100.0 / COUNT(T1.account_id)) AS percentage FROM account AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE EXTRACT(YEAR FROM TO_DATE(T1.date::text, 'YYMMDD')) = 1993; 
SELECT account_id FROM account; 
SELECT d.A2, COUNT(c.client_id) AS num_female_holders FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'F' GROUP BY d.A2 ORDER BY num_female_holders DESC LIMIT 9; 
SELECT d.A2 AS district_name, COUNT(t.account_id) AS withdrawal_count FROM trans t JOIN account a ON t.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE t.type = 'VYDAJ' AND t.date LIKE '1996-01%' GROUP BY d.A2 ORDER BY withdrawal_count DESC LIMIT 10; 
SELECT COUNT(DISTINCT d.client_id) FROM client d JOIN disp ds ON d.client_id = ds.client_id JOIN district dt ON d.district_id = dt.district_id WHERE dt.A3 = 'south Bohemia' AND ds.type != 'OWNER'; 
SELECT d.A3 AS district_name, COUNT(l.account_id) AS active_loan_count FROM district d JOIN account a ON d.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id WHERE l.status IN ('C', 'D') GROUP BY d.A3 ORDER BY active_loan_count DESC LIMIT 1; 
SELECT AVG(loan.amount) AS average_loan_amount FROM loan JOIN account ON loan.account_id = account.account_id JOIN client ON account.district_id = client.district_id WHERE client.gender = 'M'; 
SELECT district_id, A2 FROM district ORDER BY A13 DESC LIMIT 1; 
SELECT COUNT(account_id) AS num_accounts FROM account WHERE district_id = (     SELECT district_id     FROM district     ORDER BY A16 DESC     LIMIT 1 ); 
SELECT COUNT(DISTINCT t1.account_id) AS negative_balance_accounts FROM trans t1 JOIN account t2 ON t1.account_id = t2.account_id WHERE t1.operation = 'VYBER KARTOU' AND t1.balance < 0 AND t2.frequency = 'POPLATEK MESICNE'; 
SELECT COUNT(DISTINCT l.account_id) AS loan_count FROM loan l JOIN account a ON l.account_id = a.account_id WHERE l.date BETWEEN '1995-01-01' AND '1997-12-31' AND l.amount >= 250000 AND a.frequency = 'POPLATEK MESICNE'; 
SELECT COUNT(*) FROM account AS acc JOIN loan AS lo ON acc.account_id = lo.account_id WHERE acc.district_id = 1 AND (lo.status = 'C' OR lo.status = 'D'); 
SELECT COUNT(client_id) AS male_clients_count FROM client WHERE district_id = (     SELECT district_id     FROM district     ORDER BY A15 DESC     LIMIT 1 OFFSET 1 ) AND gender = 'M'; 
SELECT COUNT(*) FROM card AS c JOIN disp AS d ON c.disp_id = d.disp_id WHERE c.type = 'gold' AND d.type = 'OWNER'; 
SELECT COUNT(*) FROM account AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Pisek'; 
SELECT d.district_id FROM district d JOIN account a ON d.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id WHERE t.amount > 10000 AND YEAR(t.date) = 1997; 
SELECT DISTINCT t1.account_id FROM trans AS t1 JOIN account AS t2 ON t1.account_id = t2.account_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.k_symbol = 'SIPO' AND t3.A2 = 'Pisek'; 
SELECT DISTINCT account_id FROM card WHERE type = 'gold'; 
SELECT AVG(amount) AS avg_credit_card_amount FROM trans WHERE operation = 'VYBER KARTOU' AND EXTRACT(YEAR FROM date) = 2021; 
SELECT DISTINCT t1.account_id FROM trans AS t1 JOIN card AS t2 ON t1.account_id = t2.account_id WHERE t2.type = 'gold' AND t1.amount < (SELECT AVG(amount) FROM trans WHERE date BETWEEN '1998-01-01' AND '1998-12-31') AND t1.date BETWEEN '1998-01-01' AND '1998-12-31'; 
SELECT c.client_id, c.gender FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card ca ON d.disp_id = ca.disp_id JOIN loan l ON d.account_id = l.account_id WHERE c.gender = 'F'; 
SELECT COUNT(*) FROM client AS c JOIN district AS d ON c.district_id = d.district_id WHERE c.gender = 'F' AND d.A3 = 'south Bohemia'; 
SELECT account_id FROM account JOIN district ON account.district_id = district.district_id WHERE A2 = 'Tabor' AND (SELECT type FROM disp WHERE disp.account_id = account.account_id) = 'OWNER'; 
SELECT d.type, AVG(a.A11) AS avg_income FROM disp d JOIN account a ON d.account_id = a.account_id JOIN district a11 ON a.district_id = a11.district_id WHERE d.type != 'OWNER' AND a11.A11 BETWEEN 8000 AND 9000 GROUP BY d.type; 
SELECT COUNT(DISTINCT t.account_id) AS account_count FROM trans t JOIN account a ON t.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE d.A3 = 'north Bohemia' AND t.bank = 'AB'; 
SELECT DISTINCT d.A2 FROM district d JOIN account a ON d.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id WHERE t.type = 'VYDAJ'; 
SELECT AVG(A15) AS avg_crimes_1995 FROM district d JOIN account a ON d.district_id = a.district_id WHERE A15 > 4000 AND YEAR(a.date) >= 1997; 
SELECT COUNT(*)  FROM card  JOIN disp ON card.disp_id = disp.disp_id  WHERE card.type = 'classic' AND disp.type = 'OWNER'; 
SELECT COUNT(*) FROM client AS c JOIN district AS d ON c.district_id = d.district_id WHERE c.gender = 'M' AND d.A2 = 'Hl.m. Praha'; 
SELECT CAST(SUM(CASE WHEN type = 'gold' AND issued < '1998-01-01' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(*) FROM card; 
SELECT c.name FROM client c JOIN disp d ON c.client_id = d.client_id JOIN loan l ON d.account_id = l.account_id WHERE d.type = 'OWNER' ORDER BY l.amount DESC LIMIT 1; 
SELECT d.A15 FROM district AS d JOIN account AS a ON d.district_id = a.district_id WHERE a.account_id = 532; 
SELECT T2.district_id FROM order AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.order_id = 33333; 
SELECT t.trans_id, t.operation, t.account FROM trans t JOIN disp d ON t.account_id = d.account_id WHERE d.client_id = 3356 AND t.operation = 'VYBER'; 
SELECT COUNT(DISTINCT l.account_id) AS weekly_loan_count FROM loan l JOIN account a ON l.account_id = a.account_id WHERE a.frequency = 'POPLATEK TYDNE' AND l.amount < 200000; 
SELECT c.type FROM card c JOIN disp d ON c.disp_id = d.disp_id WHERE d.client_id = 13539; 
SELECT T1.A3 FROM district AS T1 JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.client_id = 3541; 
SELECT d.district_id, COUNT(a.account_id) AS account_count FROM district d JOIN account a ON d.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id WHERE l.status = 'A' GROUP BY d.district_id ORDER BY account_count DESC LIMIT 1; 
SELECT c.client_id, c.district_id FROM client c JOIN account a ON c.district_id = a.district_id JOIN order o ON a.account_id = o.account_id WHERE o.order_id = 32423; 
SELECT t.trans_id FROM trans t JOIN account a ON t.account_id = a.account_id WHERE a.district_id = 5; 
SELECT COUNT(*) FROM account WHERE district_id = (SELECT district_id FROM district WHERE district_name = 'Jesenik'); 
SELECT client_id FROM disp WHERE disp_id IN (SELECT disp_id FROM card WHERE type = 'junior' AND issued >= '1997-01-01'); 
SELECT (SUM(CASE WHEN T2.gender = 'F' THEN 1 ELSE 0 END) * 100.0 / COUNT(T2.client_id)) AS percentage_women FROM district AS T1 JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A11 > 10000; 
SELECT      ((SUM(CASE WHEN YEAR(l.date) = 1997 THEN l.amount ELSE 0 END) - SUM(CASE WHEN YEAR(l.date) = 1996 THEN l.amount ELSE 0 END)) / SUM(CASE WHEN YEAR(l.date) = 1996 THEN l.amount ELSE 0 END)) * 100 AS growth_rate FROM      loan l JOIN      disp d ON l.account_id = d.account_id JOIN      client c ON d.client_id = c.client_id WHERE      c.gender = 'M' AND      (YEAR(l.date) = 1996 OR YEAR(l.date) = 1997); 
SELECT COUNT(*) FROM trans WHERE operation = 'VYBER KARTOU' AND date > '1995-12-31'; 
SELECT (SELECT A16 FROM district WHERE A3 = 'north Bohemia') - (SELECT A16 FROM district WHERE A3 = 'east Bohemia') AS crime_difference; 
SELECT type, COUNT(*) AS count FROM disp WHERE account_id BETWEEN 1 AND 10 GROUP BY type; 
SELECT T2.frequency, SUM(T1.amount) AS total_amount, T1.k_symbol FROM order AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.account_id = 3 AND T1.amount = 3539 GROUP BY T2.frequency, T1.k_symbol; 
SELECT EXTRACT(YEAR FROM birth_date) AS birth_year FROM client WHERE client_id = 130; 
SELECT COUNT(*) FROM disp JOIN account ON disp.account_id = account.account_id WHERE disp.type = 'OWNER' AND account.frequency = 'POPLATEK PO OBRATU'; 
SELECT SUM(l.amount) AS total_debt, l.status AS payment_status FROM loan l JOIN account a ON l.account_id = a.account_id JOIN client c ON a.client_id = c.client_id WHERE c.client_id = 992; 
SELECT SUM(t.balance), c.gender FROM trans t JOIN account a ON t.account_id = a.account_id JOIN client c ON a.district_id = c.district_id WHERE t.trans_id = 851 AND c.client_id = 4; 
SELECT c.type FROM card AS c JOIN disp AS d ON c.disp_id = d.disp_id WHERE d.client_id = 9; 
SELECT SUM(t.amount) AS total_amount_paid FROM trans t JOIN account a ON t.account_id = a.account_id WHERE t.date BETWEEN '1998-01-01' AND '1998-12-31' AND a.client_id = 617; 
SELECT c.client_id, c.birth_date FROM client c JOIN account a ON c.district_id = a.district_id JOIN district d ON a.district_id = d.district_id WHERE c.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND d.A3 = 'East Bohemia'; 
SELECT c.client_id FROM client c JOIN loan l ON c.client_id = l.account_id WHERE c.gender = 'F' ORDER BY l.amount DESC LIMIT 3; 
SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN trans t ON c.client_id = t.account_id WHERE c.gender = 'M' AND c.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND t.amount > 4000 AND t.k_symbol = 'SIPO'; 
SELECT COUNT(*) FROM account AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.district_name = 'Beroun' AND T1.date > '960000'; 
SELECT COUNT(DISTINCT c.client_id) AS female_customers_with_junior_cards FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card ca ON d.disp_id = ca.disp_id WHERE c.gender = 'F' AND ca.type = 'junior'; 
SELECT (COUNT(CASE WHEN C.gender = 'F' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_female_clients FROM client C JOIN district D ON C.district_id = D.district_id WHERE D.A3 = 'Prague'; 
SELECT (CAST(SUM(CASE WHEN T2.gender = 'M' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(T1.client_id)) AS percentage FROM account AS T1 JOIN client AS T2 ON T1.client_id = T2.client_id WHERE T1.frequency = 'POPLATEK TYDNE'; 
SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id WHERE a.frequency = 'POPLATEK TYDNE' AND d.type = 'OWNER'; 
SELECT l.account_id, MIN(l.amount) AS min_amount FROM loan l JOIN account a ON l.account_id = a.account_id WHERE l.duration > 24 AND a.date < '1997-01-01' GROUP BY l.account_id; 
SELECT a.account_id FROM account a JOIN client c ON a.district_id = c.district_id WHERE c.gender = 'F' ORDER BY c.birth_date ASC, d.A11 ASC LIMIT 1; 
SELECT COUNT(client_id) FROM client AS c JOIN district AS d ON c.district_id = d.district_id WHERE EXTRACT(YEAR FROM birth_date) = 1920 AND d.A3 = 'east Bohemia'; 
SELECT COUNT(*)  FROM loan  JOIN account ON loan.account_id = account.account_id  WHERE loan.duration = 24 AND account.frequency = 'POPLATEK TYDNE'; 
SELECT AVG(loan.payments) AS avg_loan_amount FROM loan JOIN account ON loan.account_id = account.account_id WHERE loan.status IN ('C', 'D') AND account.frequency = 'POPLATEK PO OBRATU'; 
SELECT d.account_id, dis.district_id FROM disp dis JOIN account d ON dis.account_id = d.account_id WHERE dis.type = 'OWNER'; 
SELECT c.client_id, (YEAR(CURDATE()) - YEAR(c.birth_date)) AS age FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card ca ON d.disp_id = ca.disp_id WHERE ca.type = 'gold' AND d.type = 'OWNER'; 
SELECT bond_type FROM bond GROUP BY bond_type ORDER BY COUNT(*) DESC LIMIT 1
SELECT COUNT(DISTINCT atom.molecule_id) AS count_non_carcinogenic_with_chlorine FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '-' AND atom.element = 'cl'; 
SELECT AVG(CASE WHEN T2.element = 'o' THEN 1 ELSE 0 END) FROM bond AS T1 JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-'
SELECT AVG(CASE WHEN T1.bond_type = '-' THEN 1 ELSE 0 END) FROM bond AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'
SELECT COUNT(*) FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'na' AND molecule.label = '-'; 
SELECT DISTINCT m.molecule_id, m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '#' AND m.label = '+'; 
SELECT CAST(SUM(CASE WHEN T2.element = 'c' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(T1.atom_id) AS percentage FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '='; 
SELECT COUNT(*) FROM bond WHERE bond_type = '#'; 
SELECT COUNT(*) FROM atom WHERE element != 'br'; 
SELECT COUNT(*) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+'; 
SELECT DISTINCT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'c'; 
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id IN (c.atom_id) WHERE c.bond_id = 'TR004_8_9'; 
SELECT DISTINCT T1.element FROM atom AS T1 JOIN bond AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_type = '='
SELECT label FROM atom WHERE element = 'h' GROUP BY label ORDER BY COUNT(label) DESC LIMIT 1; 
SELECT b.bond_type FROM bond b JOIN atom a ON b.bond_id IN (a.atom_id, a.atom_id2) WHERE a.element = 'cl'; 
SELECT DISTINCT atom_id, atom_id2 FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE bond_type = '-'); 
SELECT DISTINCT c.atom_id FROM connected c JOIN atom a ON c.atom_id = a.atom_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '-'; 
SELECT element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '-' GROUP BY element ORDER BY COUNT(element) ASC LIMIT 1; 
SELECT bond_type FROM connected JOIN bond ON connected.bond_id = bond.bond_id WHERE (connected.atom_id = 'TR004_8' AND connected.atom_id2 = 'TR004_20') OR (connected.atom_id = 'TR004_20' AND connected.atom_id2 = 'TR004_8'); 
SELECT label FROM molecule WHERE molecule_id NOT IN (SELECT molecule_id FROM atom WHERE element = 'sn'); 
SELECT COUNT(DISTINCT a.atom_id) FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE (a.element = 'i' OR a.element = 's') AND b.bond_type = '-'; 
SELECT c.atom_id, c.atom_id2 FROM connected c JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '#'; 
SELECT DISTINCT atom_id FROM connected WHERE atom_id IN (SELECT atom_id FROM atom WHERE molecule_id = 'TR181') OR atom_id2 IN (SELECT atom_id FROM atom WHERE molecule_id = 'TR181'); 
SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element = 'f' THEN T1.molecule_id ELSE NULL END) AS FLOAT) * 100 / COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'; 
SELECT CAST(SUM(CASE WHEN b.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(b.bond_id) AS percent FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.label = '+'; 
SELECT element FROM atom WHERE molecule_id = 'TR000' ORDER BY element ASC LIMIT 3; 
SELECT SUBSTRING(bond_id, 7, 2) AS atom_pair FROM bond WHERE molecule_id = 'TR001' AND bond_id = 'TR001_2_6'; 
SELECT (SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) - SUM(CASE WHEN label = '-' THEN 1 ELSE 0 END)) AS difference FROM molecule; 
SELECT atom_id, atom_id2 FROM connected WHERE bond_id = 'TR000_2_5'; 
SELECT bond_id FROM connected WHERE atom_id2 = 'TR000_2'; 
SELECT molecule_id FROM bond WHERE bond_type = ' = ' ORDER BY molecule_id ASC LIMIT 5; 
SELECT CAST(SUM(CASE WHEN T1.bond_type = '=' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.bond_id) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.molecule_id = 'TR008'
SELECT ROUND((SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) / COUNT(molecule_id)) * 100, 3) AS percent FROM molecule; 
SELECT ROUND(CAST(SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(atom_id), 4) AS percent FROM atom WHERE molecule_id = 'TR206'; 
SELECT bond_type FROM bond WHERE molecule_id = 'TR000'; 
SELECT T1.element, T2.label FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR060'; 
SELECT bond_type, COUNT(*) AS bond_count, label FROM connected  JOIN bond ON connected.bond_id = bond.bond_id  JOIN molecule ON bond.molecule_id = molecule.molecule_id  WHERE molecule_id = 'TR010'  GROUP BY bond_type, label  ORDER BY bond_count DESC  LIMIT 1; 
SELECT b.molecule_id FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '-' AND m.label = '-' ORDER BY b.molecule_id ASC LIMIT 3; 
SELECT b.bond_id FROM connected c JOIN atom a ON c.atom_id = a.atom_id WHERE a.molecule_id = 'TR006' ORDER BY b.bond_id ASC LIMIT 2; 
SELECT COUNT(*) FROM connected WHERE (atom_id = 'TR009_12' OR atom_id2 = 'TR009_12') AND molecule_id = 'TR009'; 
SELECT COUNT(*) FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'br' AND molecule.label = '+'; 
SELECT b.bond_type, c.atom_id, c.atom_id2 FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE b.bond_id = 'TR001_6_9'; 
SELECT m.molecule_id, m.label FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.atom_id = 'TR001_10'; 
SELECT COUNT(*) FROM bond WHERE bond_type = '#'; 
SELECT COUNT(*) FROM connected WHERE atom_id LIKE 'TR%_19'; 
SELECT element FROM atom WHERE molecule_id = 'TR004'; 
SELECT COUNT(*) FROM molecule WHERE label = '-'; 
SELECT DISTINCT m.molecule_id FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE SUBSTR(a.atom_id, 7, 2) BETWEEN '21' AND '25' AND m.label = '+'; 
SELECT DISTINCT b.bond_id FROM connected AS c JOIN atom AS a1 ON c.atom_id = a1.atom_id JOIN atom AS a2 ON c.bond_id LIKE CONCAT('%', a2.atom_id, '%') WHERE (a1.element = 'p' AND a2.element = 'n') OR (a1.element = 'n' AND a2.element = 'p'); 
SELECT m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '=' GROUP BY m.label ORDER BY COUNT(b.bond_id) DESC LIMIT 1; 
SELECT AVG(COUNT(bond_id)) FROM connected AS T1 JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T2.element = 'i' GROUP BY T1.atom_id
SELECT b.bond_type, b.bond_id FROM bond AS b JOIN connected AS c ON b.bond_id = c.bond_id WHERE CAST(SUBSTR(c.atom_id, 7, 2) AS INT) = 45; 
SELECT element FROM atom WHERE atom_id NOT IN (SELECT atom_id FROM connected); 
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE b.molecule_id = 'TR041' AND b.bond_type = '#'; 
SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id WHERE c.bond_id = 'TR144_8_19'; 
SELECT m.label, COUNT(b.bond_type) AS double_bond_count FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE m.label = '+' AND b.bond_type = '=' GROUP BY m.label ORDER BY double_bond_count DESC LIMIT 1; 
SELECT element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' GROUP BY element ORDER BY COUNT(*) ASC LIMIT 1; 
SELECT DISTINCT c.atom_id FROM connected c JOIN atom a ON c.atom_id2 = a.atom_id WHERE a.element = 'pb'; 
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '#'; 
SELECT CAST(SUM(CASE WHEN bond_type = (SELECT bond_type FROM bond GROUP BY bond_type ORDER BY COUNT(*) DESC LIMIT 1) THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(*) FROM connected JOIN bond ON connected.bond_id = bond.bond_id; 
SELECT ROUND((SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) * 100.0 / COUNT(T1.bond_id)), 5) AS percentage FROM bond AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-'
SELECT COUNT(*) FROM atom WHERE element IN ('c', 'h'); 
SELECT T2.atom_id2 FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 's'; 
SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id WHERE a.element = 'sn'; 
SELECT COUNT(DISTINCT a.element) AS num_elements_single_bond_molecules FROM atom a JOIN bond b ON a.molecule_id = b.molecule_id WHERE b.bond_type = '-'; 
SELECT COUNT(DISTINCT T2.atom_id) FROM bond AS T1 JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND (T2.element = 'p' OR T2.element = 'br'); 
SELECT b.bond_id FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.label = '+'; 
SELECT DISTINCT b.molecule_id FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '-' AND m.label = '-'; 
SELECT CAST(COUNT(CASE WHEN T3.element = 'cl' THEN 1 ELSE NULL END) AS FLOAT) * 100 / COUNT(T2.atom_id) FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN molecule AS T3 ON T2.molecule_id = T3.molecule_id WHERE T1.bond_type = '-'
SELECT label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002'); 
SELECT molecule_id FROM molecule WHERE label = '-'; 
SELECT COUNT(*) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR030' AND label = '+'; 
SELECT bond_type FROM bond WHERE molecule_id BETWEEN 'TR000' AND 'TR050'; 
SELECT a1.element AS element1, a2.element AS element2 FROM atom a1 JOIN connected c ON a1.atom_id = c.atom_id JOIN atom a2 ON c.bond_id = (SELECT bond_id FROM connected WHERE atom_id = c.atom_id) WHERE c.bond_id = 'TR001_10_11'; 
SELECT COUNT(DISTINCT b.bond_id) AS bond_count FROM bond b JOIN atom a ON b.molecule_id = a.molecule_id WHERE a.element = 'i'; 
SELECT MAX(m.label) AS majority_label FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'ca'; 
SELECT EXISTS (     SELECT 1     FROM connected AS c     JOIN atom AS a ON c.atom_id = a.atom_id     WHERE c.bond_id = 'TR001_1_8' AND a.element = 'cl' ) AND EXISTS (     SELECT 1     FROM connected AS c     JOIN atom AS a ON c.atom_id2 = a.atom_id     WHERE c.bond_id = 'TR001_1_8' AND a.element = 'c' ); 
SELECT DISTINCT b.molecule_id FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id JOIN atom a ON b.molecule_id = a.molecule_id WHERE b.bond_type = '#' AND m.label = '-' AND a.element = 'c' LIMIT 2; 
SELECT CAST(SUM(CASE WHEN T1.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'
SELECT element FROM atom WHERE molecule_id = 'TR001'; 
SELECT molecule_id FROM bond WHERE bond_type = '= ';
SELECT T1.atom_id, T1.atom_id2 FROM connected AS T1 JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_type = '#'; 
SELECT DISTINCT t1.element FROM atom AS t1 JOIN connected AS t2 ON t1.atom_id = t2.atom_id WHERE t2.bond_id = 'TR000_1_2'; 
SELECT COUNT(*) FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '-' AND molecule.label = '-'; 
SELECT T2.label FROM bond AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_10_11'; 
SELECT b.bond_id, m.label FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '#' AND m.label IN ('+', '-'); 
SELECT t1.element  FROM atom AS t1  JOIN molecule AS t2 ON t1.molecule_id = t2.molecule_id  WHERE t1.atom_id LIKE '%_4' AND t2.label = '+'; 
SELECT CAST(SUM(CASE WHEN T1.element = 'h' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.element) AS ratio, T2.label FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR006'; 
SELECT m.label FROM molecule AS m JOIN atom AS a ON m.molecule_id = a.molecule_id WHERE a.element = 'ca'; 
SELECT DISTINCT b.bond_type FROM connected c JOIN bond b ON c.bond_id = b.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE (a1.element = 'c' AND a2.element != 'c') OR (a1.element != 'c' AND a2.element = 'c'); 
SELECT DISTINCT a1.element AS element1, a2.element AS element2 FROM connected c JOIN bond b ON c.bond_id = b.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id AND SUBSTR(b.bond_id, 7, 2) = a1.atom_id JOIN atom a2 ON c.bond_id = b.bond_id AND SUBSTR(b.bond_id, 10, 2) = a2.atom_id WHERE b.bond_id = 'TR001_10_11'; 
SELECT (SUM(CASE WHEN bond_type = '#' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond_id)) AS percentage_of_triple_bonds FROM bond; 
SELECT CAST(SUM(CASE WHEN bond_type = '=' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(*) AS percent FROM bond WHERE molecule_id = 'TR047'; 
SELECT m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.atom_id = 'TR001_1'; 
SELECT label FROM molecule WHERE molecule_id = 'TR151'; 
SELECT element FROM atom WHERE molecule_id = 'TR151'; 
SELECT COUNT(*) FROM molecule WHERE label = '+'; 
SELECT atom_id FROM atom WHERE molecule_id BETWEEN 'TR010' AND 'TR050' AND element = 'c'; 
SELECT COUNT(*) FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+'); 
SELECT b.bond_id FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '=' AND m.label = '+'; 
SELECT COUNT(*) FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' AND T2.label = '+'; 
SELECT T2.molecule_id FROM connected AS T1 JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T1.atom_id = 'TR000_1' AND T1.bond_id = 'TR000_1_2'; 
SELECT DISTINCT atom_id FROM atom WHERE element = 'c' AND molecule_id IN (     SELECT molecule_id     FROM molecule     WHERE label = '-' ); 
SELECT CAST(SUM(CASE WHEN T1.label = '+' AND T2.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.molecule_id) AS percentage FROM molecule AS T1 JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id; 
SELECT label FROM molecule WHERE molecule_id = 'TR124'; 
SELECT atom_id FROM atom WHERE molecule_id = 'TR186'; 
SELECT bond_type FROM bond WHERE bond_id = 'TR007_4_19'; 
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id IN (c.atom_id) WHERE c.bond_id = 'TR001_2_4'; 
SELECT COUNT(*) AS double_bond_count, (SELECT label FROM molecule WHERE molecule_id = 'TR006') AS carcinogenicity FROM bond WHERE molecule_id = 'TR006' AND bond_type = '='; 
SELECT m.molecule_id, m.label, a.element FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+'; 
SELECT b.bond_id, b.bond_type, c1.atom_id AS atom1, c2.atom_id AS atom2 FROM bond b JOIN connected c1 ON b.bond_id = c1.bond_id JOIN connected c2 ON b.bond_id = c2.bond_id WHERE b.bond_type = '-'; 
SELECT DISTINCT b.molecule_id, a.element FROM bond b JOIN atom a ON b.molecule_id = a.molecule_id WHERE b.bond_type = '#'; 
SELECT a.element FROM atom a JOIN connected c ON a.atom_id IN (c.atom_id) WHERE c.bond_id = 'TR000_2_3'; 
SELECT COUNT(*) FROM connected WHERE atom_id IN (SELECT atom_id FROM atom WHERE element = 'cl'); 
SELECT a.atom_id, COUNT(b.bond_type) AS bond_count FROM atom a JOIN bond b ON a.molecule_id = b.molecule_id WHERE a.molecule_id = 'TR346' GROUP BY a.atom_id; 
SELECT COUNT(*) AS total_double_bonds, SUM(CASE WHEN molecule.label = '+' THEN 1 ELSE 0 END) AS carcinogenic_double_bonds FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '='; 
SELECT COUNT(DISTINCT b.molecule_id) FROM bond b JOIN atom a ON b.molecule_id = a.molecule_id WHERE b.bond_type != '=' AND a.element != 's'; 
SELECT T3.label FROM bond AS T1 JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T1.bond_id = 'TR001_2_4'; 
SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR001'; 
SELECT COUNT(*) FROM bond WHERE bond_type = '-'; 
SELECT m.molecule_id, m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'cl' AND m.label = '+'; 
SELECT m.molecule_id, m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'c' AND m.label = '-'; 
SELECT CAST(SUM(CASE WHEN T1.label = '+' AND T2.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.molecule_id) AS percentage FROM molecule AS T1 JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id; 
SELECT T1.molecule_id FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_1_7'; 
SELECT COUNT(DISTINCT element) AS element_count FROM atom WHERE atom_id IN (SELECT atom_id FROM connected WHERE bond_id = 'TR001_3_4'); 
SELECT bond_type FROM bond WHERE bond_id IN (SELECT bond_id FROM connected WHERE (atom_id = 'TR000_1' AND atom_id2 = 'TR000_2') OR (atom_id = 'TR000_2' AND atom_id2 = 'TR000_1')); 
SELECT b.molecule_id FROM connected c JOIN bond b ON c.bond_id = b.bond_id WHERE (c.atom_id = 'TR000_2' AND c.atom_id2 = 'TR000_4') OR (c.atom_id = 'TR000_4' AND c.atom_id2 = 'TR000_2'); 
SELECT element FROM atom WHERE atom_id = 'TR000_1'; 
SELECT label FROM molecule WHERE molecule_id = 'TR000'; 
SELECT (COUNT(CASE WHEN bond_type = '-' THEN 1 ELSE NULL END) * 100.0 / COUNT(bond_id)) AS percentage FROM bond; 
SELECT COUNT(*) FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'n' AND molecule.label = '+'; 
SELECT DISTINCT b.molecule_id FROM bond b JOIN atom a ON b.molecule_id = a.molecule_id WHERE a.element = 's' AND b.bond_type = '='; 
SELECT m.molecule_id, COUNT(a.atom_id) AS atom_count FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '-' GROUP BY m.molecule_id HAVING COUNT(a.atom_id) > 5; 
SELECT DISTINCT a.element FROM atom a JOIN bond b ON a.molecule_id = b.molecule_id WHERE b.bond_type = '=' AND a.molecule_id = 'TR024'; 
SELECT molecule_id  FROM molecule  JOIN atom ON molecule.molecule_id = atom.molecule_id  WHERE label = '+'  GROUP BY molecule_id  ORDER BY COUNT(atom.molecule_id) DESC  LIMIT 1; 
SELECT CAST(SUM(CASE WHEN m.label = '+' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(*) FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'h' AND b.bond_type = '#' 
SELECT COUNT(*) FROM molecule WHERE label = '+'; 
SELECT COUNT(*) FROM bond WHERE molecule_id BETWEEN 'TR004' AND 'TR010' AND bond_type = '-'; 
SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR008' AND element = 'c'; 
SELECT T1.element FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR004_7' AND T2.label = '-'; 
SELECT COUNT(DISTINCT b.molecule_id) AS total_molecules_with_double_bonded_oxygen FROM bond b JOIN atom a ON b.molecule_id = a.molecule_id WHERE b.bond_type = '= ' AND a.element = 'o'; 
SELECT COUNT(*) FROM molecule AS m JOIN bond AS b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '#' AND m.label = '-'; 
SELECT a.element, b.bond_type FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE a.molecule_id = 'TR002'; 
SELECT T2.atom_id FROM bond AS T1 JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '= ' AND T2.element = 'c' AND T1.molecule_id = 'TR012'; 
SELECT T1.atom_id FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'o'; 
SELECT * FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL; 
SELECT * FROM cards WHERE borderColor = 'borderless' AND cardKingdomFoilId IS NULL; 
SELECT name FROM cards WHERE faceConvertedManaCost = (SELECT MAX(faceConvertedManaCost) FROM cards);
SELECT id FROM cards WHERE frameVersion = '2015' AND edhrecRank < 100; 
SELECT c.id, c.rarity, c.uuid FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.rarity = 'mythic' AND l.status = 'Banned' AND l.format = 'gladiator'; 
SELECT T1.status FROM legalities AS T1 JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.types = 'Artifact' AND T2.side IS NULL AND T1.format = 'vintage'
SELECT c.id, c.artist FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE (c.power = '*' OR c.power IS NULL) AND l.format = 'commander' AND l.status = 'Legal'; 
SELECT c.id, c.text, r.text AS ruling_text, c.hasContentWarning FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.artist = 'Stephen Daniel'; 
SELECT T2.text FROM cards AS T1 JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sublime Epiphany' AND T1.number = '74s'
SELECT c.name, c.artist, c.isPromo, COUNT(r.uuid) AS ruling_count FROM cards c JOIN rulings r ON c.uuid = r.uuid GROUP BY c.name, c.artist, c.isPromo ORDER BY ruling_count DESC LIMIT 1; 
SELECT f.language FROM foreign_data f JOIN cards c ON f.uuid = c.uuid WHERE c.name = 'Annul' AND c.number = '29'; 
SELECT T1.name FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'; 
SELECT CAST(SUM(CASE WHEN language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(id) AS percentage FROM foreign_data; 
SELECT s.name, s.totalSetSize  FROM sets s  JOIN set_translations st ON s.code = st.setCode  WHERE st.language = 'Italian'; 
SELECT COUNT(DISTINCT type) FROM cards WHERE artist = 'Aaron Boyd'; 
SELECT keywords FROM cards WHERE name = 'Angel of Mercy'; 
SELECT COUNT(*) FROM cards WHERE power = '*'; 
SELECT promoTypes FROM cards WHERE name = 'Duress'
SELECT borderColor FROM cards WHERE name = 'Ancestor''s Chosen'; 
SELECT originalType FROM cards WHERE name = 'Ancestor\'s Chosen'; 
SELECT DISTINCT st.language  FROM set_translations st JOIN cards c ON st.id = c.set_id WHERE c.name = 'Angel of Mercy'; 
SELECT COUNT(*) FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Restricted' AND cards.isTextless = 0; 
SELECT t1.text FROM rulings AS t1 JOIN cards AS t2 ON t1.uuid = t2.uuid WHERE t2.name = 'Condemn'; 
SELECT COUNT(DISTINCT c.id) FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.isStarter = 1 AND l.status = 'Restricted'; 
SELECT T2.status FROM cards AS T1 JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'; 
SELECT type FROM cards WHERE name = 'Benalish Knight'; 
SELECT format FROM legalities WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Benalish Knight'); 
SELECT T1.artist FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian'; 
SELECT CAST(SUM(CASE WHEN borderColor = 'borderless' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(id) AS percentage FROM cards; 
SELECT COUNT(*) FROM foreign_data AS T1 JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.language = 'German' AND T2.isReprint = 1; 
SELECT COUNT(*)  FROM foreign_data  JOIN cards ON foreign_data.uuid = cards.uuid  WHERE foreign_data.language = 'Russian' AND cards.borderColor = 'borderless'; 
SELECT      CAST(SUM(CASE WHEN T1.language = 'French' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(T1.id) AS Percentage FROM      foreign_data AS T1 JOIN      cards AS T2 ON T1.uuid = T2.uuid WHERE      T2.isStorySpotlight = 1; 
SELECT COUNT(*) FROM cards WHERE toughness = '99'; 
SELECT name FROM cards WHERE artist = 'Aaron Boyd'; 
SELECT COUNT(*) FROM cards WHERE borderColor = 'black' AND availability LIKE '%mtgo%' AND NOT availability LIKE '%paper%'; 
SELECT id FROM cards WHERE convertedManaCost = 0; 
SELECT layout FROM cards WHERE keywords LIKE '%Flying%'
SELECT COUNT(*)  FROM cards  WHERE originalType = 'Summon - Angel' AND subtypes != 'Angel'; 
SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL; 
SELECT id FROM cards WHERE duelDeck = 'a'; 
SELECT edhrecRank FROM cards WHERE frameVersion = '2015'; 
SELECT T1.artist FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'; 
SELECT c.name FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.availability = 'paper' AND fd.language = 'Japanese'; 
SELECT COUNT(*) FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.status = 'Banned' AND c.borderColor = 'white'; 
SELECT f.uuid, fd.language FROM foreign_data fd JOIN cards c ON fd.uuid = c.uuid JOIN legalities l ON c.uuid = l.uuid WHERE l.format = 'legacy'; 
SELECT r.text FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.name = 'Beacon of Immortality'; 
SELECT COUNT(c.id), l.status FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.frameVersion = 'future' AND l.status = 'legal' GROUP BY l.status; 
SELECT c.id, c.colors FROM cards c JOIN set_translations st ON c.setCode = st.setCode WHERE st.setCode = 'OGW'; 
SELECT c.id, s.language FROM cards c JOIN set_translations s ON c.setCode = s.setCode WHERE c.convertedManaCost = 5 AND s.setCode = '10E'; 
SELECT c.originalType, r.date FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.originalType = 'Creature - Elf'; 
SELECT c.colors, l.format FROM cards AS c JOIN legalities AS l ON c.uuid = l.uuid WHERE c.id BETWEEN 1 AND 20; 
SELECT fd.name AS foreign_name, c.name AS card_name FROM foreign_data fd JOIN cards c ON fd.uuid = c.uuid WHERE c.originalType = 'Artifact' AND c.colors = 'B'; 
SELECT c.name FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.rarity = 'uncommon' ORDER BY r.date ASC LIMIT 3; 
SELECT COUNT(*) FROM cards WHERE artist = 'John Avon' AND cardKingdomFoilId IS NULL; 
SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL; 
SELECT COUNT(*) FROM cards WHERE artist = 'UDON' AND availability = 'mtgo' AND hand = -1; 
SELECT COUNT(*) FROM cards WHERE frameVersion = '1993' AND availability LIKE '%paper%' AND hasContentWarning = 1; 
SELECT manaCost FROM cards WHERE layout = 'normal' AND frameVersion = '2003' AND borderColor = 'black' AND availability LIKE '%mtgo%' AND availability LIKE '%paper%'; 
SELECT SUM(CONVERTEDMANACOST) AS TotalUnconvertedManaCost FROM cards WHERE artist = 'Rob Alexander'; 
SELECT DISTINCT subtype || ' ' || supertype AS type FROM cards WHERE availability LIKE '%arena%'; 
SELECT setCode FROM set_translations WHERE language = 'Spanish'; 
SELECT CAST(SUM(CASE WHEN isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards WHERE frameEffects = 'legendary'
SELECT CAST(SUM(CASE WHEN isStorySpotlight = 1 AND isTextless = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards
SELECT name, (SUM(CASE WHEN language = 'Spanish' THEN 1 ELSE 0 END) * 100 / COUNT(id)) AS percentage FROM foreign_data GROUP BY name; 
SELECT T1.language FROM set_translations AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.baseSetSize = 309; 
SELECT COUNT(*) FROM set_translations WHERE language = 'Portuguese (Brasil)' AND setCode IN (SELECT code FROM sets WHERE block = 'Commander'); 
SELECT c.id FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.types = 'Creature' AND l.status = 'Legal'; 
SELECT DISTINCT T1.subtypes, T1.supertypes FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL; 
SELECT COUNT(*) FROM cards WHERE power IS NULL OR power = '*' AND text LIKE '%triggered ability%'; 
SELECT COUNT(*) FROM cards JOIN legalities ON cards.uuid = legalities.uuid JOIN rulings ON cards.uuid = rulings.uuid WHERE legalities.format = 'premodern' AND rulings.text LIKE '%This is a triggered mana ability.%' AND cards.side IS NULL; 
SELECT c.id FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.artist = 'Erica Yang' AND l.format = 'pauper' AND c.availability LIKE '%paper%'; 
SELECT artist FROM cards WHERE flavorText = 'Das perfekte Gegenmittel zu einer dichten Formation';
SELECT T1.name  FROM foreign_data AS T1  JOIN cards AS T2 ON T1.uuid = T2.uuid  WHERE T1.language = 'French' AND T2.types = 'Creature' AND T2.layout = 'normal' AND T2.borderColor = 'black' AND T2.artist = 'Matthew D. Wilson'; 
SELECT COUNT(DISTINCT r.uuid) FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE r.date = '2007-02-01' AND c.rarity = 'rare'; 
SELECT T1.language  FROM set_translations AS T1  JOIN sets AS T2 ON T1.setCode = T2.code  WHERE T2.baseSetSize = 180 AND T2.block = 'Ravnica'; 
SELECT CAST(SUM(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(*) FROM cards AS T1 JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'legal'; 
SELECT CAST(SUM(CASE WHEN T1.language = 'French' AND (T2.power IS NULL OR T2.power = '*') THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.power IS NULL OR T2.power = '*' THEN 1 ELSE 0 END) FROM foreign_data AS T1 JOIN cards AS T2 ON T1.uuid = T2.uuid; 
SELECT CAST(SUM(CASE WHEN T1.language = 'Japanese' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(*) FROM set_translations AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.type = 'expansion'; 
SELECT availability FROM cards WHERE artist = 'Daren Bader'
SELECT COUNT(*) FROM cards WHERE borderColor = 'borderless' AND edhrecRank > 12000; 
SELECT COUNT(*) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1; 
SELECT name FROM cards WHERE (power IS NULL OR power = '*') AND promoTypes LIKE '%arenaleague%' ORDER BY name ASC LIMIT 3; 
SELECT language FROM foreign_data WHERE multiverseid = 149934; 
SELECT cardKingdomFoilId, cardKingdomId FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId ASC LIMIT 3; 
SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(*) FROM cards; 
SELECT id FROM cards WHERE side IS NULL AND subtypes LIKE '%Angel%' AND subtypes LIKE '%Wizard%'; 
SELECT name FROM sets WHERE mtgoCode IS NULL OR mtgoCode = '' ORDER BY name ASC LIMIT 3; 
SELECT DISTINCT st.language FROM set_translations st JOIN sets s ON st.setCode = s.code WHERE s.mcmName = 'Archenemy' AND s.code = 'ARC'; 
SELECT s.name, st.translation FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.id = 5; 
SELECT s.type, st.language FROM sets s JOIN set_translations st ON s.id = st.setCode WHERE s.id = 206; 
SELECT s.id, s.name FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Italian' AND s.block = 'Shadowmoor' ORDER BY s.name ASC LIMIT 2; 
SELECT s.id  FROM sets s  JOIN set_translations st ON s.code = st.setCode  WHERE s.isForeignOnly = 0 AND s.isFoilOnly = 1 AND st.language = 'Japanese'; 
SELECT s.setCode, s.baseSetSize FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Russian' ORDER BY s.baseSetSize DESC LIMIT 1; 
SELECT      (SUM(CASE WHEN T1.language = 'Chinese Simplified' AND T2.isOnlineOnly = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(T2.setCode)) AS percentage FROM      set_translations AS T1 JOIN      sets AS T2 ON T1.setCode = T2.code; 
SELECT COUNT(*) FROM set_translations st JOIN sets s ON st.setCode = s.code WHERE st.language = 'Japanese' AND (s.mtgoCode IS NULL OR s.mtgoCode = ''); 
SELECT COUNT(id) AS count_black_border_cards, id FROM cards WHERE borderColor = 'black'; 
SELECT COUNT(id) AS card_count FROM cards WHERE frameEffects = 'extendedart'; SELECT id FROM cards WHERE frameEffects = 'extendedart'; 
SELECT id FROM cards WHERE borderColor = 'black' AND isFullArt = 1;
SELECT language FROM set_translations WHERE id = 174; 
SELECT name FROM sets WHERE code = 'ALL'; 
SELECT language FROM foreign_data WHERE name = 'A Pedra Fellwar'; 
SELECT code FROM sets WHERE releaseDate = '2007-07-13'; 
SELECT baseSetSize, code FROM sets WHERE block IN ('Masques', 'Mirage'); 
SELECT T1.setCode FROM set_translations AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.type = 'expansion'; 
SELECT f.name, c.type FROM foreign_data f JOIN cards c ON f.uuid = c.uuid WHERE c.watermark = 'Boros'; 
SELECT f.language, f.flavorText, c.type FROM foreign_data f JOIN cards c ON f.uuid = c.uuid WHERE c.watermark = 'colorpie'
SELECT (CAST(SUM(CASE WHEN T2.convertedManaCost = 10 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.id)) FROM sets AS T1 INNER JOIN cards AS T2 ON T1.code = T2.setCode WHERE T1.name = 'Abyssal Horror'; 
SELECT setCode FROM set_translations WHERE setCode IN (SELECT code FROM sets WHERE type = 'commander'); 
SELECT f.name, f.type FROM foreign_data f JOIN cards c ON f.uuid = c.uuid WHERE c.watermark = 'Abzan'; 
SELECT f.language, c.type FROM foreign_data f JOIN cards c ON f.uuid = c.uuid WHERE c.watermark = 'Azorius'; 
SELECT COUNT(*)  FROM cards  WHERE artist = 'Aaron Miller'    AND cardKingdomFoilId IS NOT NULL    AND cardKingdomId IS NOT NULL; 
SELECT COUNT(*) FROM cards WHERE availability LIKE '%paper%' AND hand = '3'; 
SELECT name FROM cards WHERE isTextless = 0; 
SELECT manaCost FROM cards WHERE name = 'Ancestor`s Chosen'; 
SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND (power IS NULL OR power = '*'); 
SELECT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL; 
SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'
SELECT purchaseUrls FROM cards WHERE promoTypes LIKE '%bundle%'; 
SELECT COUNT(DISTINCT artist)  FROM cards  WHERE availability LIKE '%black%' AND availability LIKE '%arena,mtgo%'; 
SELECT name FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1; 
SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer'
SELECT name FROM cards WHERE frameVersion = '2003' ORDER BY convertedManaCost DESC LIMIT 3; 
SELECT t1.translation  FROM set_translations AS t1  JOIN cards AS t2 ON t1.setCode = t2.setCode  WHERE t2.name = 'Ancestor''s Chosen' AND t1.language = 'Italian'; 
SELECT COUNT(DISTINCT t.setCode) AS translation_count FROM set_translations t JOIN cards c ON t.setCode = c.setCode WHERE c.name = 'Angel of Mercy'; 
SELECT c.name  FROM cards c  JOIN set_translations st ON c.setCode = st.setCode  WHERE st.translation = 'Hauptset Zehnte Edition'; 
SELECT EXISTS (     SELECT 1     FROM set_translations st     JOIN cards c ON st.setCode = c.setCode     WHERE c.name = 'Ancestor''s Chosen' AND st.language = 'Korean' ); 
SELECT COUNT(*)  FROM cards  JOIN set_translations ON cards.setCode = set_translations.setCode  WHERE set_translations.translation = 'Hauptset Zehnte Edition' AND cards.artist = 'Adam Rex'; 
SELECT s.baseSetSize FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.translation = 'Hauptset Zehnte Edition'; 
SELECT t1.translation  FROM set_translations AS t1  JOIN sets AS t2 ON t1.setCode = t2.code  WHERE t2.name = 'Eighth Edition' AND t1.language = 'Chinese Simplified'; 
SELECT EXISTS (     SELECT 1     FROM sets s     JOIN cards c ON s.code = c.setCode     WHERE c.name = 'Angel of Mercy' AND s.mtgoCode IS NOT NULL ); 
SELECT s.releaseDate FROM sets s JOIN cards c ON s.code = c.setCode WHERE c.name = 'Ancestor''s Chosen'; 
SELECT s.type  FROM sets s  JOIN set_translations st ON s.code = st.setCode  WHERE st.translation = 'Hauptset Zehnte Edition'; 
SELECT COUNT(*) FROM set_translations WHERE setCode IN (SELECT code FROM sets WHERE block = 'Ice Age') AND language = 'Italian' AND translation IS NOT NULL; 
SELECT isForeignOnly FROM sets WHERE name = 'Adarkar Valkyrie'; 
SELECT COUNT(DISTINCT s.id) AS count FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Italian' AND s.baseSetSize < 100 AND st.translation IS NOT NULL; 
SELECT COUNT(*)  FROM cards  JOIN sets ON cards.setCode = sets.code  WHERE sets.name = 'Coldsnap' AND cards.borderColor = 'black'; 
SELECT c.name FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.name = 'Coldsnap' ORDER BY c.convertedManaCost DESC LIMIT 1; 
SELECT DISTINCT artist  FROM cards  WHERE (artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy')) AND (name = 'Coldsnap'); 
SELECT name FROM cards WHERE setCode = (SELECT code FROM sets WHERE name = 'Coldsnap') AND number = '4'; 
SELECT COUNT(*) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost > 5 AND (T1.power IS NULL OR T1.power = '*'); 
SELECT T1.flavorText FROM foreign_data AS T1 JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.language = 'Italian' AND T2.name = 'Ancestor''s Chosen'; 
SELECT DISTINCT language FROM foreign_data WHERE name = 'Ancestor''s Chosen' AND flavorText IS NOT NULL; 
SELECT T1.type FROM foreign_data AS T1 JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Ancestor''s Chosen' AND T1.language = 'German'; 
SELECT T2.text  FROM sets AS T1  JOIN foreign_data AS T2 ON T1.code = T2.set_code  WHERE T1.name = 'Coldsnap' AND T2.language = 'Italian'; 
SELECT T1.name FROM foreign_data AS T1 JOIN cards AS T2 ON T1.uuid = T2.uuid JOIN sets AS T3 ON T2.setCode = T3.code WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' ORDER BY T2.convertedManaCost DESC LIMIT 1; 
SELECT date FROM rulings WHERE uuid IN (SELECT uuid FROM cards WHERE name = 'Reminisce'); 
SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap'; 
SELECT CAST(SUM(CASE WHEN cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards WHERE setCode IN (SELECT code FROM sets WHERE name = 'Coldsnap'); 
SELECT code FROM sets WHERE releaseDate = '2017-07-14'; 
SELECT keyruneCode FROM sets WHERE code = 'PKHC'; 
SELECT mcmId FROM sets WHERE code = 'SS2'; 
SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09'; 
SELECT type FROM sets WHERE name = 'From the Vault: Lore'; 
SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized'; 
SELECT c.text AS ruling_text, c.hasContentWarning AS has_missing_or_degraded_properties_and_values FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.artist = 'Jim Pavelec'; 
SELECT T1.releaseDate FROM sets AS T1 JOIN cards AS T2 ON T1.code = T2.setCode WHERE T2.name = 'Evacuation'; 
SELECT s.baseSetSize FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.translation = 'Rinascita di Alara'; 
SELECT s.type FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.translation = 'Huitième édition'; 
SELECT st.setCode FROM set_translations st JOIN cards c ON st.setCode = c.setCode WHERE st.language = 'French' AND st.translation = 'Tendo Ice Bridge'; 
SELECT COUNT(*) FROM set_translations WHERE name = 'Tenth Edition';
SELECT T1.translation  FROM set_translations AS T1  JOIN cards AS T2 ON T1.setCode = T2.setCode  WHERE T1.language = 'Japanese' AND T2.name = 'Fellwar Stone'; 
SELECT name FROM cards WHERE setCode IN (SELECT code FROM sets WHERE name = 'Journey into Nyx Hero''s Path') ORDER BY convertedManaCost DESC LIMIT 1; 
SELECT s.releaseDate FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.translation = 'Ola de frío'; 
SELECT T1.type FROM sets AS T1 JOIN cards AS T2 ON T1.code = T2.setCode WHERE T2.name = 'Samite Pilgrim'; 
SELECT COUNT(*) FROM cards WHERE setCode IN (SELECT code FROM sets WHERE name = 'World Championship Decks 2004') AND convertedManaCost = 3; 
SELECT t1.translation  FROM set_translations AS t1  JOIN sets AS t2 ON t1.setCode = t2.code  WHERE t2.name = 'Mirrodin' AND t1.language = 'Chinese Simplified'; 
SELECT      (CAST(SUM(CASE WHEN t.isNonFoilOnly = 1 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN s.language = 'Japanese' THEN 1 ELSE 0 END)) * 100 AS percentage_non_foil_japanese FROM      set_translations s JOIN      sets t ON s.setCode = t.code WHERE      s.language = 'Japanese'; 
SELECT CAST(SUM(CASE WHEN T2.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(*) FROM set_translations AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.language = 'Portuguese (Brazil)'; 
SELECT availability FROM cards WHERE artist = 'Aleksi Briclot' AND isTextless = 1;
SELECT id FROM sets WHERE baseSetSize = (SELECT MAX(baseSetSize) FROM sets); 
SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedManaCost DESC LIMIT 1; 
SELECT frameEffects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT COUNT(*) FROM cards WHERE duelDeck = 'a' AND hasFoil = 0 AND (power IS NULL OR power = '*'); 
SELECT id FROM sets WHERE type = 'commander' ORDER BY totalSetSize DESC LIMIT 1; 
SELECT c.name, c.manaCost FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.format = 'duel' ORDER BY LENGTH(REPLACE(c.manaCost, '{', '')) DESC, c.manaCost DESC LIMIT 10; 
SELECT c.originalReleaseDate, l.format FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.rarity = 'mythic' ORDER BY c.originalReleaseDate ASC LIMIT 1; 
SELECT COUNT(*) FROM foreign_data AS fd JOIN cards AS c ON fd.uuid = c.uuid WHERE c.artist = 'Volkan Baǵa' AND fd.language = 'French'; 
SELECT COUNT(*) FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.name = 'Abundance' AND c.types = 'Enchantment' AND c.rarity = 'rare' AND l.status = 'Legal'; 
SELECT format, GROUP_CONCAT(name SEPARATOR ', ') AS banned_cards FROM (     SELECT format, name, status     FROM legalities     JOIN cards ON legalities.uuid = cards.uuid     WHERE status = 'Banned' ) AS banned_cards GROUP BY format ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT T1.language FROM set_translations AS T1 JOIN sets AS T2 ON T1.id = T2.id WHERE T2.name = 'Battlebond'; 
SELECT artist, GROUP_CONCAT(DISTINCT format SEPARATOR ', ') AS formats FROM cards JOIN legalities ON cards.uuid = legalities.uuid GROUP BY artist ORDER BY COUNT(*) ASC LIMIT 1; 
SELECT l.status FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.frameVersion = '1997' AND c.artist = 'D. Alexander Gregory' AND c.hasContentWarning = 1 AND l.format = 'legacy'; 
SELECT c.name, l.format FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.edhrecRank = 1 AND l.status = 'Banned'; 
SELECT      AVG(id) AS avg_sets_per_year,     language AS most_common_language FROM      sets s JOIN      set_translations st ON s.id = st.set_id WHERE      releaseDate BETWEEN '2012-01-01' AND '2015-12-31' GROUP BY      language ORDER BY      COUNT(language) DESC LIMIT 1; 
SELECT artist FROM cards WHERE BorderColor = 'black' AND availability = 'arena'; 
SELECT uuid FROM legalities WHERE format = 'oldschool' AND (status = 'banned' OR status = 'restricted'); 
SELECT COUNT(*) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper'; 
SELECT r.text FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.artist = 'Kev Walker' ORDER BY r.date DESC; 
SELECT c.name AS card_name, l.format AS format FROM cards c JOIN sets s ON c.setCode = s.code JOIN legalities l ON c.uuid = l.uuid WHERE s.name = 'Hour of Devastation' AND l.status = 'Legal'; 
SELECT s.name  FROM sets s  JOIN set_translations st ON s.code = st.setCode  WHERE st.language NOT LIKE '%Japanese%' AND EXISTS (SELECT 1 FROM set_translations WHERE setCode = s.code AND language = 'Korean'); 
SELECT DISTINCT c.frameVersion, l.status FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.artist = 'Allen Williams' AND l.status = 'Banned'; 
SELECT DisplayName, MAX(Reputation) AS HighestReputation FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') GROUP BY DisplayName; 
SELECT DisplayName FROM users WHERE YEAR(CreationDate) = 2011
SELECT COUNT(Id) FROM users WHERE LastAccessDate > '2014-09-01'; 
SELECT DisplayName FROM users ORDER BY Views DESC LIMIT 1; 
SELECT COUNT(*)  FROM users  WHERE Upvotes > 100 AND Downvotes > 1; 
SELECT COUNT(*) FROM users WHERE Views > 10 AND YEAR(CreationDate) > 2013; 
SELECT COUNT(*) FROM posts AS p JOIN users AS u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie'; 
SELECT p.Title  FROM posts p  JOIN users u ON p.OwnerUserId = u.Id  WHERE u.DisplayName = 'csgillespie'; 
SELECT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Title = 'Eliciting priors from experts'; 
SELECT p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie' ORDER BY p.ViewCount DESC LIMIT 1; 
SELECT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId ORDER BY p.FavoriteCount DESC LIMIT 1; 
SELECT SUM(p.CommentCount) AS TotalComments FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie'; 
SELECT MAX(p.AnswerCount) AS MostAnswers FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie'; 
SELECT u.DisplayName FROM users u JOIN posts p ON u.Id = p.LastEditorUserId WHERE p.Title = 'Examples for teaching: Correlation does not mean causation'; 
SELECT COUNT(*) FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie' AND p.ParentId IS NULL; 
SELECT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.ClosedDate IS NOT NULL; 
SELECT COUNT(p.Id) FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.Age > 65 AND p.Score >= 20; 
SELECT u.Location  FROM users u  JOIN posts p ON u.Id = p.OwnerUserId  WHERE p.Title = 'Eliciting priors from experts'; 
SELECT p.Body  FROM posts p  JOIN tags t ON p.Id = t.ExcerptPostId  WHERE t.TagName = 'bayesian'; 
SELECT p.Body FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.Count = (SELECT MAX(Count) FROM tags); 
SELECT COUNT(badges.Id)  FROM badges  JOIN users ON badges.UserId = users.Id  WHERE users.DisplayName = 'csgillespie'; 
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'csgillespie'; 
SELECT COUNT(*) FROM badges  JOIN users ON badges.UserId = users.Id  WHERE users.DisplayName = 'csgillespie' AND YEAR(badges.Date) = 2011; 
SELECT u.DisplayName FROM users u JOIN (     SELECT b.UserId, COUNT(b.Id) AS BadgeCount     FROM badges b     GROUP BY b.UserId     ORDER BY BadgeCount DESC     LIMIT 1 ) sub ON u.Id = sub.UserId; 
SELECT AVG(posts.Score)  FROM posts  JOIN users ON posts.OwnerUserId = users.Id  WHERE users.DisplayName = 'csgillespie'; 
SELECT AVG(COUNT(badges.Id)) / COUNT(DISTINCT users.DisplayName) AS AverageBadgesPerUserWithOver200Views FROM badges JOIN users ON badges.UserId = users.Id WHERE users.Views > 200; 
SELECT CAST(SUM(CASE WHEN u.Age > 65 THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(p.Id) AS ElderUserPercentage FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Score > 5; 
SELECT COUNT(*) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19'; 
SELECT CreationDate FROM votes GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1; 
SELECT COUNT(*) FROM badges WHERE Name = 'Revival'; 
SELECT p.Title FROM posts p JOIN (     SELECT PostId, MAX(Score) AS MaxScore     FROM comments     GROUP BY PostId ) c ON p.Id = c.PostId WHERE c.MaxScore = (SELECT MAX(Score) FROM comments); 
SELECT COUNT(comments.Id) AS CommentCount FROM comments JOIN posts ON comments.PostId = posts.Id WHERE posts.ViewCount = 1910; 
SELECT p.FavoriteCount FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.UserId = '3025' AND c.CreationDate = '2014-04-23 20:29:39.0'; 
SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.ParentId = 107829 AND p.CommentCount = 1; 
SELECT p.ClosedDate IS NOT NULL AS IsWellFinished FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.UserId = '23853' AND c.CreationDate = '2013-07-12 09:08:18.0'; 
SELECT u.Reputation FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Id = 65041; 
SELECT COUNT(*)  FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Tiago Pasqualini'; 
SELECT u.DisplayName FROM users u JOIN votes v ON u.Id = v.UserId WHERE v.Id = 6347; 
SELECT COUNT(votes.Id) AS NumberOfVotes FROM votes JOIN posts ON votes.PostId = posts.Id WHERE posts.Title LIKE '%data visualization%'; 
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'DatEpicCoderGuyWhoPrograms'; 
SELECT      COUNT(posts.Id) / COUNT(votes.Id) AS PostToVoteRatio FROM      posts LEFT JOIN      votes ON posts.OwnerUserId = votes.UserId AND posts.Id = votes.PostId WHERE      posts.OwnerUserId = 24; 
SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'; 
SELECT Text FROM comments WHERE Score = 17; 
SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com'
SELECT b.Name  FROM badges b  JOIN users u ON b.UserId = u.Id  WHERE u.DisplayName = 'SilentGhost'; 
SELECT u.DisplayName  FROM users u  JOIN comments c ON u.Id = c.UserId  WHERE c.Text LIKE '%thank you user93%'; 
SELECT c.Text  FROM comments c  JOIN users u ON c.UserId = u.Id  WHERE u.DisplayName = 'A Lion'; 
SELECT u.DisplayName, u.Reputation FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Title = 'Understanding what Dassault iSight is doing?'; 
SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'How does gentle boosting differ from AdaBoost?'; 
SELECT u.DisplayName FROM users AS u JOIN badges AS b ON u.Id = b.UserId WHERE b.Name = 'Necromancer' LIMIT 10; 
SELECT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Title = 'Open source tools for visualizing multi-dimensional data?'
SELECT p.Title  FROM posts p  JOIN users u ON p.OwnerUserId = u.Id  WHERE u.DisplayName = 'Vebjorn Ljosa'; 
SELECT SUM(p.Score), u.WebsiteUrl FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Yevgeny'; 
SELECT p.Comment FROM postHistory p JOIN posts pt ON p.PostId = pt.Id WHERE pt.Title = 'Why square the difference instead of taking the absolute value in standard deviation?' AND p.Comment LIKE '%edited%'; 
SELECT SUM(v.BountyAmount) AS TotalBountyAmount FROM votes v JOIN posts p ON v.PostId = p.Id WHERE p.Title LIKE '%data%'; 
SELECT u.DisplayName  FROM users u  JOIN votes v ON u.Id = v.UserId  JOIN posts p ON v.PostId = p.Id  WHERE v.BountyAmount = 50 AND p.Title LIKE '%variance%'; 
SELECT AVG(posts.ViewCount) AS AverageViewCount, posts.Title, comments.Text FROM posts JOIN comments ON posts.Id = comments.PostId WHERE posts.Tags LIKE '%<humor>%' GROUP BY posts.Title, comments.Text; 
SELECT COUNT(*) FROM comments WHERE UserId = 13; 
SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1; 
SELECT Id FROM users ORDER BY Views ASC LIMIT 1
SELECT COUNT(*) FROM badges WHERE Name = 'Supporter' AND strftime('%Y', Date) = '2011'; 
SELECT COUNT(UserId) FROM badges GROUP BY UserId HAVING COUNT(Name) > 5; 
SELECT COUNT(DISTINCT u.UserId) FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.Location = 'New York, NY'   AND b.Name IN ('Teacher', 'Supporter'); 
SELECT u.Reputation FROM users u JOIN comments c ON u.Id = c.UserId WHERE c.PostId = 1; 
SELECT u.UserId FROM users u JOIN (     SELECT ph.PostId, COUNT(ph.Id) AS HistoryCount     FROM postHistory ph     GROUP BY ph.PostId     HAVING COUNT(ph.Id) = 1 ) sub ON u.Id = sub.PostId JOIN posts p ON sub.PostId = p.Id WHERE p.ViewCount >= 1000; 
SELECT u.UserId, b.Name FROM users u JOIN (     SELECT UserId, COUNT(Id) AS CommentCount     FROM comments     GROUP BY UserId     ORDER BY CommentCount DESC     LIMIT 1 ) c ON u.Id = c.UserId LEFT JOIN badges b ON u.Id = b.UserId; 
SELECT COUNT(DISTINCT b.UserId) FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Location = 'India' AND b.Name = 'Teacher'; 
SELECT      ((SUM(CASE WHEN EXTRACT(YEAR FROM Date) = 2010 THEN 1 ELSE 0 END) / COUNT(*)) -       (SUM(CASE WHEN EXTRACT(YEAR FROM Date) = 2011 THEN 1 ELSE 0 END) / COUNT(*))) * 100 AS PercentageDifference; 
SELECT ph.PostHistoryTypeId, COUNT(DISTINCT c.UserId) AS UniqueCommenters FROM postHistory ph JOIN comments c ON ph.PostId = c.PostId WHERE ph.PostId = 3720; 
SELECT p.PostId, p.ViewCount FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE pl.RelatedPostId = 61217; 
SELECT p.Score, pl.LinkTypeId FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE p.Id = 395; 
SELECT p.PostId, u.UserId FROM posts p JOIN postHistory ph ON p.Id = ph.PostId WHERE p.Score > 60; 
SELECT SUM(FavoriteCount) FROM posts JOIN postHistory ON posts.Id = postHistory.PostId WHERE postHistory.UserId = 686 AND YEAR(postHistory.CreationDate) = 2011; 
SELECT AVG(users.UpVotes) AS AverageUpVotes, AVG(users.Age) AS AverageAge FROM users JOIN posts ON users.Id = posts.OwnerUserId GROUP BY users.Id HAVING COUNT(posts.OwnerUserId) > 10; 
SELECT COUNT(UserId) FROM badges WHERE Name = 'Announcer'; 
SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08.0'; 
SELECT COUNT(*) FROM comments WHERE score > 60; 
SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0'; 
SELECT COUNT(Id) FROM posts WHERE Score = 10; 
SELECT Name FROM badges WHERE UserId = (SELECT UserId FROM users ORDER BY Reputation DESC LIMIT 1); 
SELECT u.Reputation FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Date = '2010-07-19 19:39:08.0'; 
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Pierre'; 
SELECT b.Date  FROM badges b  JOIN users u ON b.UserId = u.Id  WHERE u.Location = 'Rochester, NY'; 
SELECT CAST(SUM(CASE WHEN Name = 'Teacher' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(UserId) AS Percentage FROM badges; 
SELECT      CAST(SUM(CASE WHEN u.Age BETWEEN 13 AND 18 THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(u.Id) AS PercentageOfTeenagers FROM      badges b JOIN      users u ON b.UserId = u.Id WHERE      b.Name = 'Organizer'; 
SELECT c.Score FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.CreationDate = '2010-07-19 19:19:56.0'; 
SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.CreationDate = '2010-07-19 19:37:33.0'; 
SELECT u.Age FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.Location = 'Vienna, Austria'; 
SELECT COUNT(b.UserId) FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Supporter' AND u.Age BETWEEN 19 AND 65; 
SELECT SUM(views) FROM users WHERE id IN (SELECT userid FROM badges WHERE date = '2010-07-19 19:39:08.0'); 
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MIN(Reputation) FROM users); 
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Sharpie'; 
SELECT COUNT(b.UserId) AS NumberOfEldersWithSupporterBadge FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Supporter' AND u.Age > 65; 
SELECT DisplayName FROM users WHERE Id = 30; 
SELECT COUNT(*) FROM users WHERE Location = 'New York, NY'; 
SELECT COUNT(*) FROM votes WHERE YEAR(CreationDate) = 2010; 
SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65; 
SELECT DisplayName FROM users WHERE Views = (SELECT MAX(Views) FROM users); 
SELECT CAST(SUM(CASE WHEN YEAR(CreationDate) = 2010 THEN 1 ELSE 0 END) AS FLOAT) / SUM(CASE WHEN YEAR(CreationDate) = 2011 THEN 1 ELSE 0 END) AS Ratio FROM votes; 
SELECT DISTINCT t.TagName FROM tags t JOIN posts p ON t.ExcerptPostId = p.Id JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'John Salvatier'; 
SELECT COUNT(*) FROM postHistory AS ph JOIN users AS u ON ph.UserId = u.Id WHERE u.DisplayName = 'Daniel Vassallo'; 
SELECT COUNT(votes.Id)  FROM votes  JOIN users ON votes.UserId = users.Id  WHERE users.DisplayName = 'Harlan'; 
SELECT p.Id FROM posts p JOIN users u ON p.UserId = u.Id WHERE u.DisplayName = 'slashnick' ORDER BY p.AnswerCount DESC LIMIT 1
SELECT p.PostId, p.ViewCount FROM posts p JOIN postHistory ph ON p.Id = ph.PostId JOIN users u ON ph.UserId = u.Id WHERE u.DisplayName IN ('Harvey Motulsky', 'Noah Snyder') GROUP BY p.PostId, p.ViewCount ORDER BY SUM(p.ViewCount) DESC LIMIT 1; 
SELECT COUNT(DISTINCT p.PostId) FROM posts p JOIN postHistory ph ON p.Id = ph.PostId JOIN users u ON ph.UserId = u.Id JOIN votes v ON p.Id = v.PostId WHERE u.DisplayName = 'Matt Parker' AND v.PostId > 4; 
SELECT COUNT(c.Id) AS NegativeCommentsCount FROM comments c JOIN posts p ON c.PostId = p.Id JOIN users u ON p.OwnerUserId = u.Id WHERE c.Score < 60 AND u.DisplayName = 'Neil McGuigan'; 
SELECT DISTINCT p.Tags FROM posts p JOIN postHistory ph ON p.Id = ph.PostId JOIN users u ON ph.UserId = u.Id WHERE u.DisplayName = 'Mark Meckes' AND p.CommentCount = 0; 
SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Organizer'; 
SELECT      CAST(SUM(CASE WHEN t.TagName = 'r' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(ph.PostId) AS percentage FROM      postHistory ph JOIN      users u ON ph.UserId = u.Id JOIN      tags t ON ph.PostId = t.ExcerptPostId WHERE      u.DisplayName = 'Community'; 
SELECT SUM(CASE WHEN p.OwnerDisplayName = 'Mornington' THEN p.ViewCount ELSE 0 END) - SUM(CASE WHEN p.OwnerDisplayName = 'Amos' THEN p.ViewCount ELSE 0 END) AS ViewCountDifference FROM posts p
SELECT COUNT(Id) FROM badges WHERE Name = 'Commentator' AND strftime('%Y', Date) = '2014'; 
SELECT COUNT(*) FROM postHistory WHERE CreationDate BETWEEN '2010-07-21 00:00:00' AND '2010-07-21 23:59:59'; 
SELECT DisplayName, Age FROM users ORDER BY Views DESC LIMIT 1; 
SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'; 
SELECT COUNT(*) FROM comments WHERE UserId = 13 AND Score < 60; 
SELECT p.Title, c.UserDisplayName FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.Score > 60; 
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE EXTRACT(YEAR FROM b.Date) = 2011 AND u.Location LIKE '%North Pole%'; 
SELECT u.DisplayName, u.WebsiteUrl FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.FavoriteCount > 150; 
