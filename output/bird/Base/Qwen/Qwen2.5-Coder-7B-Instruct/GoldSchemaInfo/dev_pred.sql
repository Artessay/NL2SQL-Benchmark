SELECT MAX("Free Meal Count (K-12)" / "Enrollment (K-12)") AS Highest_Eligible_Free_Rate FROM frpm WHERE "County Name" = 'Alameda'; 
SELECT "Educational Option Type", ("Free Meal Count (Ages 5-17)" / "Enrollment (Ages 5-17)") AS Eligible_Free_Rate FROM frpm WHERE "Educational Option Type" LIKE '%Continuation%' ORDER BY Eligible_Free_Rate ASC LIMIT 3; 
SELECT s.Zip FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`Charter School (Y/N)` = 1 AND f.`District Name` = 'Fresno County Office of Education'; 
SELECT s.MailStreet FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode ORDER BY f.`FRPM Count (K-12)` DESC LIMIT 1; 
SELECT s.Phone FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`Charter School (Y/N)` = 1 AND f.`Charter Funding Type` = 'Directly funded' AND s.OpenDate > '2000-01-01'; 
SELECT COUNT(schools.School) FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.AvgScrMath > 400 AND schools.Virtual = 'F'; 
SELECT s.School FROM schools s JOIN satscores st ON s.CDSCode = st.cds WHERE st.NumTstTakr > 500 AND s.Magnet = 1; 
SELECT Phone FROM schools WHERE CDSCode = (SELECT cds FROM satscores ORDER BY NumGE1500 DESC LIMIT 1); 
SELECT NumTstTakr FROM satscores WHERE cds IN (     SELECT CDSCode FROM frpm ORDER BY `FRPM Count (K-12)` DESC LIMIT 1 ); 
SELECT COUNT(DISTINCT f.School_Code) FROM satscores s JOIN frpm f ON CAST(s.cds AS INTEGER) = f.CDSCode WHERE s.AvgScrMath > 560 AND f.`Charter Funding Type` = 'Directly funded'; 
SELECT f.`FRPM Count (Ages 5-17)` FROM satscores s JOIN frpm f ON s.cds = f.CDSCode ORDER BY s.AvgScrRead DESC LIMIT 1; 
SELECT f.CDSCode FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE f.`Enrollment (K-12)` + f.`Enrollment (Ages 5-17)` > 500; 
SELECT MAX(f.`Free Meal Count (Ages 5-17)` / f.`Enrollment (Ages 5-17)`) AS HighestEligibleFreeRate FROM frpm f JOIN satscores s ON f.CDSCode = s.cds WHERE s.NumGE1500 / s.NumTstTakr > 0.3; 
SELECT s.Phone FROM schools s JOIN (     SELECT cds,            CAST(NumGE1500 AS FLOAT) / NumTstTakr AS ExcellenceRate     FROM satscores ) ss ON s.CDSCode = ss.cds ORDER BY ss.ExcellenceRate DESC LIMIT 3; 
SELECT s.NCESSchool, f.[Enrollment (Ages 5-17)] FROM frpm f JOIN schools s ON CAST(f.CDSCode AS TEXT) = s.CDSCode ORDER BY f.[Enrollment (Ages 5-17)] DESC LIMIT 5; 
SELECT s.District, MAX(ss.AvgScrRead) AS HighestAvgScore FROM satscores ss JOIN schools s ON ss.cds = s.CDSCode WHERE s.StatusType = 'Active' GROUP BY s.District ORDER BY HighestAvgScore DESC LIMIT 1; 
SELECT COUNT(*) FROM satscores AS T1 JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.County = 'Alameda' AND T2.StatusType = 'Merged' AND T1.NumTstTakr < 100; 
SELECT s.CharterNum, AVG(sw.AvgScrWrite) AS AvgWritingScore FROM schools s JOIN satscores sw ON s.CDSCode = sw.cds WHERE sw.AvgScrWrite > 499 AND s.CharterNum IS NOT NULL GROUP BY s.CharterNum ORDER BY AvgWritingScore DESC; 
SELECT COUNT(*) FROM satscores AS T1 JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.City = 'Fresno' AND T2.FundingType = 'Directly funded' AND T1.NumTstTakr <= 250; 
SELECT T2.Phone FROM satscores AS T1 JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 1; 
SELECT COUNT(*) FROM frpm WHERE CDSCode IN (SELECT CDSCode FROM schools WHERE County = 'Amador') AND LowGrade = '9' AND HighGrade = '12'; 
SELECT COUNT(*) FROM frpm WHERE "County Name" = 'Los Angeles' AND "Free Meal Count (K-12)" > 500 AND "Free Meal Count (K-12)" < 700; 
SELECT sname FROM satscores WHERE cname = 'Contra Costa' ORDER BY NumTstTakr DESC LIMIT 1; 
SELECT s.School, s.StreetAbr FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE ABS(f.`Enrollment (K-12)` - f.`Enrollment (Ages 5-17)`) > 30; 
SELECT f."School Name" FROM frpm f JOIN satscores s ON f.CDSCode = s.cds WHERE f."Free Meal Count (K-12)" / f."Enrollment (K-12)" > 0.1 AND s.NumGE1500 > 0; 
SELECT s.sname, f."Charter Funding Type" FROM satscores s JOIN frpm f ON CAST(s.cds AS INTEGER) = f.CDSCode WHERE s.AvgScrMath > 400 AND f."District Name" LIKE '%Riverside%'; 
SELECT s.School_Name, s.Street, s.City, s.State, s.Zip FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE s.County = 'Monterey' AND f.School_Type LIKE '%High Schools%' AND f.Free_Meal_Count_Ages_5_17 > 800; 
SELECT s.School, s.Phone, AVG(sw.AvgScrWrite) FROM schools s JOIN satscores sw ON s.CDSCode = sw.cds WHERE (s.OpenDate > '1991-12-31' OR s.ClosedDate < '2000-01-01') GROUP BY s.School, s.Phone; 
SELECT s.School, s.DOC FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`Enrollment (K-12)` - f.`Enrollment (Ages 5-17)` > (     SELECT AVG(f2.`Enrollment (K-12)` - f2.`Enrollment (Ages 5-17)`)     FROM frpm f2     JOIN schools s2 ON f2.CDSCode = s2.CDSCode     WHERE s2.FundingType = 'Locally funded' ); 
SELECT s.OpenDate FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.[Enrollment (K-12)] = (     SELECT MAX([Enrollment (K-12)])     FROM frpm ); 
SELECT s.City FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode ORDER BY f.`Enrollment (K-12)` ASC LIMIT 5; 
SELECT "Free Meal Count (K-12)" / "Enrollment (K-12)" AS "Eligible Free Rate" FROM frpm ORDER BY "Enrollment (K-12)" DESC LIMIT 2; 
SELECT (frpm."FRPM Count (K-12)" / frpm."Enrollment (K-12)") AS "Eligible Free or Reduced Price Meal Rate" FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.SOC = '66' ORDER BY frpm."FRPM Count (K-12)" DESC LIMIT 5; 
SELECT T2.SchoolName, T2.Website FROM frpm AS T1 JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000;
SELECT (frpm."Free Meal Count (Ages 5-17)" / frpm."Enrollment (Ages 5-17)") AS "Free Rate" FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.AdmFName1 = 'Kacey' AND schools.AdmLName1 = 'Gibson'; 
SELECT s.AdmEmail1 FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`Charter School (Y/N)` = 1 ORDER BY f.`Enrollment (K-12)` ASC LIMIT 1; 
SELECT DISTINCT T1.AdmFName1, T1.AdmLName1, T1.AdmFName2, T1.AdmLName2, T1.AdmFName3, T1.AdmLName3 FROM schools AS T1 JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.NumGE1500 IS NOT NULL AND T2.NumGE1500 > 0 ORDER BY T2.NumGE1500 DESC LIMIT 1; 
SELECT s.Street, s.City, s.Zip, s.State FROM schools s JOIN (     SELECT cds, (NumGE1500::float / NumTstTakr) AS ExcellenceRate     FROM satscores ) ss ON s.CDSCode = ss.cds ORDER BY ss.ExcellenceRate ASC LIMIT 1; 
SELECT s.Website FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.County = 'Los Angeles' AND ss.NumTstTakr BETWEEN 2000 AND 3000; 
SELECT AVG(s.NumTstTakr) AS AvgTestTakers FROM satscores s JOIN schools sc ON s.cds = sc.CDSCode WHERE sc.County = 'Fresno' AND YEAR(sc.OpenDate) = 1980; 
SELECT s.Phone  FROM schools s  JOIN satscores ss ON s.CDSCode = ss.cds  WHERE s.District = 'Fresno Unified'  ORDER BY ss.AvgScrRead ASC  LIMIT 1; 
SELECT T1.School FROM schools AS T1 JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.Virtual = 'F' GROUP BY T1.County, T1.School ORDER BY AVG(T2.AvgScrRead) DESC LIMIT 5
SELECT T2.EdOpsName FROM satscores AS T1 JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 1; 
SELECT AVG(AvgScrMath) AS avg_math_score, County  FROM satscores  JOIN schools ON satscores.cds = schools.CDSCode  WHERE (AvgScrMath + AvgScrRead + AvgScrWrite) IN (     SELECT MIN(AvgScrMath + AvgScrRead + AvgScrWrite)      FROM satscores ) 
SELECT AVG(s.AvgScrWrite) AS AvgWritingScore, sc.City FROM satscores s JOIN schools sc ON s.cds = sc.CDSCode WHERE s.NumGE1500 IS NOT NULL ORDER BY s.NumGE1500 DESC LIMIT 1; 
SELECT s.School, AVG(ss.AvgScrWrite) AS AverageWritingScore FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.AdmFName1 = 'Ricci' AND s.AdmLName1 = 'Ulrich' GROUP BY s.School; 
SELECT s.School, f.[Enrollment (K-12)] FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.DOC = '31' ORDER BY f.[Enrollment (K-12)] DESC LIMIT 1; 
SELECT AVG(COUNT(*)) AS monthly_average FROM (     SELECT *     FROM schools     WHERE County = 'Alameda' AND DOC = '52' AND YEAR(OpenDate) = 1980     GROUP BY MONTH(OpenDate) ) AS monthly_counts; 
SELECT      SUM(CASE WHEN DOC = '54' THEN 1 ELSE 0 END) AS merged_unified_schools,     SUM(CASE WHEN DOC = '52' THEN 1 ELSE 0 END) AS merged_elementary_schools FROM      schools WHERE      StatusType = 'Merged' AND County = 'Orange'; 
SELECT DISTINCT County, School, ClosedDate FROM schools WHERE StatusType = 'Closed' ORDER BY County DESC; 
SELECT s.Street FROM schools s JOIN satscores ss ON s.cds = ss.cds ORDER BY ss.AvgScrMath DESC LIMIT 1 OFFSET 6
SELECT s.School, s.MailStreet FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds ORDER BY ss.AvgScrRead ASC LIMIT 1; 
SELECT COUNT(*) FROM satscores AS T1 JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE (T1.AvgScrRead + T1.AvgScrMath + T1.AvgScrWrite) >= 1500 AND T2.MailCity = 'Lakeport'; 
SELECT SUM(s.NumTstTakr) AS TotalTestTakers FROM satscores s JOIN schools sch ON s.cds = sch.CDSCode WHERE sch.MailCity = 'Fresno'; 
SELECT School, MailZip FROM schools WHERE AdmFName1 = 'Avetik' AND AdmLName1 = 'Atoian'; 
SELECT      (COUNT(CASE WHEN County = 'Colusa' THEN 1 END) * 1.0 /       COUNT(CASE WHEN County = 'Humboldt' THEN 1 END)) AS ratio FROM      schools WHERE      MailState = 'CA'; 
SELECT COUNT(*) FROM schools WHERE State = 'CA' AND MailCity = 'San Jose'; 
SELECT T2.Phone, T2.Ext FROM satscores AS T1 JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrWrite DESC LIMIT 1 OFFSET 332; 
SELECT School, Phone, Ext FROM schools WHERE Zip = '95203-3704'; 
SELECT Website FROM schools WHERE (AdmFName1 = 'Mike' AND AdmLName1 = 'Larson') OR (AdmFName1 = 'Dante' AND AdmLName1 = 'Alvarez'); 
SELECT Website FROM schools WHERE County = 'San Joaquin' AND Charter = 1 AND Virtual = 'P';
SELECT COUNT(*) FROM schools WHERE City = 'Hickman' AND Charter = 1 AND DOC = 52; 
SELECT COUNT(*) FROM frpm AS T1 JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.Charter = 0 AND (T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`) < 0.18; 
SELECT s.School, s.City, s.AdmFName1 || ' ' || s.AdmLName1 AS AdministratorName FROM schools s WHERE s.Charter = 1 AND s.CharterNum = '00D2'; 
SELECT COUNT(*) FROM schools WHERE MailCity = 'Hickman' AND CharterNum = '00D4'; 
SELECT      (COUNT(CASE WHEN FundingType = 'Locally funded' THEN 1 ELSE NULL END) /       COUNT(FundingType)) * 100 AS PercentageLocallyFunded FROM      schools WHERE      County = 'Santa Clara'; 
SELECT COUNT(*) FROM schools WHERE FundingType = 'Directly Funded' AND OpenDate BETWEEN '2000-01-01' AND '2005-12-31' AND County = 'Stanislaus'; 
SELECT COUNT(*) FROM schools WHERE City = 'San Francisco' AND ClosedDate LIKE '1989%' AND DOCType = 'Community College District'; 
SELECT County, COUNT(*) AS ClosureCount FROM schools WHERE StatusType = 'Closed' AND SOC = '11' AND ClosedDate BETWEEN '1980-01-01' AND '1989-12-31' GROUP BY County ORDER BY ClosureCount DESC LIMIT 1; 
SELECT NCESDist FROM schools WHERE SOC = '31'; 
SELECT COUNT(*) AS TotalSchools FROM schools WHERE StatusType IN ('Active', 'Closed') AND County = 'Alpine' AND School LIKE '%District Community Day School%'; 
SELECT T2.District_Code FROM schools AS T1 JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.City = 'Fresno' AND T1.Magnet = 0; 
SELECT SUM(frm.Enrollment) AS Total_Enrollment FROM frpm frm JOIN schools sch ON frm.CDSCode = sch.CDSCode WHERE sch.City = 'Fremont' AND sch.EdOpsCode = 'SSS' AND frm.`Academic Year` = '2014-2015'; 
SELECT frpm.`FRPM Count (Ages 5-17)`  FROM frpm  JOIN schools ON frpm.CDSCode = schools.CDSCode  WHERE schools.MailStreet = 'PO Box 1040'; 
SELECT MIN(GSserved) AS LowestGrade FROM schools WHERE NCESDist = '0613360' AND EdOpsCode = 'SPECON'; 
SELECT s.School, s.EILName FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`NSLP Provision Status` = 'Breakfast Provision 2' AND s.`County Code` = 37; 
SELECT s.City FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`NSLP Provision Status` = 'Lunch Provision 2' AND f.`Low Grade` = '9' AND f.`High Grade` = '12' AND s.EILCode = 'HS' AND s.County = 'Merced'; 
SELECT s.School, (f."FRPM Count (Ages 5-17)" / f."Enrollment (Ages 5-17)") * 100 AS "Percent (%) Eligible FRPM" FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE s.County = 'Los Angeles' AND s.GSserved = 'K-9'; 
SELECT GSserved FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT COUNT(*) AS NumberOfSchools FROM schools WHERE County IN ('San Diego', 'Santa Barbara') AND Virtual = 'F'; 
SELECT s.School Name, s.Latitude, f.School Type FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode ORDER BY s.Latitude DESC LIMIT 1; 
SELECT s.City, f.LowGrade, f.[School Name] FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.State = 'CA' ORDER BY s.Latitude ASC LIMIT 1; 
SELECT GSoffered FROM schools WHERE ABS(longitude) = (SELECT MAX(ABS(longitude)) FROM schools); 
SELECT      s.City,     COUNT(s.SchoolName) AS NumberOfSchools,     COUNT(DISTINCT s.City) AS NumberOfCities FROM      schools s JOIN      frpm f ON s.CDSCode = f.CDSCode WHERE      s.GSoffered LIKE '%K-%' AND s.Magnet = 1 AND f.`NSLP Provision Status` = 'Multiple Provision Types' GROUP BY      s.City; 
SELECT AdmFName1, District, COUNT(*) AS AdminCount FROM schools GROUP BY AdmFName1, District ORDER BY AdminCount DESC LIMIT 2; 
SELECT      (frpm."Free Meal Count (K-12)" / frpm."Enrollment (K-12)") * 100 AS "Percent (%) Eligible Free (K-12)",      frpm."District Code" FROM      frpm JOIN      schools ON frpm.CDSCode = schools.CDSCode WHERE      schools."AdmFName1" = 'Alusine'; 
SELECT AdmLName1, District, County, School FROM schools WHERE CharterNum = '40'; 
SELECT DISTINCT AdmEmail1 FROM schools WHERE County = 'San Bernardino' AND City = 'San Bernardino City Unified' AND OpenDate BETWEEN '2009-01-01' AND '2010-12-31' AND (SOC = '62' OR DOC = '54'); 
SELECT s.School, s.AdmEmail1 FROM schools s JOIN (     SELECT cds, SUM(NumGE1500) AS total_num_ge_1500     FROM satscores     GROUP BY cds     ORDER BY total_num_ge_1500 DESC     LIMIT 1 ) ss ON s.CDSCode = ss.cds; 
SELECT COUNT(*) FROM account AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 LIKE '%East Bohemia%' AND T1.frequency LIKE '%POPLATEK PO OBRATU%'; 
SELECT COUNT(*)  FROM account AS acc  JOIN district AS dist ON acc.district_id = dist.district_id  WHERE dist.A3 = 'Prague'; 
SELECT      CASE          WHEN AVG(A12) > AVG(A13) THEN '1995'         ELSE '1996'     END AS HigherUnemploymentYear,     AVG(A12) AS AvgUnemploymentRate1995,     AVG(A13) AS AvgUnemploymentRate1996 FROM      district; 
SELECT COUNT(*) FROM district AS d JOIN client AS c ON d.district_id = c.district_id WHERE c.gender = 'F' AND d.A11 BETWEEN 6000 AND 10000; 
SELECT COUNT(*)  FROM client c  JOIN district d ON c.district_id = d.district_id  WHERE c.gender = 'M' AND d.A3 = 'north Bohemia' AND d.A11 > 8000; 
SELECT MIN(account.account_id) AS account_number, MAX(district.A11) - MIN(district.A11) AS salary_gap FROM account JOIN client ON account.district_id = client.district_id JOIN district ON account.district_id = district.district_id WHERE client.gender = 'F' ORDER BY client.birth_date ASC, district.A11 ASC LIMIT 1; 
SELECT a.account_id FROM account a JOIN client c ON a.district_id = c.district_id WHERE c.birth_date = (     SELECT MIN(birth_date)     FROM client ) AND a.district_id IN (     SELECT district_id     FROM district     WHERE A11 = (         SELECT MAX(A11)         FROM district     ) ); 
SELECT COUNT(*)  FROM disp  JOIN account ON disp.account_id = account.account_id  WHERE disp.type = 'OWNER' AND account.frequency = 'POPLATEK TYDNE'; 
SELECT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id WHERE d.type = 'DISPONENT'; 
SELECT a.account_id, a.frequency FROM account a JOIN loan l ON a.account_id = l.account_id WHERE YEAR(l.date) = 1997 ORDER BY l.amount ASC LIMIT 1; 
SELECT l.account_id FROM loan l JOIN disp d ON l.account_id = d.account_id WHERE l.duration > 12 AND YEAR(l.date) = 1993 ORDER BY l.amount DESC LIMIT 1; 
SELECT COUNT(client_id) FROM client WHERE gender = 'F' AND birth_date < '1950-01-01' AND district_id IN (SELECT district_id FROM district WHERE A2 = 'Sokolov'); 
SELECT DISTINCT account_id FROM trans WHERE YEAR(date) = 1995 ORDER BY date ASC LIMIT 1; 
SELECT DISTINCT a.account_id FROM account a JOIN trans t ON a.account_id = t.account_id WHERE a.date < '1997-01-01' AND t.amount > 3000; 
SELECT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card ca ON d.disp_id = ca.disp_id WHERE ca.issued = '1994-03-03'; 
SELECT a.date FROM account AS a JOIN trans AS t ON a.account_id = t.account WHERE t.amount = 840 AND t.date = '1998-10-14'; 
SELECT district_id FROM account WHERE account_id = (SELECT account_id FROM loan WHERE date = '1994-08-25'); 
SELECT MAX(amount) AS max_transaction_amount FROM trans JOIN account ON trans.account_id = account.account_id WHERE account.date = '19961021'; 
SELECT c.gender FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.birth_date = (     SELECT MIN(birth_date)     FROM client     WHERE district_id = (         SELECT district_id         FROM district         ORDER BY A11 DESC         LIMIT 1     ) ); 
SELECT t.amount FROM trans t JOIN (     SELECT l.account_id, MIN(t.date) AS first_transaction_date     FROM loan l     JOIN trans t ON l.account_id = t.account_id AND t.date > l.date     GROUP BY l.account_id     ORDER BY l.amount DESC     LIMIT 1 ) sub ON t.account_id = sub.account_id AND t.date = sub.first_transaction_date; 
SELECT COUNT(*) FROM client AS c JOIN district AS d ON c.district_id = d.district_id WHERE d.A2 = 'Jesenik' AND c.gender = 'F'; 
SELECT d.disp_id FROM disp d JOIN trans t ON d.account_id = t.account_id WHERE t.amount = 5100 AND t.date = '1998-09-02'; 
SELECT COUNT(account_id)  FROM account  JOIN district ON account.district_id = district.district_id  WHERE district_name = 'Litomerice' AND EXTRACT(YEAR FROM date::date) = 1996; 
SELECT T2.A2 FROM client AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T1.birth_date = '1976-01-29'; 
SELECT c.birth_date FROM client c JOIN account a ON c.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id WHERE l.amount = 98832 AND l.date = '1996-01-03'; 
SELECT account_id FROM account WHERE district_id = (SELECT district_id FROM district WHERE A3 = 'Prague') ORDER BY date ASC LIMIT 1; 
SELECT (COUNT(CASE WHEN c.gender = 'M' THEN 1 END) / COUNT(c.client_id)) * 100 AS percentage_male_clients FROM client c JOIN district d ON c.district_id = d.district_id WHERE d.A3 = 'south Bohemia'; 
SELECT ((t1.balance - t2.balance) / t2.balance) * 100 AS increase_rate FROM trans t1 JOIN trans t2 ON t1.account_id = t2.account_id AND t1.date = '1998-12-27' WHERE t1.type = 'PRIJEM' AND t1.date BETWEEN '1993-03-22' AND '1998-12-27' AND EXISTS (     SELECT 1     FROM loan l     WHERE l.account_id = t1.account_id AND l.date = '1993-07-05' ); 
SELECT CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS FLOAT) * 100 / SUM(amount) FROM loan 
SELECT ((SUM(CASE WHEN status = 'C' THEN 1 ELSE 0 END) * 100.0) / COUNT(*)) AS percentage FROM loan WHERE amount < 100000; 
SELECT a.account_id, d.A2 AS district_name, d.A3 AS district_region FROM account a JOIN district d ON a.district_id = d.district_id WHERE a.frequency = 'POPLATEK PO OBRATU' AND EXTRACT(YEAR FROM TO_DATE(a.date, 'YYMMDD')) = 1993; 
SELECT a.account_id, a.frequency FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.A3 = 'east Bohemia' AND a.date BETWEEN '19950101' AND '20001231'; 
SELECT a.account_id, a.date FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.A2 = 'Prachatice'; 
SELECT d.A2 AS district, d.A3 AS region FROM district d JOIN account a ON d.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id WHERE l.loan_id = 4990; 
SELECT account_id, T2.A2 AS district, T2.A3 AS region FROM loan AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.amount > 300000; 
SELECT l.loan_id, d.A2 AS district, AVG(d.A11) AS average_salary FROM loan l JOIN account a ON l.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE l.duration = 60 GROUP BY l.loan_id, d.A2; 
SELECT d.district_id, (d.A13 - d.A12) / d.A12 * 100 AS unemployment_rate_increment FROM district d JOIN account a ON d.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id WHERE l.status = 'D'; 
SELECT (COUNT(CASE WHEN T2.A2 = 'Decin' THEN 1 ELSE NULL END) * 100.0 / COUNT(T1.account_id)) AS percentage FROM account AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE EXTRACT(YEAR FROM TO_DATE(T1.date::text, 'YYMMDD')) = 1993; 
SELECT account_id FROM account; 
SELECT d.A2, COUNT(c.client_id) AS num_female_holders FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'F' GROUP BY d.A2 ORDER BY num_female_holders DESC LIMIT 9; 
SELECT d.A2 AS district_name, COUNT(t.account_id) AS withdrawal_count FROM trans t JOIN account a ON t.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE t.type = 'VYDAJ' AND t.date LIKE '1996-01%' GROUP BY d.A2 ORDER BY withdrawal_count DESC LIMIT 10; 
SELECT COUNT(DISTINCT d.client_id) FROM client d JOIN disp ds ON d.client_id = ds.client_id JOIN district dt ON d.district_id = dt.district_id WHERE dt.A3 = 'south Bohemia' AND ds.type != 'OWNER'; 
SELECT d.A3 AS district_name, COUNT(l.account_id) AS active_loan_count FROM district d JOIN account a ON d.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id WHERE l.status IN ('C', 'D') GROUP BY d.A3 ORDER BY active_loan_count DESC LIMIT 1; 
SELECT AVG(loan.amount) AS average_loan_amount FROM loan JOIN account ON loan.account_id = account.account_id JOIN client ON account.district_id = client.district_id WHERE client.gender = 'M'; 
SELECT district_id, A2 FROM district ORDER BY A13 DESC LIMIT 1; 
SELECT COUNT(account_id) AS num_accounts FROM account WHERE district_id = (     SELECT district_id     FROM district     ORDER BY A16 DESC     LIMIT 1 ); 
SELECT COUNT(DISTINCT t1.account_id) AS negative_balance_accounts FROM trans t1 JOIN account t2 ON t1.account_id = t2.account_id WHERE t1.operation = 'VYBER KARTOU' AND t1.balance < 0 AND t2.frequency = 'POPLATEK MESICNE'; 
SELECT COUNT(DISTINCT l.account_id) AS loan_count FROM loan l JOIN account a ON l.account_id = a.account_id WHERE l.date BETWEEN '1995-01-01' AND '1997-12-31' AND l.amount >= 250000 AND a.frequency = 'POPLATEK MESICNE'; 
SELECT COUNT(*) FROM account AS acc JOIN loan AS lo ON acc.account_id = lo.account_id WHERE acc.district_id = 1 AND (lo.status = 'C' OR lo.status = 'D'); 
SELECT COUNT(client_id) AS male_clients_count FROM client WHERE district_id = (     SELECT district_id     FROM district     ORDER BY A15 DESC     LIMIT 1 OFFSET 1 ) AND gender = 'M'; 
SELECT COUNT(*) FROM card AS c JOIN disp AS d ON c.disp_id = d.disp_id WHERE c.type = 'gold' AND d.type = 'OWNER'; 
SELECT COUNT(*) FROM account AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Pisek'; 
SELECT d.district_id FROM district d JOIN account a ON d.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id WHERE t.amount > 10000 AND YEAR(t.date) = 1997; 
SELECT DISTINCT t1.account_id FROM trans AS t1 JOIN account AS t2 ON t1.account_id = t2.account_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.k_symbol = 'SIPO' AND t3.A2 = 'Pisek'; 
SELECT DISTINCT account_id FROM card WHERE type = 'gold'; 
SELECT AVG(amount) AS avg_credit_card_amount FROM trans WHERE operation = 'VYBER KARTOU' AND EXTRACT(YEAR FROM date) = 2021; 
SELECT DISTINCT t1.account_id FROM trans AS t1 JOIN card AS t2 ON t1.account_id = t2.account_id WHERE t2.type = 'gold' AND t1.amount < (SELECT AVG(amount) FROM trans WHERE date BETWEEN '1998-01-01' AND '1998-12-31') AND t1.date BETWEEN '1998-01-01' AND '1998-12-31'; 
SELECT c.client_id, c.gender FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card ca ON d.disp_id = ca.disp_id JOIN loan l ON d.account_id = l.account_id WHERE c.gender = 'F'; 
SELECT COUNT(*) FROM client AS c JOIN district AS d ON c.district_id = d.district_id WHERE c.gender = 'F' AND d.A3 = 'south Bohemia'; 
SELECT account_id FROM account JOIN district ON account.district_id = district.district_id WHERE A2 = 'Tabor' AND (SELECT type FROM disp WHERE disp.account_id = account.account_id) = 'OWNER'; 
SELECT d.type, AVG(a.A11) AS avg_income FROM disp d JOIN account a ON d.account_id = a.account_id JOIN district a11 ON a.district_id = a11.district_id WHERE d.type != 'OWNER' AND a11.A11 BETWEEN 8000 AND 9000 GROUP BY d.type; 
SELECT COUNT(DISTINCT t.account_id) AS account_count FROM trans t JOIN account a ON t.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE d.A3 = 'north Bohemia' AND t.bank = 'AB'; 
SELECT DISTINCT d.A2 FROM district d JOIN account a ON d.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id WHERE t.type = 'VYDAJ'; 
SELECT AVG(A15) AS avg_crimes_1995 FROM district d JOIN account a ON d.district_id = a.district_id WHERE A15 > 4000 AND YEAR(a.date) >= 1997; 
SELECT COUNT(*)  FROM card  JOIN disp ON card.disp_id = disp.disp_id  WHERE card.type = 'classic' AND disp.type = 'OWNER'; 
SELECT COUNT(*) FROM client AS c JOIN district AS d ON c.district_id = d.district_id WHERE c.gender = 'M' AND d.A2 = 'Hl.m. Praha'; 
SELECT CAST(SUM(CASE WHEN type = 'gold' AND issued < '1998-01-01' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(*) FROM card; 
SELECT c.name FROM client c JOIN disp d ON c.client_id = d.client_id JOIN loan l ON d.account_id = l.account_id WHERE d.type = 'OWNER' ORDER BY l.amount DESC LIMIT 1; 
SELECT d.A15 FROM district AS d JOIN account AS a ON d.district_id = a.district_id WHERE a.account_id = 532; 
SELECT T2.district_id FROM order AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.order_id = 33333; 
SELECT t.trans_id, t.operation, t.account FROM trans t JOIN disp d ON t.account_id = d.account_id WHERE d.client_id = 3356 AND t.operation = 'VYBER'; 
SELECT COUNT(DISTINCT l.account_id) AS weekly_loan_count FROM loan l JOIN account a ON l.account_id = a.account_id WHERE a.frequency = 'POPLATEK TYDNE' AND l.amount < 200000; 
SELECT c.type FROM card c JOIN disp d ON c.disp_id = d.disp_id WHERE d.client_id = 13539; 
SELECT T1.A3 FROM district AS T1 JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.client_id = 3541; 
SELECT d.district_id, COUNT(a.account_id) AS account_count FROM district d JOIN account a ON d.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id WHERE l.status = 'A' GROUP BY d.district_id ORDER BY account_count DESC LIMIT 1; 
SELECT c.client_id, c.district_id FROM client c JOIN account a ON c.district_id = a.district_id JOIN order o ON a.account_id = o.account_id WHERE o.order_id = 32423; 
SELECT t.trans_id FROM trans t JOIN account a ON t.account_id = a.account_id WHERE a.district_id = 5; 
SELECT COUNT(*) FROM account WHERE district_id = (SELECT district_id FROM district WHERE district_name = 'Jesenik'); 
SELECT client_id FROM disp WHERE disp_id IN (SELECT disp_id FROM card WHERE type = 'junior' AND issued >= '1997-01-01'); 
SELECT (SUM(CASE WHEN T2.gender = 'F' THEN 1 ELSE 0 END) * 100.0 / COUNT(T2.client_id)) AS percentage_women FROM district AS T1 JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A11 > 10000; 
SELECT      ((SUM(CASE WHEN YEAR(l.date) = 1997 THEN l.amount ELSE 0 END) - SUM(CASE WHEN YEAR(l.date) = 1996 THEN l.amount ELSE 0 END)) / SUM(CASE WHEN YEAR(l.date) = 1996 THEN l.amount ELSE 0 END)) * 100 AS growth_rate FROM      loan l JOIN      disp d ON l.account_id = d.account_id JOIN      client c ON d.client_id = c.client_id WHERE      c.gender = 'M' AND      (YEAR(l.date) = 1996 OR YEAR(l.date) = 1997); 
SELECT COUNT(*) FROM trans WHERE operation = 'VYBER KARTOU' AND date > '1995-12-31'; 
SELECT (SELECT A16 FROM district WHERE A3 = 'north Bohemia') - (SELECT A16 FROM district WHERE A3 = 'east Bohemia') AS crime_difference; 
SELECT type, COUNT(*) AS count FROM disp WHERE account_id BETWEEN 1 AND 10 GROUP BY type; 
SELECT T2.frequency, SUM(T1.amount) AS total_amount, T1.k_symbol FROM order AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.account_id = 3 AND T1.amount = 3539 GROUP BY T2.frequency, T1.k_symbol; 
SELECT EXTRACT(YEAR FROM birth_date) AS birth_year FROM client WHERE client_id = 130; 
SELECT COUNT(*) FROM disp JOIN account ON disp.account_id = account.account_id WHERE disp.type = 'OWNER' AND account.frequency = 'POPLATEK PO OBRATU'; 
SELECT SUM(l.amount) AS total_debt, l.status AS payment_status FROM loan l JOIN account a ON l.account_id = a.account_id JOIN client c ON a.client_id = c.client_id WHERE c.client_id = 992; 
SELECT SUM(t.balance), c.gender FROM trans t JOIN account a ON t.account_id = a.account_id JOIN client c ON a.district_id = c.district_id WHERE t.trans_id = 851 AND c.client_id = 4; 
SELECT c.type FROM card AS c JOIN disp AS d ON c.disp_id = d.disp_id WHERE d.client_id = 9; 
SELECT SUM(t.amount) AS total_amount_paid FROM trans t JOIN account a ON t.account_id = a.account_id WHERE t.date BETWEEN '1998-01-01' AND '1998-12-31' AND a.client_id = 617; 
SELECT c.client_id, c.birth_date FROM client c JOIN account a ON c.district_id = a.district_id JOIN district d ON a.district_id = d.district_id WHERE c.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND d.A3 = 'East Bohemia'; 
SELECT c.client_id FROM client c JOIN loan l ON c.client_id = l.account_id WHERE c.gender = 'F' ORDER BY l.amount DESC LIMIT 3; 
SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN trans t ON c.client_id = t.account_id WHERE c.gender = 'M' AND c.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND t.amount > 4000 AND t.k_symbol = 'SIPO'; 
SELECT COUNT(*) FROM account AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.district_name = 'Beroun' AND T1.date > '960000'; 
SELECT COUNT(DISTINCT c.client_id) AS female_customers_with_junior_cards FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card ca ON d.disp_id = ca.disp_id WHERE c.gender = 'F' AND ca.type = 'junior'; 
SELECT (COUNT(CASE WHEN C.gender = 'F' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_female_clients FROM client C JOIN district D ON C.district_id = D.district_id WHERE D.A3 = 'Prague'; 
SELECT (CAST(SUM(CASE WHEN T2.gender = 'M' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(T1.client_id)) AS percentage FROM account AS T1 JOIN client AS T2 ON T1.client_id = T2.client_id WHERE T1.frequency = 'POPLATEK TYDNE'; 
SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id WHERE a.frequency = 'POPLATEK TYDNE' AND d.type = 'OWNER'; 
SELECT l.account_id, MIN(l.amount) AS min_amount FROM loan l JOIN account a ON l.account_id = a.account_id WHERE l.duration > 24 AND a.date < '1997-01-01' GROUP BY l.account_id; 
SELECT a.account_id FROM account a JOIN client c ON a.district_id = c.district_id WHERE c.gender = 'F' ORDER BY c.birth_date ASC, d.A11 ASC LIMIT 1; 
SELECT COUNT(client_id) FROM client AS c JOIN district AS d ON c.district_id = d.district_id WHERE EXTRACT(YEAR FROM birth_date) = 1920 AND d.A3 = 'east Bohemia'; 
SELECT COUNT(*)  FROM loan  JOIN account ON loan.account_id = account.account_id  WHERE loan.duration = 24 AND account.frequency = 'POPLATEK TYDNE'; 
SELECT AVG(loan.payments) AS avg_loan_amount FROM loan JOIN account ON loan.account_id = account.account_id WHERE loan.status IN ('C', 'D') AND account.frequency = 'POPLATEK PO OBRATU'; 
SELECT d.account_id, dis.district_id FROM disp dis JOIN account d ON dis.account_id = d.account_id WHERE dis.type = 'OWNER'; 
SELECT c.client_id, (YEAR(CURDATE()) - YEAR(c.birth_date)) AS age FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card ca ON d.disp_id = ca.disp_id WHERE ca.type = 'gold' AND d.type = 'OWNER'; 
SELECT bond_type FROM bond GROUP BY bond_type ORDER BY COUNT(*) DESC LIMIT 1
SELECT COUNT(DISTINCT atom.molecule_id) AS count_non_carcinogenic_with_chlorine FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '-' AND atom.element = 'cl'; 
SELECT AVG(CASE WHEN T2.element = 'o' THEN 1 ELSE 0 END) FROM bond AS T1 JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-'
SELECT AVG(CASE WHEN T1.bond_type = '-' THEN 1 ELSE 0 END) FROM bond AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'
SELECT COUNT(*) FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'na' AND molecule.label = '-'; 
SELECT DISTINCT m.molecule_id, m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '#' AND m.label = '+'; 
SELECT CAST(SUM(CASE WHEN T2.element = 'c' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(T1.atom_id) AS percentage FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '='; 
SELECT COUNT(*) FROM bond WHERE bond_type = '#'; 
SELECT COUNT(*) FROM atom WHERE element != 'br'; 
SELECT COUNT(*) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+'; 
SELECT DISTINCT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'c'; 
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id IN (c.atom_id) WHERE c.bond_id = 'TR004_8_9'; 
SELECT DISTINCT T1.element FROM atom AS T1 JOIN bond AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_type = '='
SELECT label FROM atom WHERE element = 'h' GROUP BY label ORDER BY COUNT(label) DESC LIMIT 1; 
SELECT b.bond_type FROM bond b JOIN atom a ON b.bond_id IN (a.atom_id, a.atom_id2) WHERE a.element = 'cl'; 
SELECT DISTINCT atom_id, atom_id2 FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE bond_type = '-'); 
SELECT DISTINCT c.atom_id FROM connected c JOIN atom a ON c.atom_id = a.atom_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '-'; 
SELECT element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '-' GROUP BY element ORDER BY COUNT(element) ASC LIMIT 1; 
SELECT bond_type FROM connected JOIN bond ON connected.bond_id = bond.bond_id WHERE (connected.atom_id = 'TR004_8' AND connected.atom_id2 = 'TR004_20') OR (connected.atom_id = 'TR004_20' AND connected.atom_id2 = 'TR004_8'); 
SELECT label FROM molecule WHERE molecule_id NOT IN (SELECT molecule_id FROM atom WHERE element = 'sn'); 
SELECT COUNT(DISTINCT a.atom_id) FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE (a.element = 'i' OR a.element = 's') AND b.bond_type = '-'; 
SELECT c.atom_id, c.atom_id2 FROM connected c JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '#'; 
SELECT DISTINCT atom_id FROM connected WHERE atom_id IN (SELECT atom_id FROM atom WHERE molecule_id = 'TR181') OR atom_id2 IN (SELECT atom_id FROM atom WHERE molecule_id = 'TR181'); 
SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element = 'f' THEN T1.molecule_id ELSE NULL END) AS FLOAT) * 100 / COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'; 
SELECT CAST(SUM(CASE WHEN b.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(b.bond_id) AS percent FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.label = '+'; 
SELECT element FROM atom WHERE molecule_id = 'TR000' ORDER BY element ASC LIMIT 3; 
SELECT SUBSTRING(bond_id, 7, 2) AS atom_pair FROM bond WHERE molecule_id = 'TR001' AND bond_id = 'TR001_2_6'; 
SELECT (SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) - SUM(CASE WHEN label = '-' THEN 1 ELSE 0 END)) AS difference FROM molecule; 
SELECT atom_id, atom_id2 FROM connected WHERE bond_id = 'TR000_2_5'; 
SELECT bond_id FROM connected WHERE atom_id2 = 'TR000_2'; 
SELECT molecule_id FROM bond WHERE bond_type = ' = ' ORDER BY molecule_id ASC LIMIT 5; 
SELECT CAST(SUM(CASE WHEN T1.bond_type = '=' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.bond_id) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.molecule_id = 'TR008'
SELECT ROUND((SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) / COUNT(molecule_id)) * 100, 3) AS percent FROM molecule; 
SELECT ROUND(CAST(SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(atom_id), 4) AS percent FROM atom WHERE molecule_id = 'TR206'; 
SELECT bond_type FROM bond WHERE molecule_id = 'TR000'; 
SELECT T1.element, T2.label FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR060'; 
SELECT bond_type, COUNT(*) AS bond_count, label FROM connected  JOIN bond ON connected.bond_id = bond.bond_id  JOIN molecule ON bond.molecule_id = molecule.molecule_id  WHERE molecule_id = 'TR010'  GROUP BY bond_type, label  ORDER BY bond_count DESC  LIMIT 1; 
SELECT b.molecule_id FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '-' AND m.label = '-' ORDER BY b.molecule_id ASC LIMIT 3; 
SELECT b.bond_id FROM connected c JOIN atom a ON c.atom_id = a.atom_id WHERE a.molecule_id = 'TR006' ORDER BY b.bond_id ASC LIMIT 2; 
SELECT COUNT(*) FROM connected WHERE (atom_id = 'TR009_12' OR atom_id2 = 'TR009_12') AND molecule_id = 'TR009'; 
SELECT COUNT(*) FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'br' AND molecule.label = '+'; 
SELECT b.bond_type, c.atom_id, c.atom_id2 FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE b.bond_id = 'TR001_6_9'; 
SELECT m.molecule_id, m.label FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.atom_id = 'TR001_10'; 
SELECT COUNT(*) FROM bond WHERE bond_type = '#'; 
SELECT COUNT(*) FROM connected WHERE atom_id LIKE 'TR%_19'; 
SELECT element FROM atom WHERE molecule_id = 'TR004'; 
SELECT COUNT(*) FROM molecule WHERE label = '-'; 
SELECT DISTINCT m.molecule_id FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE SUBSTR(a.atom_id, 7, 2) BETWEEN '21' AND '25' AND m.label = '+'; 
SELECT DISTINCT b.bond_id FROM connected AS c JOIN atom AS a1 ON c.atom_id = a1.atom_id JOIN atom AS a2 ON c.bond_id LIKE CONCAT('%', a2.atom_id, '%') WHERE (a1.element = 'p' AND a2.element = 'n') OR (a1.element = 'n' AND a2.element = 'p'); 
SELECT m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '=' GROUP BY m.label ORDER BY COUNT(b.bond_id) DESC LIMIT 1; 
SELECT AVG(COUNT(bond_id)) FROM connected AS T1 JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T2.element = 'i' GROUP BY T1.atom_id
SELECT b.bond_type, b.bond_id FROM bond AS b JOIN connected AS c ON b.bond_id = c.bond_id WHERE CAST(SUBSTR(c.atom_id, 7, 2) AS INT) = 45; 
SELECT element FROM atom WHERE atom_id NOT IN (SELECT atom_id FROM connected); 
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE b.molecule_id = 'TR041' AND b.bond_type = '#'; 
SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id WHERE c.bond_id = 'TR144_8_19'; 
SELECT m.label, COUNT(b.bond_type) AS double_bond_count FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE m.label = '+' AND b.bond_type = '=' GROUP BY m.label ORDER BY double_bond_count DESC LIMIT 1; 
SELECT element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' GROUP BY element ORDER BY COUNT(*) ASC LIMIT 1; 
SELECT DISTINCT c.atom_id FROM connected c JOIN atom a ON c.atom_id2 = a.atom_id WHERE a.element = 'pb'; 
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '#'; 
SELECT CAST(SUM(CASE WHEN bond_type = (SELECT bond_type FROM bond GROUP BY bond_type ORDER BY COUNT(*) DESC LIMIT 1) THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(*) FROM connected JOIN bond ON connected.bond_id = bond.bond_id; 
SELECT ROUND((SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) * 100.0 / COUNT(T1.bond_id)), 5) AS percentage FROM bond AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-'
SELECT COUNT(*) FROM atom WHERE element IN ('c', 'h'); 
SELECT T2.atom_id2 FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 's'; 
SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id WHERE a.element = 'sn'; 
SELECT COUNT(DISTINCT a.element) AS num_elements_single_bond_molecules FROM atom a JOIN bond b ON a.molecule_id = b.molecule_id WHERE b.bond_type = '-'; 
SELECT COUNT(DISTINCT T2.atom_id) FROM bond AS T1 JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND (T2.element = 'p' OR T2.element = 'br'); 
SELECT b.bond_id FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.label = '+'; 
SELECT DISTINCT b.molecule_id FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '-' AND m.label = '-'; 
SELECT CAST(COUNT(CASE WHEN T3.element = 'cl' THEN 1 ELSE NULL END) AS FLOAT) * 100 / COUNT(T2.atom_id) FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN molecule AS T3 ON T2.molecule_id = T3.molecule_id WHERE T1.bond_type = '-'
SELECT label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002'); 
SELECT molecule_id FROM molecule WHERE label = '-'; 
SELECT COUNT(*) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR030' AND label = '+'; 
SELECT bond_type FROM bond WHERE molecule_id BETWEEN 'TR000' AND 'TR050'; 
SELECT a1.element AS element1, a2.element AS element2 FROM atom a1 JOIN connected c ON a1.atom_id = c.atom_id JOIN atom a2 ON c.bond_id = (SELECT bond_id FROM connected WHERE atom_id = c.atom_id) WHERE c.bond_id = 'TR001_10_11'; 
SELECT COUNT(DISTINCT b.bond_id) AS bond_count FROM bond b JOIN atom a ON b.molecule_id = a.molecule_id WHERE a.element = 'i'; 
SELECT MAX(m.label) AS majority_label FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'ca'; 
SELECT EXISTS (     SELECT 1     FROM connected AS c     JOIN atom AS a ON c.atom_id = a.atom_id     WHERE c.bond_id = 'TR001_1_8' AND a.element = 'cl' ) AND EXISTS (     SELECT 1     FROM connected AS c     JOIN atom AS a ON c.atom_id2 = a.atom_id     WHERE c.bond_id = 'TR001_1_8' AND a.element = 'c' ); 
SELECT DISTINCT b.molecule_id FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id JOIN atom a ON b.molecule_id = a.molecule_id WHERE b.bond_type = '#' AND m.label = '-' AND a.element = 'c' LIMIT 2; 
SELECT CAST(SUM(CASE WHEN T1.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'
SELECT element FROM atom WHERE molecule_id = 'TR001'; 
SELECT molecule_id FROM bond WHERE bond_type = '= ';
SELECT T1.atom_id, T1.atom_id2 FROM connected AS T1 JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_type = '#'; 
SELECT DISTINCT t1.element FROM atom AS t1 JOIN connected AS t2 ON t1.atom_id = t2.atom_id WHERE t2.bond_id = 'TR000_1_2'; 
SELECT COUNT(*) FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '-' AND molecule.label = '-'; 
SELECT T2.label FROM bond AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_10_11'; 
SELECT b.bond_id, m.label FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '#' AND m.label IN ('+', '-'); 
SELECT t1.element  FROM atom AS t1  JOIN molecule AS t2 ON t1.molecule_id = t2.molecule_id  WHERE t1.atom_id LIKE '%_4' AND t2.label = '+'; 
SELECT CAST(SUM(CASE WHEN T1.element = 'h' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.element) AS ratio, T2.label FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR006'; 
SELECT m.label FROM molecule AS m JOIN atom AS a ON m.molecule_id = a.molecule_id WHERE a.element = 'ca'; 
SELECT DISTINCT b.bond_type FROM connected c JOIN bond b ON c.bond_id = b.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE (a1.element = 'c' AND a2.element != 'c') OR (a1.element != 'c' AND a2.element = 'c'); 
SELECT DISTINCT a1.element AS element1, a2.element AS element2 FROM connected c JOIN bond b ON c.bond_id = b.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id AND SUBSTR(b.bond_id, 7, 2) = a1.atom_id JOIN atom a2 ON c.bond_id = b.bond_id AND SUBSTR(b.bond_id, 10, 2) = a2.atom_id WHERE b.bond_id = 'TR001_10_11'; 
SELECT (SUM(CASE WHEN bond_type = '#' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond_id)) AS percentage_of_triple_bonds FROM bond; 
SELECT CAST(SUM(CASE WHEN bond_type = '=' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(*) AS percent FROM bond WHERE molecule_id = 'TR047'; 
SELECT m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.atom_id = 'TR001_1'; 
SELECT label FROM molecule WHERE molecule_id = 'TR151'; 
SELECT element FROM atom WHERE molecule_id = 'TR151'; 
SELECT COUNT(*) FROM molecule WHERE label = '+'; 
SELECT atom_id FROM atom WHERE molecule_id BETWEEN 'TR010' AND 'TR050' AND element = 'c'; 
SELECT COUNT(*) FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+'); 
SELECT b.bond_id FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '=' AND m.label = '+'; 
SELECT COUNT(*) FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' AND T2.label = '+'; 
SELECT T2.molecule_id FROM connected AS T1 JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T1.atom_id = 'TR000_1' AND T1.bond_id = 'TR000_1_2'; 
SELECT DISTINCT atom_id FROM atom WHERE element = 'c' AND molecule_id IN (     SELECT molecule_id     FROM molecule     WHERE label = '-' ); 
SELECT CAST(SUM(CASE WHEN T1.label = '+' AND T2.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.molecule_id) AS percentage FROM molecule AS T1 JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id; 
SELECT label FROM molecule WHERE molecule_id = 'TR124'; 
SELECT atom_id FROM atom WHERE molecule_id = 'TR186'; 
SELECT bond_type FROM bond WHERE bond_id = 'TR007_4_19'; 
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id IN (c.atom_id) WHERE c.bond_id = 'TR001_2_4'; 
SELECT COUNT(*) AS double_bond_count, (SELECT label FROM molecule WHERE molecule_id = 'TR006') AS carcinogenicity FROM bond WHERE molecule_id = 'TR006' AND bond_type = '='; 
SELECT m.molecule_id, m.label, a.element FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+'; 
SELECT b.bond_id, b.bond_type, c1.atom_id AS atom1, c2.atom_id AS atom2 FROM bond b JOIN connected c1 ON b.bond_id = c1.bond_id JOIN connected c2 ON b.bond_id = c2.bond_id WHERE b.bond_type = '-'; 
SELECT DISTINCT b.molecule_id, a.element FROM bond b JOIN atom a ON b.molecule_id = a.molecule_id WHERE b.bond_type = '#'; 
SELECT a.element FROM atom a JOIN connected c ON a.atom_id IN (c.atom_id) WHERE c.bond_id = 'TR000_2_3'; 
SELECT COUNT(*) FROM connected WHERE atom_id IN (SELECT atom_id FROM atom WHERE element = 'cl'); 
SELECT a.atom_id, COUNT(b.bond_type) AS bond_count FROM atom a JOIN bond b ON a.molecule_id = b.molecule_id WHERE a.molecule_id = 'TR346' GROUP BY a.atom_id; 
SELECT COUNT(*) AS total_double_bonds, SUM(CASE WHEN molecule.label = '+' THEN 1 ELSE 0 END) AS carcinogenic_double_bonds FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '='; 
SELECT COUNT(DISTINCT b.molecule_id) FROM bond b JOIN atom a ON b.molecule_id = a.molecule_id WHERE b.bond_type != '=' AND a.element != 's'; 
SELECT T3.label FROM bond AS T1 JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T1.bond_id = 'TR001_2_4'; 
SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR001'; 
SELECT COUNT(*) FROM bond WHERE bond_type = '-'; 
SELECT m.molecule_id, m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'cl' AND m.label = '+'; 
SELECT m.molecule_id, m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'c' AND m.label = '-'; 
SELECT CAST(SUM(CASE WHEN T1.label = '+' AND T2.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.molecule_id) AS percentage FROM molecule AS T1 JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id; 
SELECT T1.molecule_id FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_1_7'; 
SELECT COUNT(DISTINCT element) AS element_count FROM atom WHERE atom_id IN (SELECT atom_id FROM connected WHERE bond_id = 'TR001_3_4'); 
SELECT bond_type FROM bond WHERE bond_id IN (SELECT bond_id FROM connected WHERE (atom_id = 'TR000_1' AND atom_id2 = 'TR000_2') OR (atom_id = 'TR000_2' AND atom_id2 = 'TR000_1')); 
SELECT b.molecule_id FROM connected c JOIN bond b ON c.bond_id = b.bond_id WHERE (c.atom_id = 'TR000_2' AND c.atom_id2 = 'TR000_4') OR (c.atom_id = 'TR000_4' AND c.atom_id2 = 'TR000_2'); 
SELECT element FROM atom WHERE atom_id = 'TR000_1'; 
SELECT label FROM molecule WHERE molecule_id = 'TR000'; 
SELECT (COUNT(CASE WHEN bond_type = '-' THEN 1 ELSE NULL END) * 100.0 / COUNT(bond_id)) AS percentage FROM bond; 
SELECT COUNT(*) FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'n' AND molecule.label = '+'; 
SELECT DISTINCT b.molecule_id FROM bond b JOIN atom a ON b.molecule_id = a.molecule_id WHERE a.element = 's' AND b.bond_type = '='; 
SELECT m.molecule_id, COUNT(a.atom_id) AS atom_count FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '-' GROUP BY m.molecule_id HAVING COUNT(a.atom_id) > 5; 
SELECT DISTINCT a.element FROM atom a JOIN bond b ON a.molecule_id = b.molecule_id WHERE b.bond_type = '=' AND a.molecule_id = 'TR024'; 
SELECT molecule_id  FROM molecule  JOIN atom ON molecule.molecule_id = atom.molecule_id  WHERE label = '+'  GROUP BY molecule_id  ORDER BY COUNT(atom.molecule_id) DESC  LIMIT 1; 
SELECT CAST(SUM(CASE WHEN m.label = '+' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(*) FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'h' AND b.bond_type = '#' 
SELECT COUNT(*) FROM molecule WHERE label = '+'; 
SELECT COUNT(*) FROM bond WHERE molecule_id BETWEEN 'TR004' AND 'TR010' AND bond_type = '-'; 
SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR008' AND element = 'c'; 
SELECT T1.element FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR004_7' AND T2.label = '-'; 
SELECT COUNT(DISTINCT b.molecule_id) AS total_molecules_with_double_bonded_oxygen FROM bond b JOIN atom a ON b.molecule_id = a.molecule_id WHERE b.bond_type = '= ' AND a.element = 'o'; 
SELECT COUNT(*) FROM molecule AS m JOIN bond AS b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '#' AND m.label = '-'; 
SELECT a.element, b.bond_type FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE a.molecule_id = 'TR002'; 
SELECT T2.atom_id FROM bond AS T1 JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '= ' AND T2.element = 'c' AND T1.molecule_id = 'TR012'; 
SELECT T1.atom_id FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'o'; 
SELECT * FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL; 
SELECT * FROM cards WHERE borderColor = 'borderless' AND cardKingdomFoilId IS NULL; 
SELECT name FROM cards WHERE faceConvertedManaCost = (SELECT MAX(faceConvertedManaCost) FROM cards);
SELECT id FROM cards WHERE frameVersion = '2015' AND edhrecRank < 100; 
SELECT c.id, c.rarity, c.uuid FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.rarity = 'mythic' AND l.status = 'Banned' AND l.format = 'gladiator'; 
SELECT T1.status FROM legalities AS T1 JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.types = 'Artifact' AND T2.side IS NULL AND T1.format = 'vintage'
SELECT c.id, c.artist FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE (c.power = '*' OR c.power IS NULL) AND l.format = 'commander' AND l.status = 'Legal'; 
SELECT c.id, c.text, r.text AS ruling_text, c.hasContentWarning FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.artist = 'Stephen Daniel'; 
SELECT T2.text FROM cards AS T1 JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sublime Epiphany' AND T1.number = '74s'
SELECT c.name, c.artist, c.isPromo, COUNT(r.uuid) AS ruling_count FROM cards c JOIN rulings r ON c.uuid = r.uuid GROUP BY c.name, c.artist, c.isPromo ORDER BY ruling_count DESC LIMIT 1; 
SELECT f.language FROM foreign_data f JOIN cards c ON f.uuid = c.uuid WHERE c.name = 'Annul' AND c.number = '29'; 
SELECT T1.name FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'; 
SELECT CAST(SUM(CASE WHEN language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(id) AS percentage FROM foreign_data; 
SELECT s.name, s.totalSetSize  FROM sets s  JOIN set_translations st ON s.code = st.setCode  WHERE st.language = 'Italian'; 
SELECT COUNT(DISTINCT type) FROM cards WHERE artist = 'Aaron Boyd'; 
SELECT keywords FROM cards WHERE name = 'Angel of Mercy'; 
SELECT COUNT(*) FROM cards WHERE power = '*'; 
SELECT promoTypes FROM cards WHERE name = 'Duress'
SELECT borderColor FROM cards WHERE name = 'Ancestor''s Chosen'; 
SELECT originalType FROM cards WHERE name = 'Ancestor\'s Chosen'; 
SELECT DISTINCT st.language  FROM set_translations st JOIN cards c ON st.id = c.set_id WHERE c.name = 'Angel of Mercy'; 
SELECT COUNT(*) FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Restricted' AND cards.isTextless = 0; 
SELECT t1.text FROM rulings AS t1 JOIN cards AS t2 ON t1.uuid = t2.uuid WHERE t2.name = 'Condemn'; 
SELECT COUNT(DISTINCT c.id) FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.isStarter = 1 AND l.status = 'Restricted'; 
SELECT T2.status FROM cards AS T1 JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'; 
SELECT type FROM cards WHERE name = 'Benalish Knight'; 
SELECT format FROM legalities WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Benalish Knight'); 
SELECT T1.artist FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian'; 
SELECT CAST(SUM(CASE WHEN borderColor = 'borderless' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(id) AS percentage FROM cards; 
SELECT COUNT(*) FROM foreign_data AS T1 JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.language = 'German' AND T2.isReprint = 1; 
SELECT COUNT(*)  FROM foreign_data  JOIN cards ON foreign_data.uuid = cards.uuid  WHERE foreign_data.language = 'Russian' AND cards.borderColor = 'borderless'; 
SELECT      CAST(SUM(CASE WHEN T1.language = 'French' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(T1.id) AS Percentage FROM      foreign_data AS T1 JOIN      cards AS T2 ON T1.uuid = T2.uuid WHERE      T2.isStorySpotlight = 1; 
SELECT COUNT(*) FROM cards WHERE toughness = '99'; 
SELECT name FROM cards WHERE artist = 'Aaron Boyd'; 
SELECT COUNT(*) FROM cards WHERE borderColor = 'black' AND availability LIKE '%mtgo%' AND NOT availability LIKE '%paper%'; 
SELECT id FROM cards WHERE convertedManaCost = 0; 
SELECT layout FROM cards WHERE keywords LIKE '%Flying%'
SELECT COUNT(*)  FROM cards  WHERE originalType = 'Summon - Angel' AND subtypes != 'Angel'; 
SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL; 
SELECT id FROM cards WHERE duelDeck = 'a'; 
SELECT edhrecRank FROM cards WHERE frameVersion = '2015'; 
SELECT T1.artist FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'; 
SELECT c.name FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.availability = 'paper' AND fd.language = 'Japanese'; 
SELECT COUNT(*) FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.status = 'Banned' AND c.borderColor = 'white'; 
SELECT f.uuid, fd.language FROM foreign_data fd JOIN cards c ON fd.uuid = c.uuid JOIN legalities l ON c.uuid = l.uuid WHERE l.format = 'legacy'; 
SELECT r.text FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.name = 'Beacon of Immortality'; 
SELECT COUNT(c.id), l.status FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.frameVersion = 'future' AND l.status = 'legal' GROUP BY l.status; 
SELECT c.id, c.colors FROM cards c JOIN set_translations st ON c.setCode = st.setCode WHERE st.setCode = 'OGW'; 
SELECT c.id, s.language FROM cards c JOIN set_translations s ON c.setCode = s.setCode WHERE c.convertedManaCost = 5 AND s.setCode = '10E'; 
SELECT c.originalType, r.date FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.originalType = 'Creature - Elf'; 
SELECT c.colors, l.format FROM cards AS c JOIN legalities AS l ON c.uuid = l.uuid WHERE c.id BETWEEN 1 AND 20; 
SELECT fd.name AS foreign_name, c.name AS card_name FROM foreign_data fd JOIN cards c ON fd.uuid = c.uuid WHERE c.originalType = 'Artifact' AND c.colors = 'B'; 
SELECT c.name FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.rarity = 'uncommon' ORDER BY r.date ASC LIMIT 3; 
SELECT COUNT(*) FROM cards WHERE artist = 'John Avon' AND cardKingdomFoilId IS NULL; 
SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL; 
SELECT COUNT(*) FROM cards WHERE artist = 'UDON' AND availability = 'mtgo' AND hand = -1; 
SELECT COUNT(*) FROM cards WHERE frameVersion = '1993' AND availability LIKE '%paper%' AND hasContentWarning = 1; 
SELECT manaCost FROM cards WHERE layout = 'normal' AND frameVersion = '2003' AND borderColor = 'black' AND availability LIKE '%mtgo%' AND availability LIKE '%paper%'; 
SELECT SUM(CONVERTEDMANACOST) AS TotalUnconvertedManaCost FROM cards WHERE artist = 'Rob Alexander'; 
SELECT DISTINCT subtype || ' ' || supertype AS type FROM cards WHERE availability LIKE '%arena%'; 
SELECT setCode FROM set_translations WHERE language = 'Spanish'; 
SELECT CAST(SUM(CASE WHEN isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards WHERE frameEffects = 'legendary'
SELECT CAST(SUM(CASE WHEN isStorySpotlight = 1 AND isTextless = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards
SELECT name, (SUM(CASE WHEN language = 'Spanish' THEN 1 ELSE 0 END) * 100 / COUNT(id)) AS percentage FROM foreign_data GROUP BY name; 
SELECT T1.language FROM set_translations AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.baseSetSize = 309; 
SELECT COUNT(*) FROM set_translations WHERE language = 'Portuguese (Brasil)' AND setCode IN (SELECT code FROM sets WHERE block = 'Commander'); 
SELECT c.id FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.types = 'Creature' AND l.status = 'Legal'; 
SELECT DISTINCT T1.subtypes, T1.supertypes FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL; 
SELECT COUNT(*) FROM cards WHERE power IS NULL OR power = '*' AND text LIKE '%triggered ability%'; 
SELECT COUNT(*) FROM cards JOIN legalities ON cards.uuid = legalities.uuid JOIN rulings ON cards.uuid = rulings.uuid WHERE legalities.format = 'premodern' AND rulings.text LIKE '%This is a triggered mana ability.%' AND cards.side IS NULL; 
SELECT c.id FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.artist = 'Erica Yang' AND l.format = 'pauper' AND c.availability LIKE '%paper%'; 
SELECT artist FROM cards WHERE flavorText = 'Das perfekte Gegenmittel zu einer dichten Formation';
SELECT T1.name  FROM foreign_data AS T1  JOIN cards AS T2 ON T1.uuid = T2.uuid  WHERE T1.language = 'French' AND T2.types = 'Creature' AND T2.layout = 'normal' AND T2.borderColor = 'black' AND T2.artist = 'Matthew D. Wilson'; 
SELECT COUNT(DISTINCT r.uuid) FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE r.date = '2007-02-01' AND c.rarity = 'rare'; 
SELECT T1.language  FROM set_translations AS T1  JOIN sets AS T2 ON T1.setCode = T2.code  WHERE T2.baseSetSize = 180 AND T2.block = 'Ravnica'; 
SELECT CAST(SUM(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(*) FROM cards AS T1 JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'legal'; 
SELECT CAST(SUM(CASE WHEN T1.language = 'French' AND (T2.power IS NULL OR T2.power = '*') THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.power IS NULL OR T2.power = '*' THEN 1 ELSE 0 END) FROM foreign_data AS T1 JOIN cards AS T2 ON T1.uuid = T2.uuid; 
SELECT CAST(SUM(CASE WHEN T1.language = 'Japanese' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(*) FROM set_translations AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.type = 'expansion'; 
SELECT availability FROM cards WHERE artist = 'Daren Bader'
SELECT COUNT(*) FROM cards WHERE borderColor = 'borderless' AND edhrecRank > 12000; 
SELECT COUNT(*) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1; 
SELECT name FROM cards WHERE (power IS NULL OR power = '*') AND promoTypes LIKE '%arenaleague%' ORDER BY name ASC LIMIT 3; 
SELECT language FROM foreign_data WHERE multiverseid = 149934; 
SELECT cardKingdomFoilId, cardKingdomId FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId ASC LIMIT 3; 
SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(*) FROM cards; 
SELECT id FROM cards WHERE side IS NULL AND subtypes LIKE '%Angel%' AND subtypes LIKE '%Wizard%'; 
SELECT name FROM sets WHERE mtgoCode IS NULL OR mtgoCode = '' ORDER BY name ASC LIMIT 3; 
SELECT DISTINCT st.language FROM set_translations st JOIN sets s ON st.setCode = s.code WHERE s.mcmName = 'Archenemy' AND s.code = 'ARC'; 
SELECT s.name, st.translation FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.id = 5; 
SELECT s.type, st.language FROM sets s JOIN set_translations st ON s.id = st.setCode WHERE s.id = 206; 
SELECT s.id, s.name FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Italian' AND s.block = 'Shadowmoor' ORDER BY s.name ASC LIMIT 2; 
SELECT s.id  FROM sets s  JOIN set_translations st ON s.code = st.setCode  WHERE s.isForeignOnly = 0 AND s.isFoilOnly = 1 AND st.language = 'Japanese'; 
SELECT s.setCode, s.baseSetSize FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Russian' ORDER BY s.baseSetSize DESC LIMIT 1; 
SELECT      (SUM(CASE WHEN T1.language = 'Chinese Simplified' AND T2.isOnlineOnly = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(T2.setCode)) AS percentage FROM      set_translations AS T1 JOIN      sets AS T2 ON T1.setCode = T2.code; 
SELECT COUNT(*) FROM set_translations st JOIN sets s ON st.setCode = s.code WHERE st.language = 'Japanese' AND (s.mtgoCode IS NULL OR s.mtgoCode = ''); 
SELECT COUNT(id) AS count_black_border_cards, id FROM cards WHERE borderColor = 'black'; 
SELECT COUNT(id) AS card_count FROM cards WHERE frameEffects = 'extendedart'; SELECT id FROM cards WHERE frameEffects = 'extendedart'; 
SELECT id FROM cards WHERE borderColor = 'black' AND isFullArt = 1;
SELECT language FROM set_translations WHERE id = 174; 
SELECT name FROM sets WHERE code = 'ALL'; 
SELECT language FROM foreign_data WHERE name = 'A Pedra Fellwar'; 
SELECT code FROM sets WHERE releaseDate = '2007-07-13'; 
SELECT baseSetSize, code FROM sets WHERE block IN ('Masques', 'Mirage'); 
SELECT T1.setCode FROM set_translations AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.type = 'expansion'; 
SELECT f.name, c.type FROM foreign_data f JOIN cards c ON f.uuid = c.uuid WHERE c.watermark = 'Boros'; 
SELECT f.language, f.flavorText, c.type FROM foreign_data f JOIN cards c ON f.uuid = c.uuid WHERE c.watermark = 'colorpie'
SELECT (CAST(SUM(CASE WHEN T2.convertedManaCost = 10 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.id)) FROM sets AS T1 INNER JOIN cards AS T2 ON T1.code = T2.setCode WHERE T1.name = 'Abyssal Horror'; 
SELECT setCode FROM set_translations WHERE setCode IN (SELECT code FROM sets WHERE type = 'commander'); 
SELECT f.name, f.type FROM foreign_data f JOIN cards c ON f.uuid = c.uuid WHERE c.watermark = 'Abzan'; 
SELECT f.language, c.type FROM foreign_data f JOIN cards c ON f.uuid = c.uuid WHERE c.watermark = 'Azorius'; 
SELECT COUNT(*)  FROM cards  WHERE artist = 'Aaron Miller'    AND cardKingdomFoilId IS NOT NULL    AND cardKingdomId IS NOT NULL; 
SELECT COUNT(*) FROM cards WHERE availability LIKE '%paper%' AND hand = '3'; 
SELECT name FROM cards WHERE isTextless = 0; 
SELECT manaCost FROM cards WHERE name = 'Ancestor`s Chosen'; 
SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND (power IS NULL OR power = '*'); 
SELECT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL; 
SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'
SELECT purchaseUrls FROM cards WHERE promoTypes LIKE '%bundle%'; 
SELECT COUNT(DISTINCT artist)  FROM cards  WHERE availability LIKE '%black%' AND availability LIKE '%arena,mtgo%'; 
SELECT name FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1; 
SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer'
SELECT name FROM cards WHERE frameVersion = '2003' ORDER BY convertedManaCost DESC LIMIT 3; 
SELECT t1.translation  FROM set_translations AS t1  JOIN cards AS t2 ON t1.setCode = t2.setCode  WHERE t2.name = 'Ancestor''s Chosen' AND t1.language = 'Italian'; 
SELECT COUNT(DISTINCT t.setCode) AS translation_count FROM set_translations t JOIN cards c ON t.setCode = c.setCode WHERE c.name = 'Angel of Mercy'; 
SELECT c.name  FROM cards c  JOIN set_translations st ON c.setCode = st.setCode  WHERE st.translation = 'Hauptset Zehnte Edition'; 
SELECT EXISTS (     SELECT 1     FROM set_translations st     JOIN cards c ON st.setCode = c.setCode     WHERE c.name = 'Ancestor''s Chosen' AND st.language = 'Korean' ); 
SELECT COUNT(*)  FROM cards  JOIN set_translations ON cards.setCode = set_translations.setCode  WHERE set_translations.translation = 'Hauptset Zehnte Edition' AND cards.artist = 'Adam Rex'; 
SELECT s.baseSetSize FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.translation = 'Hauptset Zehnte Edition'; 
SELECT t1.translation  FROM set_translations AS t1  JOIN sets AS t2 ON t1.setCode = t2.code  WHERE t2.name = 'Eighth Edition' AND t1.language = 'Chinese Simplified'; 
SELECT EXISTS (     SELECT 1     FROM sets s     JOIN cards c ON s.code = c.setCode     WHERE c.name = 'Angel of Mercy' AND s.mtgoCode IS NOT NULL ); 
SELECT s.releaseDate FROM sets s JOIN cards c ON s.code = c.setCode WHERE c.name = 'Ancestor''s Chosen'; 
SELECT s.type  FROM sets s  JOIN set_translations st ON s.code = st.setCode  WHERE st.translation = 'Hauptset Zehnte Edition'; 
SELECT COUNT(*) FROM set_translations WHERE setCode IN (SELECT code FROM sets WHERE block = 'Ice Age') AND language = 'Italian' AND translation IS NOT NULL; 
SELECT isForeignOnly FROM sets WHERE name = 'Adarkar Valkyrie'; 
SELECT COUNT(DISTINCT s.id) AS count FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Italian' AND s.baseSetSize < 100 AND st.translation IS NOT NULL; 
SELECT COUNT(*)  FROM cards  JOIN sets ON cards.setCode = sets.code  WHERE sets.name = 'Coldsnap' AND cards.borderColor = 'black'; 
SELECT c.name FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.name = 'Coldsnap' ORDER BY c.convertedManaCost DESC LIMIT 1; 
SELECT DISTINCT artist  FROM cards  WHERE (artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy')) AND (name = 'Coldsnap'); 
SELECT name FROM cards WHERE setCode = (SELECT code FROM sets WHERE name = 'Coldsnap') AND number = '4'; 
SELECT COUNT(*) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost > 5 AND (T1.power IS NULL OR T1.power = '*'); 
SELECT T1.flavorText FROM foreign_data AS T1 JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.language = 'Italian' AND T2.name = 'Ancestor''s Chosen'; 
SELECT DISTINCT language FROM foreign_data WHERE name = 'Ancestor''s Chosen' AND flavorText IS NOT NULL; 
SELECT T1.type FROM foreign_data AS T1 JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Ancestor''s Chosen' AND T1.language = 'German'; 
SELECT T2.text  FROM sets AS T1  JOIN foreign_data AS T2 ON T1.code = T2.set_code  WHERE T1.name = 'Coldsnap' AND T2.language = 'Italian'; 
SELECT T1.name FROM foreign_data AS T1 JOIN cards AS T2 ON T1.uuid = T2.uuid JOIN sets AS T3 ON T2.setCode = T3.code WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' ORDER BY T2.convertedManaCost DESC LIMIT 1; 
SELECT date FROM rulings WHERE uuid IN (SELECT uuid FROM cards WHERE name = 'Reminisce'); 
SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap'; 
SELECT CAST(SUM(CASE WHEN cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards WHERE setCode IN (SELECT code FROM sets WHERE name = 'Coldsnap'); 
SELECT code FROM sets WHERE releaseDate = '2017-07-14'; 
SELECT keyruneCode FROM sets WHERE code = 'PKHC'; 
SELECT mcmId FROM sets WHERE code = 'SS2'; 
SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09'; 
SELECT type FROM sets WHERE name = 'From the Vault: Lore'; 
SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized'; 
SELECT c.text AS ruling_text, c.hasContentWarning AS has_missing_or_degraded_properties_and_values FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.artist = 'Jim Pavelec'; 
SELECT T1.releaseDate FROM sets AS T1 JOIN cards AS T2 ON T1.code = T2.setCode WHERE T2.name = 'Evacuation'; 
SELECT s.baseSetSize FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.translation = 'Rinascita di Alara'; 
SELECT s.type FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.translation = 'Huitième édition'; 
SELECT st.setCode FROM set_translations st JOIN cards c ON st.setCode = c.setCode WHERE st.language = 'French' AND st.translation = 'Tendo Ice Bridge'; 
SELECT COUNT(*) FROM set_translations WHERE name = 'Tenth Edition';
SELECT T1.translation  FROM set_translations AS T1  JOIN cards AS T2 ON T1.setCode = T2.setCode  WHERE T1.language = 'Japanese' AND T2.name = 'Fellwar Stone'; 
SELECT name FROM cards WHERE setCode IN (SELECT code FROM sets WHERE name = 'Journey into Nyx Hero''s Path') ORDER BY convertedManaCost DESC LIMIT 1; 
SELECT s.releaseDate FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.translation = 'Ola de frío'; 
SELECT T1.type FROM sets AS T1 JOIN cards AS T2 ON T1.code = T2.setCode WHERE T2.name = 'Samite Pilgrim'; 
SELECT COUNT(*) FROM cards WHERE setCode IN (SELECT code FROM sets WHERE name = 'World Championship Decks 2004') AND convertedManaCost = 3; 
SELECT t1.translation  FROM set_translations AS t1  JOIN sets AS t2 ON t1.setCode = t2.code  WHERE t2.name = 'Mirrodin' AND t1.language = 'Chinese Simplified'; 
SELECT      (CAST(SUM(CASE WHEN t.isNonFoilOnly = 1 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN s.language = 'Japanese' THEN 1 ELSE 0 END)) * 100 AS percentage_non_foil_japanese FROM      set_translations s JOIN      sets t ON s.setCode = t.code WHERE      s.language = 'Japanese'; 
SELECT CAST(SUM(CASE WHEN T2.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(*) FROM set_translations AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.language = 'Portuguese (Brazil)'; 
SELECT availability FROM cards WHERE artist = 'Aleksi Briclot' AND isTextless = 1;
SELECT id FROM sets WHERE baseSetSize = (SELECT MAX(baseSetSize) FROM sets); 
SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedManaCost DESC LIMIT 1; 
SELECT frameEffects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT COUNT(*) FROM cards WHERE duelDeck = 'a' AND hasFoil = 0 AND (power IS NULL OR power = '*'); 
SELECT id FROM sets WHERE type = 'commander' ORDER BY totalSetSize DESC LIMIT 1; 
SELECT c.name, c.manaCost FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.format = 'duel' ORDER BY LENGTH(REPLACE(c.manaCost, '{', '')) DESC, c.manaCost DESC LIMIT 10; 
SELECT c.originalReleaseDate, l.format FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.rarity = 'mythic' ORDER BY c.originalReleaseDate ASC LIMIT 1; 
SELECT COUNT(*) FROM foreign_data AS fd JOIN cards AS c ON fd.uuid = c.uuid WHERE c.artist = 'Volkan Baǵa' AND fd.language = 'French'; 
SELECT COUNT(*) FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.name = 'Abundance' AND c.types = 'Enchantment' AND c.rarity = 'rare' AND l.status = 'Legal'; 
SELECT format, GROUP_CONCAT(name SEPARATOR ', ') AS banned_cards FROM (     SELECT format, name, status     FROM legalities     JOIN cards ON legalities.uuid = cards.uuid     WHERE status = 'Banned' ) AS banned_cards GROUP BY format ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT T1.language FROM set_translations AS T1 JOIN sets AS T2 ON T1.id = T2.id WHERE T2.name = 'Battlebond'; 
SELECT artist, GROUP_CONCAT(DISTINCT format SEPARATOR ', ') AS formats FROM cards JOIN legalities ON cards.uuid = legalities.uuid GROUP BY artist ORDER BY COUNT(*) ASC LIMIT 1; 
SELECT l.status FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.frameVersion = '1997' AND c.artist = 'D. Alexander Gregory' AND c.hasContentWarning = 1 AND l.format = 'legacy'; 
SELECT c.name, l.format FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.edhrecRank = 1 AND l.status = 'Banned'; 
SELECT      AVG(id) AS avg_sets_per_year,     language AS most_common_language FROM      sets s JOIN      set_translations st ON s.id = st.set_id WHERE      releaseDate BETWEEN '2012-01-01' AND '2015-12-31' GROUP BY      language ORDER BY      COUNT(language) DESC LIMIT 1; 
SELECT artist FROM cards WHERE BorderColor = 'black' AND availability = 'arena'; 
SELECT uuid FROM legalities WHERE format = 'oldschool' AND (status = 'banned' OR status = 'restricted'); 
SELECT COUNT(*) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper'; 
SELECT r.text FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.artist = 'Kev Walker' ORDER BY r.date DESC; 
SELECT c.name AS card_name, l.format AS format FROM cards c JOIN sets s ON c.setCode = s.code JOIN legalities l ON c.uuid = l.uuid WHERE s.name = 'Hour of Devastation' AND l.status = 'Legal'; 
SELECT s.name  FROM sets s  JOIN set_translations st ON s.code = st.setCode  WHERE st.language NOT LIKE '%Japanese%' AND EXISTS (SELECT 1 FROM set_translations WHERE setCode = s.code AND language = 'Korean'); 
SELECT DISTINCT c.frameVersion, l.status FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.artist = 'Allen Williams' AND l.status = 'Banned'; 
SELECT DisplayName, MAX(Reputation) AS HighestReputation FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') GROUP BY DisplayName; 
SELECT DisplayName FROM users WHERE YEAR(CreationDate) = 2011
SELECT COUNT(Id) FROM users WHERE LastAccessDate > '2014-09-01'; 
SELECT DisplayName FROM users ORDER BY Views DESC LIMIT 1; 
SELECT COUNT(*)  FROM users  WHERE Upvotes > 100 AND Downvotes > 1; 
SELECT COUNT(*) FROM users WHERE Views > 10 AND YEAR(CreationDate) > 2013; 
SELECT COUNT(*) FROM posts AS p JOIN users AS u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie'; 
SELECT p.Title  FROM posts p  JOIN users u ON p.OwnerUserId = u.Id  WHERE u.DisplayName = 'csgillespie'; 
SELECT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Title = 'Eliciting priors from experts'; 
SELECT p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie' ORDER BY p.ViewCount DESC LIMIT 1; 
SELECT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId ORDER BY p.FavoriteCount DESC LIMIT 1; 
SELECT SUM(p.CommentCount) AS TotalComments FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie'; 
SELECT MAX(p.AnswerCount) AS MostAnswers FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie'; 
SELECT u.DisplayName FROM users u JOIN posts p ON u.Id = p.LastEditorUserId WHERE p.Title = 'Examples for teaching: Correlation does not mean causation'; 
SELECT COUNT(*) FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie' AND p.ParentId IS NULL; 
SELECT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.ClosedDate IS NOT NULL; 
SELECT COUNT(p.Id) FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.Age > 65 AND p.Score >= 20; 
SELECT u.Location  FROM users u  JOIN posts p ON u.Id = p.OwnerUserId  WHERE p.Title = 'Eliciting priors from experts'; 
SELECT p.Body  FROM posts p  JOIN tags t ON p.Id = t.ExcerptPostId  WHERE t.TagName = 'bayesian'; 
SELECT p.Body FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.Count = (SELECT MAX(Count) FROM tags); 
SELECT COUNT(badges.Id)  FROM badges  JOIN users ON badges.UserId = users.Id  WHERE users.DisplayName = 'csgillespie'; 
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'csgillespie'; 
SELECT COUNT(*) FROM badges  JOIN users ON badges.UserId = users.Id  WHERE users.DisplayName = 'csgillespie' AND YEAR(badges.Date) = 2011; 
SELECT u.DisplayName FROM users u JOIN (     SELECT b.UserId, COUNT(b.Id) AS BadgeCount     FROM badges b     GROUP BY b.UserId     ORDER BY BadgeCount DESC     LIMIT 1 ) sub ON u.Id = sub.UserId; 
SELECT AVG(posts.Score)  FROM posts  JOIN users ON posts.OwnerUserId = users.Id  WHERE users.DisplayName = 'csgillespie'; 
SELECT AVG(COUNT(badges.Id)) / COUNT(DISTINCT users.DisplayName) AS AverageBadgesPerUserWithOver200Views FROM badges JOIN users ON badges.UserId = users.Id WHERE users.Views > 200; 
SELECT CAST(SUM(CASE WHEN u.Age > 65 THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(p.Id) AS ElderUserPercentage FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Score > 5; 
SELECT COUNT(*) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19'; 
SELECT CreationDate FROM votes GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1; 
SELECT COUNT(*) FROM badges WHERE Name = 'Revival'; 
SELECT p.Title FROM posts p JOIN (     SELECT PostId, MAX(Score) AS MaxScore     FROM comments     GROUP BY PostId ) c ON p.Id = c.PostId WHERE c.MaxScore = (SELECT MAX(Score) FROM comments); 
SELECT COUNT(comments.Id) AS CommentCount FROM comments JOIN posts ON comments.PostId = posts.Id WHERE posts.ViewCount = 1910; 
SELECT p.FavoriteCount FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.UserId = '3025' AND c.CreationDate = '2014-04-23 20:29:39.0'; 
SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.ParentId = 107829 AND p.CommentCount = 1; 
SELECT p.ClosedDate IS NOT NULL AS IsWellFinished FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.UserId = '23853' AND c.CreationDate = '2013-07-12 09:08:18.0'; 
SELECT u.Reputation FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Id = 65041; 
SELECT COUNT(*)  FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Tiago Pasqualini'; 
SELECT u.DisplayName FROM users u JOIN votes v ON u.Id = v.UserId WHERE v.Id = 6347; 
SELECT COUNT(votes.Id) AS NumberOfVotes FROM votes JOIN posts ON votes.PostId = posts.Id WHERE posts.Title LIKE '%data visualization%'; 
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'DatEpicCoderGuyWhoPrograms'; 
SELECT      COUNT(posts.Id) / COUNT(votes.Id) AS PostToVoteRatio FROM      posts LEFT JOIN      votes ON posts.OwnerUserId = votes.UserId AND posts.Id = votes.PostId WHERE      posts.OwnerUserId = 24; 
SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'; 
SELECT Text FROM comments WHERE Score = 17; 
SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com'
SELECT b.Name  FROM badges b  JOIN users u ON b.UserId = u.Id  WHERE u.DisplayName = 'SilentGhost'; 
SELECT u.DisplayName  FROM users u  JOIN comments c ON u.Id = c.UserId  WHERE c.Text LIKE '%thank you user93%'; 
SELECT c.Text  FROM comments c  JOIN users u ON c.UserId = u.Id  WHERE u.DisplayName = 'A Lion'; 
SELECT u.DisplayName, u.Reputation FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Title = 'Understanding what Dassault iSight is doing?'; 
SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'How does gentle boosting differ from AdaBoost?'; 
SELECT u.DisplayName FROM users AS u JOIN badges AS b ON u.Id = b.UserId WHERE b.Name = 'Necromancer' LIMIT 10; 
SELECT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Title = 'Open source tools for visualizing multi-dimensional data?'
SELECT p.Title  FROM posts p  JOIN users u ON p.OwnerUserId = u.Id  WHERE u.DisplayName = 'Vebjorn Ljosa'; 
SELECT SUM(p.Score), u.WebsiteUrl FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Yevgeny'; 
SELECT p.Comment FROM postHistory p JOIN posts pt ON p.PostId = pt.Id WHERE pt.Title = 'Why square the difference instead of taking the absolute value in standard deviation?' AND p.Comment LIKE '%edited%'; 
SELECT SUM(v.BountyAmount) AS TotalBountyAmount FROM votes v JOIN posts p ON v.PostId = p.Id WHERE p.Title LIKE '%data%'; 
SELECT u.DisplayName  FROM users u  JOIN votes v ON u.Id = v.UserId  JOIN posts p ON v.PostId = p.Id  WHERE v.BountyAmount = 50 AND p.Title LIKE '%variance%'; 
SELECT AVG(posts.ViewCount) AS AverageViewCount, posts.Title, comments.Text FROM posts JOIN comments ON posts.Id = comments.PostId WHERE posts.Tags LIKE '%<humor>%' GROUP BY posts.Title, comments.Text; 
SELECT COUNT(*) FROM comments WHERE UserId = 13; 
SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1; 
SELECT Id FROM users ORDER BY Views ASC LIMIT 1
SELECT COUNT(*) FROM badges WHERE Name = 'Supporter' AND strftime('%Y', Date) = '2011'; 
SELECT COUNT(UserId) FROM badges GROUP BY UserId HAVING COUNT(Name) > 5; 
SELECT COUNT(DISTINCT u.UserId) FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.Location = 'New York, NY'   AND b.Name IN ('Teacher', 'Supporter'); 
SELECT u.Reputation FROM users u JOIN comments c ON u.Id = c.UserId WHERE c.PostId = 1; 
SELECT u.UserId FROM users u JOIN (     SELECT ph.PostId, COUNT(ph.Id) AS HistoryCount     FROM postHistory ph     GROUP BY ph.PostId     HAVING COUNT(ph.Id) = 1 ) sub ON u.Id = sub.PostId JOIN posts p ON sub.PostId = p.Id WHERE p.ViewCount >= 1000; 
SELECT u.UserId, b.Name FROM users u JOIN (     SELECT UserId, COUNT(Id) AS CommentCount     FROM comments     GROUP BY UserId     ORDER BY CommentCount DESC     LIMIT 1 ) c ON u.Id = c.UserId LEFT JOIN badges b ON u.Id = b.UserId; 
SELECT COUNT(DISTINCT b.UserId) FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Location = 'India' AND b.Name = 'Teacher'; 
SELECT      ((SUM(CASE WHEN EXTRACT(YEAR FROM Date) = 2010 THEN 1 ELSE 0 END) / COUNT(*)) -       (SUM(CASE WHEN EXTRACT(YEAR FROM Date) = 2011 THEN 1 ELSE 0 END) / COUNT(*))) * 100 AS PercentageDifference; 
SELECT ph.PostHistoryTypeId, COUNT(DISTINCT c.UserId) AS UniqueCommenters FROM postHistory ph JOIN comments c ON ph.PostId = c.PostId WHERE ph.PostId = 3720; 
SELECT p.PostId, p.ViewCount FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE pl.RelatedPostId = 61217; 
SELECT p.Score, pl.LinkTypeId FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE p.Id = 395; 
SELECT p.PostId, u.UserId FROM posts p JOIN postHistory ph ON p.Id = ph.PostId WHERE p.Score > 60; 
SELECT SUM(FavoriteCount) FROM posts JOIN postHistory ON posts.Id = postHistory.PostId WHERE postHistory.UserId = 686 AND YEAR(postHistory.CreationDate) = 2011; 
SELECT AVG(users.UpVotes) AS AverageUpVotes, AVG(users.Age) AS AverageAge FROM users JOIN posts ON users.Id = posts.OwnerUserId GROUP BY users.Id HAVING COUNT(posts.OwnerUserId) > 10; 
SELECT COUNT(UserId) FROM badges WHERE Name = 'Announcer'; 
SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08.0'; 
SELECT COUNT(*) FROM comments WHERE score > 60; 
SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0'; 
SELECT COUNT(Id) FROM posts WHERE Score = 10; 
SELECT Name FROM badges WHERE UserId = (SELECT UserId FROM users ORDER BY Reputation DESC LIMIT 1); 
SELECT u.Reputation FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Date = '2010-07-19 19:39:08.0'; 
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Pierre'; 
SELECT b.Date  FROM badges b  JOIN users u ON b.UserId = u.Id  WHERE u.Location = 'Rochester, NY'; 
SELECT CAST(SUM(CASE WHEN Name = 'Teacher' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(UserId) AS Percentage FROM badges; 
SELECT      CAST(SUM(CASE WHEN u.Age BETWEEN 13 AND 18 THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(u.Id) AS PercentageOfTeenagers FROM      badges b JOIN      users u ON b.UserId = u.Id WHERE      b.Name = 'Organizer'; 
SELECT c.Score FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.CreationDate = '2010-07-19 19:19:56.0'; 
SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.CreationDate = '2010-07-19 19:37:33.0'; 
SELECT u.Age FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.Location = 'Vienna, Austria'; 
SELECT COUNT(b.UserId) FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Supporter' AND u.Age BETWEEN 19 AND 65; 
SELECT SUM(views) FROM users WHERE id IN (SELECT userid FROM badges WHERE date = '2010-07-19 19:39:08.0'); 
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MIN(Reputation) FROM users); 
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Sharpie'; 
SELECT COUNT(b.UserId) AS NumberOfEldersWithSupporterBadge FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Supporter' AND u.Age > 65; 
SELECT DisplayName FROM users WHERE Id = 30; 
SELECT COUNT(*) FROM users WHERE Location = 'New York, NY'; 
SELECT COUNT(*) FROM votes WHERE YEAR(CreationDate) = 2010; 
SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65; 
SELECT DisplayName FROM users WHERE Views = (SELECT MAX(Views) FROM users); 
SELECT CAST(SUM(CASE WHEN YEAR(CreationDate) = 2010 THEN 1 ELSE 0 END) AS FLOAT) / SUM(CASE WHEN YEAR(CreationDate) = 2011 THEN 1 ELSE 0 END) AS Ratio FROM votes; 
SELECT DISTINCT t.TagName FROM tags t JOIN posts p ON t.ExcerptPostId = p.Id JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'John Salvatier'; 
SELECT COUNT(*) FROM postHistory AS ph JOIN users AS u ON ph.UserId = u.Id WHERE u.DisplayName = 'Daniel Vassallo'; 
SELECT COUNT(votes.Id)  FROM votes  JOIN users ON votes.UserId = users.Id  WHERE users.DisplayName = 'Harlan'; 
SELECT p.Id FROM posts p JOIN users u ON p.UserId = u.Id WHERE u.DisplayName = 'slashnick' ORDER BY p.AnswerCount DESC LIMIT 1
SELECT p.PostId, p.ViewCount FROM posts p JOIN postHistory ph ON p.Id = ph.PostId JOIN users u ON ph.UserId = u.Id WHERE u.DisplayName IN ('Harvey Motulsky', 'Noah Snyder') GROUP BY p.PostId, p.ViewCount ORDER BY SUM(p.ViewCount) DESC LIMIT 1; 
SELECT COUNT(DISTINCT p.PostId) FROM posts p JOIN postHistory ph ON p.Id = ph.PostId JOIN users u ON ph.UserId = u.Id JOIN votes v ON p.Id = v.PostId WHERE u.DisplayName = 'Matt Parker' AND v.PostId > 4; 
SELECT COUNT(c.Id) AS NegativeCommentsCount FROM comments c JOIN posts p ON c.PostId = p.Id JOIN users u ON p.OwnerUserId = u.Id WHERE c.Score < 60 AND u.DisplayName = 'Neil McGuigan'; 
SELECT DISTINCT p.Tags FROM posts p JOIN postHistory ph ON p.Id = ph.PostId JOIN users u ON ph.UserId = u.Id WHERE u.DisplayName = 'Mark Meckes' AND p.CommentCount = 0; 
SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Organizer'; 
SELECT      CAST(SUM(CASE WHEN t.TagName = 'r' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(ph.PostId) AS percentage FROM      postHistory ph JOIN      users u ON ph.UserId = u.Id JOIN      tags t ON ph.PostId = t.ExcerptPostId WHERE      u.DisplayName = 'Community'; 
SELECT SUM(CASE WHEN p.OwnerDisplayName = 'Mornington' THEN p.ViewCount ELSE 0 END) - SUM(CASE WHEN p.OwnerDisplayName = 'Amos' THEN p.ViewCount ELSE 0 END) AS ViewCountDifference FROM posts p
SELECT COUNT(Id) FROM badges WHERE Name = 'Commentator' AND strftime('%Y', Date) = '2014'; 
SELECT COUNT(*) FROM postHistory WHERE CreationDate BETWEEN '2010-07-21 00:00:00' AND '2010-07-21 23:59:59'; 
SELECT DisplayName, Age FROM users ORDER BY Views DESC LIMIT 1; 
SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'; 
SELECT COUNT(*) FROM comments WHERE UserId = 13 AND Score < 60; 
SELECT p.Title, c.UserDisplayName FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.Score > 60; 
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE EXTRACT(YEAR FROM b.Date) = 2011 AND u.Location LIKE '%North Pole%'; 
SELECT u.DisplayName, u.WebsiteUrl FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.FavoriteCount > 150; 
SELECT ph.PostId, COUNT(ph.Id) AS HistoryCount, MAX(ph.LastEditDate) AS LastEditDate FROM postHistory ph JOIN posts p ON ph.PostId = p.Id WHERE p.Title = 'What is the best introductory Bayesian statistics textbook?' GROUP BY ph.PostId; 
SELECT u.LastAccessDate, u.Location FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Outliers'; 
SELECT p.Title FROM posts p JOIN postLinks pl ON p.Id = pl.RelatedPostId WHERE pl.PostId = (     SELECT Id     FROM posts     WHERE Title = 'How to tell if something happened in a data set which monitors a value over time' ); 
SELECT bh.PostId, b.Name  FROM postHistory bh  JOIN badges b ON bh.UserId = b.UserId  WHERE bh.UserDisplayName = 'Samuel' AND YEAR(bh.CreationDate) = 2013 AND YEAR(b.Date) = 2013; 
SELECT u.DisplayName FROM users AS u JOIN posts AS p ON u.Id = p.OwnerUserId ORDER BY p.ViewCount DESC LIMIT 1
SELECT u.DisplayName, u.Location  FROM users u  JOIN posts p ON u.Id = p.OwnerUserId  JOIN tags t ON p.ExcerptPostId = t.ExcerptPostId  WHERE t.TagName = 'hypothesis-testing'; 
SELECT p.Title, pl.LinkTypeId FROM posts p JOIN postLinks pl ON p.Id = pl.RelatedPostId WHERE p.Title = 'What are principal component scores?'; 
SELECT u.DisplayName FROM users AS u JOIN posts AS p ON u.Id = p.OwnerUserId WHERE p.ParentId IS NOT NULL AND p.Score = (SELECT MAX(Score) FROM posts WHERE ParentId IS NOT NULL)
SELECT u.DisplayName, u.WebsiteUrl FROM users u JOIN votes v ON u.Id = v.UserId WHERE v.VoteTypeId = 8 ORDER BY v.BountyAmount DESC LIMIT 1
SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5
SELECT COUNT(*) FROM tags WHERE Count BETWEEN 5000 AND 7000; 
SELECT OwnerUserId FROM posts ORDER BY FavoriteCount DESC LIMIT 1; 
SELECT Age FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users); 
SELECT COUNT(DISTINCT p.Id) FROM posts p JOIN votes v ON p.Id = v.PostId WHERE YEAR(v.CreationDate) = 2011 AND v.BountyAmount = 50; 
SELECT Id FROM users ORDER BY Age ASC LIMIT 1
SELECT SUM(Score) FROM posts WHERE LasActivityDate LIKE '2010-07-19%' 
SELECT AVG(CASE WHEN YEAR(p.CreationDate) = 2010 AND p.AnswerCount <= 2 THEN 1 ELSE 0 END) AS AvgMonthlyLinks FROM postLinks pl JOIN posts p ON pl.PostId = p.Id; 
SELECT p.Id FROM posts p JOIN votes v ON p.Id = v.PostId WHERE v.UserId = 1465 ORDER BY p.FavoriteCount DESC LIMIT 1; 
SELECT p.Title  FROM posts p  JOIN postLinks pl ON p.Id = pl.PostId  ORDER BY p.CreationDate ASC  LIMIT 1; 
SELECT u.DisplayName  FROM users u  JOIN badges b ON u.Id = b.UserId  GROUP BY u.DisplayName  ORDER BY COUNT(b.Name) DESC  LIMIT 1; 
SELECT MIN(CreationDate) FROM votes WHERE UserId IN (SELECT Id FROM users WHERE DisplayName = 'chl')
SELECT MIN(p.CreationDate) AS FirstPostDate FROM posts p JOIN users u ON p.OwnerUserId = u.Id ORDER BY u.Age ASC LIMIT 1
SELECT u.DisplayName  FROM users u  JOIN badges b ON u.Id = b.UserId  WHERE b.Name = 'Autobiographer'  ORDER BY b.Date ASC  LIMIT 1; 
SELECT COUNT(DISTINCT u.Id) AS UserCount FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE u.Location = 'United Kingdom' AND p.FavoriteCount >= 4; 
SELECT AVG(T1.PostId) FROM votes AS T1 JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Age = (SELECT MAX(Age) FROM users); 
SELECT DisplayName FROM users ORDER BY Reputation DESC LIMIT 1
SELECT COUNT(*) FROM users WHERE Reputation > 2000 AND Views > 1000; 
SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65;
SELECT COUNT(*)  FROM posts p  JOIN users u ON p.OwnerUserId = u.Id  WHERE u.DisplayName = 'Jay Stevens' AND YEAR(p.CreationDate) = 2010; 
SELECT p.Id, p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Harvey Motulsky' ORDER BY p.ViewCount DESC LIMIT 1
SELECT p.Id, p.Title  FROM posts p  WHERE p.Score = (SELECT MAX(Score) FROM posts); 
SELECT AVG(posts.Score) FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Stephen Turner'
SELECT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.ViewCount > 20000 AND YEAR(p.CreationDate) = 2011; 
SELECT p.Id, u.DisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE YEAR(u.CreationDate) = 2010 ORDER BY p.FavoriteCount DESC LIMIT 1; 
SELECT CAST(SUM(CASE WHEN u.Reputation > 1000 THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(p.Id) AS Percentage FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE YEAR(p.CreationDate) = 2011; 
SELECT CAST(COUNT(CASE WHEN Age BETWEEN 13 AND 18 THEN Id ELSE NULL END) AS FLOAT) * 100 / COUNT(Id) AS percentage FROM users; 
SELECT SUM(posts.ViewCount), users.DisplayName FROM postHistory JOIN posts ON postHistory.PostId = posts.Id JOIN users ON posts.LastEditorUserId = users.Id WHERE postHistory.Text = 'Computer Game Datasets' GROUP BY users.DisplayName; 
SELECT COUNT(*) FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts); 
SELECT COUNT(*) AS CommentCount FROM comments WHERE PostId = (SELECT Id FROM posts ORDER BY Score DESC LIMIT 1); 
SELECT COUNT(Id) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0; 
SELECT u.DisplayName, u.Location  FROM users u  JOIN posts p ON u.Id = p.OwnerUserId  WHERE p.Id = 183  ORDER BY p.LastEditDate DESC  LIMIT 1; 
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Emmett' ORDER BY b.Date DESC LIMIT 1; 
SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000; 
SELECT DATEDIFF(b.Date, u.CreationDate) AS TimeToGetBadge FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Zolomon'; 
SELECT      p.PostId AS NumberOfPosts,     c.CommentId AS NumberOfComments FROM      users u JOIN      posts p ON u.Id = p.OwnerUserId JOIN      comments c ON p.Id = c.PostId WHERE      u.CreationDate = (SELECT MAX(CreationDate) FROM users); 
SELECT c.Text, u.DisplayName FROM comments c JOIN posts p ON c.PostId = p.Id JOIN users u ON c.UserId = u.Id WHERE p.Title = 'Analysing wind data with R' ORDER BY c.CreationDate DESC LIMIT 10; 
SELECT COUNT(*) FROM badges WHERE Name = 'Citizen Patrol'; 
SELECT COUNT(*) FROM tags WHERE TagName = 'careers'; 
SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'; 
SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'; 
SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'; 
SELECT COUNT(*) FROM votes WHERE BountyAmount >= 30; 
SELECT CAST(SUM(CASE WHEN p.Score > 50 THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(p.Id) AS Percentage FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.Reputation = (SELECT MAX(Reputation) FROM users); 
SELECT COUNT(*) FROM posts WHERE Score < 20; 
SELECT COUNT(*) FROM tags WHERE Id < 15 AND Count <= 20; 
SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'; 
SELECT u.Reputation, u.UpVotes FROM users u JOIN comments c ON u.Id = c.UserId WHERE c.Text = 'fine, you win :)'; 
SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title LIKE '%linear regression%'; 
SELECT c.Text, c.Score FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.ViewCount BETWEEN 100 AND 150 ORDER BY c.Score DESC LIMIT 1; 
SELECT u.CreationDate, u.Age FROM users u JOIN comments c ON u.Id = c.UserId WHERE c.CommentText LIKE '%http://%'; 
SELECT COUNT(DISTINCT p.PostId) AS LowViewPostCount FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.Score = 0 AND p.ViewCount < 5; 
SELECT COUNT(*)  FROM comments  JOIN posts ON comments.PostId = posts.Id  WHERE posts.CommentCount = 1 AND comments.Score = 0; 
SELECT COUNT(DISTINCT u.Id) AS TotalUsers FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Score = 0 AND u.Age = 40; 
SELECT p.Id AS PostId, c.Text AS CommentText FROM posts p JOIN comments c ON p.Id = c.PostId WHERE p.Title = 'Group differences on a five point Likert item'; 
SELECT u.UpVotes FROM users u JOIN comments c ON u.Id = c.UserId WHERE c.Text = 'R is also lazy evaluated.'; 
SELECT c.Text  FROM comments c  JOIN users u ON c.UserId = u.Id  WHERE u.DisplayName = 'Harvey Motulsky'; 
SELECT u.DisplayName FROM users u JOIN comments c ON u.Id = c.UserId WHERE c.Score BETWEEN 1 AND 5 AND u.DownVotes = 0; 
SELECT CAST(SUM(CASE WHEN u.UpVotes = 0 THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(c.UserId) AS Percentage FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Score BETWEEN 5 AND 10; 
SELECT sp.power_name FROM superpower AS sp JOIN hero_power AS hp ON sp.id = hp.power_id JOIN superhero AS sh ON hp.hero_id = sh.id WHERE sh.superhero_name = '3-D Man'; 
SELECT COUNT(DISTINCT hp.hero_id) AS superhero_count FROM hero_power hp JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Super Strength'; 
SELECT COUNT(*)  FROM superhero  JOIN hero_power ON superhero.id = hero_power.hero_id  JOIN superpower ON hero_power.power_id = superpower.id  WHERE superpower.power_name = 'Super Strength' AND superhero.height_cm > 200; 
SELECT s.full_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id GROUP BY s.full_name HAVING COUNT(hp.power_id) > 15; 
SELECT COUNT(*) FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue'); 
SELECT c.colour FROM colour c JOIN superhero s ON c.id = s.skin_colour_id WHERE s.superhero_name = 'Apocalypse'; 
SELECT COUNT(DISTINCT s.id) AS agility_superheroes_with_blue_eyes FROM superhero s JOIN colour c ON s.eye_colour_id = c.id JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE c.colour = 'Blue' AND sp.power_name = 'Agility'; 
SELECT s.superhero_name FROM superhero s JOIN colour c ON s.eye_colour_id = c.id AND c.colour = 'Blue' JOIN colour h ON s.hair_colour_id = h.id AND h.colour = 'Blond'; 
SELECT COUNT(*)  FROM superhero AS s  JOIN publisher AS p ON s.publisher_id = p.id  WHERE p.publisher_name = 'Marvel Comics'; 
SELECT s.superhero_name, s.height_cm FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics' ORDER BY s.height_cm DESC; 
SELECT p.publisher_name  FROM publisher p  JOIN superhero s ON p.id = s.publisher_id  WHERE s.superhero_name = 'Sauron'; 
SELECT c.colour, COUNT(s.superhero_id) AS count FROM colour c JOIN superhero s ON c.id = s.eye_colour_id JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics' GROUP BY c.colour ORDER BY count DESC;
SELECT AVG(superhero.height_cm) AS average_height FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'; 
SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower p ON hp.power_id = p.id JOIN publisher pu ON s.publisher_id = pu.id WHERE pu.publisher_name = 'Marvel Comics' AND p.power_name = 'Super Strength'; 
SELECT COUNT(*) FROM superhero AS s JOIN publisher AS p ON s.publisher_id = p.id WHERE p.publisher_name = 'DC Comics'; 
SELECT p.publisher_name FROM publisher AS p JOIN superhero AS s ON p.id = s.publisher_id JOIN hero_attribute AS ha ON s.id = ha.hero_id JOIN attribute AS a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Speed' ORDER BY ha.attribute_value ASC LIMIT 1
SELECT COUNT(*)  FROM superhero  JOIN colour ON superhero.eye_colour_id = colour.id  JOIN publisher ON superhero.publisher_id = publisher.id  WHERE colour.colour = 'Gold' AND publisher.publisher_name = 'Marvel Comics'; 
SELECT p.publisher_name FROM publisher p JOIN superhero s ON p.id = s.publisher_id WHERE s.superhero_name = 'Blue Beetle II'; 
SELECT COUNT(*) FROM superhero WHERE hair_colour_id IN (SELECT id FROM colour WHERE colour = 'Blond'); 
SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Intelligence' ORDER BY ha.attribute_value ASC LIMIT 1; 
SELECT r.race FROM race AS r JOIN superhero AS s ON r.id = s.race_id WHERE s.superhero_name = 'Copycat'; 
SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Durability' AND ha.attribute_value < 50; 
SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Death Touch'; 
SELECT COUNT(*) FROM superhero AS s JOIN hero_attribute AS ha ON s.id = ha.hero_id JOIN attribute AS a ON ha.attribute_id = a.id JOIN gender AS g ON s.gender_id = g.id WHERE g.gender = 'Female' AND a.attribute_name = 'Strength' AND ha.attribute_value = 100; 
SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id GROUP BY s.superhero_name ORDER BY COUNT(s.superhero_name) DESC LIMIT 1
SELECT COUNT(*) FROM superhero WHERE race_id IN (SELECT id FROM race WHERE race = 'Vampire'); 
SELECT      ROUND((SUM(CASE WHEN T1.alignment = 'Bad' THEN 1 ELSE 0 END) / COUNT(*)) * 100, 2) AS percentage,     SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' AND T1.alignment = 'Bad' THEN 1 ELSE 0 END) AS marvel_bad_superheroes FROM      alignment AS T1 JOIN      superhero AS T2 ON T1.id = T2.alignment_id JOIN      publisher AS T3 ON T2.publisher_id = T3.id; 
SELECT      (SELECT COUNT(*) FROM superhero WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')) -      (SELECT COUNT(*) FROM superhero WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'DC Comics')) AS difference; 
SELECT id FROM publisher WHERE publisher_name = 'Star Trek'; 
SELECT AVG(attribute_value) AS average_attribute_value FROM hero_attribute; 
SELECT COUNT(*) FROM superhero WHERE full_name IS NULL; 
SELECT T2.colour FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.id = 75
SELECT sp.power_name FROM superpower AS sp JOIN hero_power AS hp ON sp.id = hp.power_id JOIN superhero AS sh ON hp.hero_id = sh.id WHERE sh.superhero_name = 'Deathlok'; 
SELECT AVG(weight_kg) AS average_weight FROM superhero WHERE gender_id = (SELECT id FROM gender WHERE gender = 'Female'); 
SELECT sp.power_name FROM superpower AS sp JOIN hero_power AS hp ON sp.id = hp.power_id JOIN superhero AS s ON hp.hero_id = s.id JOIN gender AS g ON s.gender_id = g.id WHERE g.gender = 'Male' LIMIT 5; 
SELECT superhero_name FROM superhero WHERE race_id IN (SELECT id FROM race WHERE race = 'Alien'); 
SELECT s.superhero_name FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE s.height_cm BETWEEN 170 AND 190 AND c.colour = 'No Colour'; 
SELECT sp.power_name FROM superpower AS sp JOIN hero_power AS hp ON sp.id = hp.power_id WHERE hp.hero_id = 56; 
SELECT s.full_name FROM superhero AS s JOIN race AS r ON s.race_id = r.id WHERE r.race = 'Demi-God' LIMIT 5; 
SELECT COUNT(*) FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad'); 
SELECT r.race FROM race AS r JOIN superhero AS s ON r.id = s.race_id WHERE s.weight_kg = 169; 
SELECT c.colour FROM superhero s JOIN colour c ON s.hair_colour_id = c.id JOIN race r ON s.race_id = r.id WHERE s.height_cm = 185 AND r.race = 'human'; 
SELECT T1.colour FROM colour AS T1 JOIN superhero AS T2 ON T1.id = T2.eye_colour_id ORDER BY T2.weight_kg DESC LIMIT 1
SELECT CAST(SUM(CASE WHEN p.publisher_id = 13 THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(*) FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE s.height_cm BETWEEN 150 AND 180; 
SELECT superhero_name FROM superhero WHERE gender_id = (SELECT id FROM gender WHERE gender = 'Male') AND weight_kg > (SELECT AVG(weight_kg) * 0.79 FROM superhero); 
SELECT T2.power_name FROM hero_power AS T1 JOIN superpower AS T2 ON T1.power_id = T2.id GROUP BY T2.power_name ORDER BY COUNT(T2.power_name) DESC LIMIT 1
SELECT ha.attribute_value FROM hero_attribute ha JOIN superhero s ON ha.hero_id = s.id WHERE s.superhero_name = 'Abomination'; 
SELECT sp.power_name FROM superpower sp JOIN hero_power hp ON sp.id = hp.power_id WHERE hp.hero_id = 1; 
SELECT COUNT(*) FROM hero_power AS hp JOIN superpower AS sp ON hp.power_id = sp.id WHERE sp.power_name = 'Stealth'; 
SELECT s.full_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Strength' ORDER BY ha.attribute_value DESC LIMIT 1; 
SELECT CAST(SUM(CASE WHEN superhero.skin_colour_id IS NULL THEN 1 ELSE 0 END) AS FLOAT) / COUNT(superhero.id) FROM superhero LEFT JOIN colour ON superhero.skin_colour_id = colour.id WHERE colour.id = 1
SELECT COUNT(*)  FROM superhero AS s  JOIN publisher AS p ON s.publisher_id = p.id  WHERE p.publisher_name = 'Dark Horse Comics'; 
SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id JOIN publisher p ON s.publisher_id = p.id WHERE a.attribute_name = 'Durability' AND p.publisher_name = 'Dark Horse Comics' ORDER BY ha.attribute_value DESC LIMIT 1; 
SELECT c.colour FROM colour c JOIN superhero s ON c.id = s.eye_colour_id WHERE s.full_name = 'Abraham Sapien'; 
SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower p ON hp.power_id = p.id WHERE p.power_name = 'Flight'; 
SELECT      c_eye.colour AS eye_colour,     c_hair.colour AS hair_colour,     c_skin.colour AS skin_colour FROM      superhero s JOIN      gender g ON s.gender_id = g.id JOIN      publisher p ON s.publisher_id = p.id JOIN      colour c_eye ON s.eye_colour_id = c_eye.id JOIN      colour c_hair ON s.hair_colour_id = c_hair.id JOIN      colour c_skin ON s.skin_colour_id = c_skin.id WHERE      g.gender = 'Female' AND p.publisher_name = 'Dark Horse Comics'; 
SELECT s.superhero_name, p.publisher_name FROM superhero AS s JOIN publisher AS p ON s.publisher_id = p.id WHERE s.hair_colour_id = s.skin_colour_id AND s.hair_colour_id = s.eye_colour_id
SELECT r.race FROM race AS r JOIN superhero AS s ON r.id = s.race_id WHERE s.superhero_name = 'A-Bomb'; 
SELECT      (SUM(CASE WHEN c.colour = 'Blue' THEN 1 ELSE 0 END) / COUNT(s.gender_id)) * 100 AS percentage FROM      superhero s JOIN      gender g ON s.gender_id = g.id JOIN      colour c ON s.skin_colour_id = c.id WHERE      g.gender = 'Female'; 
SELECT s.superhero_name, r.race FROM superhero AS s JOIN race AS r ON s.race_id = r.id WHERE s.full_name = 'Charles Chandler'; 
SELECT g.gender  FROM gender g  JOIN superhero s ON g.id = s.gender_id  WHERE s.superhero_name = 'Agent 13'; 
SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Adaptation'; 
SELECT COUNT(power_id) AS number_of_powers FROM hero_power JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero_name = 'Amazo'; 
SELECT sp.power_name FROM superhero AS sh JOIN hero_power AS hp ON sh.id = hp.hero_id JOIN superpower AS sp ON hp.power_id = sp.id WHERE sh.full_name = 'Hunter Zolomon'; 
SELECT height_cm FROM superhero AS s JOIN colour AS c ON s.eye_colour_id = c.id WHERE c.colour = 'Amber'; 
SELECT s.superhero_name FROM superhero s JOIN colour c ON s.eye_colour_id = c.id AND s.hair_colour_id = c.id WHERE c.colour = 'Black'; 
SELECT T2.colour FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.skin_colour_id = (SELECT id FROM colour WHERE colour = 'Gold')
SELECT T2.full_name FROM race AS T1 JOIN superhero AS T2 ON T1.id = T2.race_id WHERE T1.race = 'Vampire'
SELECT superhero_name FROM superhero WHERE alignment_id IN ( SELECT id FROM alignment WHERE alignment = 'Neutral' )
SELECT COUNT(DISTINCT h.hero_id) AS hero_count FROM hero_attribute ha JOIN hero h ON ha.hero_id = h.id JOIN attribute a ON ha.attribute_id = a.id WHERE ha.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength')); 
SELECT r.race, a.alignment FROM superhero s JOIN race r ON s.race_id = r.id JOIN alignment a ON s.alignment_id = a.id WHERE s.superhero_name = 'Cameron Hicks'; 
SELECT      ROUND(         (CAST(SUM(CASE WHEN g.gender = 'Female' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(s.publisher_id)) * 100,          2     ) AS percentage_female_heroes_published_by_marvel FROM      superhero s JOIN      gender g ON s.gender_id = g.id JOIN      publisher p ON s.publisher_id = p.id WHERE      p.publisher_name = 'Marvel Comics'; 
SELECT AVG(superhero.weight_kg) AS average_weight FROM superhero JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien'; 
SELECT (SUM(CASE WHEN full_name = 'Emil Blonsky' THEN weight_kg ELSE 0 END) - SUM(CASE WHEN full_name = 'Charles Chandler' THEN weight_kg ELSE 0 END)) AS weight_difference FROM superhero
SELECT AVG(height_cm) AS average_height FROM superhero WHERE height_cm > 0; 
SELECT sp.power_name FROM superhero AS sh JOIN hero_power AS hp ON sh.id = hp.hero_id JOIN superpower AS sp ON hp.power_id = sp.id WHERE sh.superhero_name = 'Abomination'; 
SELECT COUNT(*) FROM superhero WHERE race_id = 21 AND gender_id = 1; 
SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Speed' ORDER BY ha.attribute_value DESC LIMIT 1; 
SELECT COUNT(*) FROM superhero WHERE alignment_id = 3; 
SELECT a.attribute_name, ha.attribute_value FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE s.superhero_name = '3-D Man'; 
SELECT s.superhero_name  FROM superhero s  JOIN colour c ON s.eye_colour_id = c.id AND c.colour = 'Blue'  JOIN colour h ON s.hair_colour_id = h.id AND h.colour = 'Brown'; 
SELECT p.publisher_name FROM publisher p JOIN superhero s ON p.id = s.publisher_id WHERE s.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy'); 
SELECT COUNT(*) FROM superhero WHERE publisher_id = 1; 
SELECT (COUNT(CASE WHEN c.colour = 'Blue' THEN 1 ELSE NULL END) * 100.0 / COUNT(s.id)) AS percentage_blue_eyes FROM superhero s JOIN colour c ON s.eye_colour_id = c.id 
SELECT CAST(SUM(CASE WHEN T1.gender = 'Male' THEN 1 ELSE 0 END) AS FLOAT) / SUM(CASE WHEN T1.gender = 'Female' THEN 1 ELSE 0 END) AS ratio FROM gender AS T1 JOIN superhero AS T2 ON T1.id = T2.gender_id; 
SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero); 
SELECT id FROM superpower WHERE power_name = 'Cryokinesis'; 
SELECT superhero_name FROM superhero WHERE id = 294; 
SELECT full_name FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL; 
SELECT c.colour FROM colour AS c JOIN superhero AS s ON c.id = s.eye_colour_id WHERE s.full_name = 'Karen Beecher-Duncan'; 
SELECT sp.power_name FROM superhero AS sh JOIN hero_power AS hp ON sh.id = hp.hero_id JOIN superpower AS sp ON hp.power_id = sp.id WHERE sh.full_name = 'Helen Parr'; 
SELECT r.race FROM race AS r JOIN superhero AS s ON r.id = s.race_id WHERE s.weight_kg = 108 AND s.height_cm = 188; 
SELECT p.publisher_name FROM publisher p JOIN superhero s ON p.id = s.publisher_id WHERE s.id = 38; 
SELECT r.race FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN race r ON s.race_id = r.id WHERE ha.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute); 
SELECT s.alignment, sp.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.superhero_name = 'Atom IV'; 
SELECT s.superhero_name  FROM superhero s  JOIN colour c ON s.eye_colour_id = c.id  WHERE c.colour = 'Blue'  LIMIT 5; 
SELECT AVG(hero_attribute.attribute_value) AS average_attribute_value FROM hero_attribute JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.alignment_id = 3; 
SELECT c.colour FROM superhero s JOIN colour c ON s.skin_colour_id = c.id JOIN hero_attribute ha ON s.id = ha.hero_id WHERE ha.attribute_value = 100; 
SELECT COUNT(*) FROM superhero WHERE alignment_id = 1 AND gender_id = 2; 
SELECT T2.superhero_name FROM hero_attribute AS T1 JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T1.attribute_value BETWEEN 75 AND 80
SELECT r.race FROM race AS r JOIN superhero AS s ON r.id = s.race_id JOIN colour AS c ON s.hair_colour_id = c.id JOIN gender AS g ON s.gender_id = g.id WHERE c.colour = 'Blue' AND g.gender = 'Male'; 
SELECT (SUM(CASE WHEN T2.gender_id = 2 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage FROM superhero AS T1 JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.alignment_id = 2; 
SELECT (SUM(CASE WHEN T1.eye_colour_id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.eye_colour_id = 1 THEN 1 ELSE 0 END)) AS difference FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg IS NULL OR T1.weight_kg = 0; 
SELECT ha.attribute_value FROM hero_attribute ha JOIN attribute a ON ha.attribute_id = a.id JOIN superhero s ON ha.hero_id = s.id WHERE s.superhero_name = 'Hulk' AND a.attribute_name = 'Strength'; 
SELECT sp.power_name FROM superhero AS s JOIN hero_power AS hp ON s.id = hp.hero_id JOIN superpower AS sp ON hp.power_id = sp.id WHERE s.superhero_name = 'Ajax'; 
SELECT COUNT(*) FROM superhero AS s JOIN colour AS c ON s.skin_colour_id = c.id JOIN alignment AS a ON s.alignment_id = a.id WHERE c.colour = 'Green' AND a.alignment = 'Bad';
SELECT COUNT(*)  FROM superhero  JOIN gender ON superhero.gender_id = gender.id  JOIN publisher ON superhero.publisher_id = publisher.id  WHERE gender.gender = 'Female' AND publisher.publisher_name = 'Marvel Comics'; 
SELECT T2.superhero_name FROM hero_power AS T1 JOIN superhero AS T2 ON T1.hero_id = T2.id JOIN superpower AS T3 ON T1.power_id = T3.id WHERE T3.power_name = 'Wind Control' ORDER BY T2.superhero_name ASC
SELECT g.gender FROM gender g JOIN superhero s ON g.id = s.gender_id JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Phoenix Force'; 
SELECT s.superhero_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'DC Comics' ORDER BY s.weight_kg DESC LIMIT 1; 
SELECT AVG(T1.height_cm) FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id JOIN race AS T3 ON T1.race_id = T3.id WHERE T3.race != 'Human' AND T2.publisher_name = 'Dark Horse Comics'
SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Speed' AND ha.attribute_value = 100; 
SELECT      (SUM(CASE WHEN p.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) -       SUM(CASE WHEN p.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END)) AS difference FROM      publisher p JOIN      superhero s ON p.id = s.publisher_id; 
SELECT a.attribute_name FROM attribute a JOIN hero_attribute ha ON a.id = ha.attribute_id JOIN superhero s ON ha.hero_id = s.id WHERE s.superhero_name = 'Black Panther' ORDER BY ha.attribute_value ASC LIMIT 1; 
SELECT c.colour FROM colour c JOIN superhero s ON c.id = s.eye_colour_id WHERE s.superhero_name = 'Abomination'; 
SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1; 
SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'; 
SELECT      (SUM(CASE WHEN g.gender = 'Female' THEN 1 ELSE 0 END) / COUNT(s.id)) * 100.0 AS percentage_female_superheroes FROM      superhero s JOIN      publisher p ON s.publisher_id = p.id JOIN      gender g ON s.gender_id = g.id WHERE      p.publisher_name = 'George Lucas'; 
SELECT CAST(SUM(CASE WHEN T1.alignment = 'Good' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM alignment AS T1 JOIN superhero AS T2 ON T1.id = T2.alignment_id JOIN publisher AS T3 ON T2.publisher_id = T3.id WHERE T3.publisher_name = 'Marvel Comics' 
SELECT COUNT(*) FROM superhero WHERE full_name LIKE 'John%'; 
SELECT hero_id FROM hero_attribute ORDER BY attribute_value ASC LIMIT 1; 
SELECT full_name FROM superhero WHERE superhero_name = 'Alien'; 
SELECT s.full_name FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE s.weight_kg < 100 AND c.colour = 'Brown'; 
SELECT ha.attribute_value FROM hero_attribute ha JOIN superhero s ON ha.hero_id = s.id WHERE s.superhero_name = 'Aquababy'; 
SELECT s.weight_kg, r.race FROM superhero s JOIN race r ON s.race_id = r.id WHERE s.id = 40; 
SELECT AVG(height_cm) AS average_height FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral'; 
SELECT h.hero_id FROM hero_power hp JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Intelligence'
SELECT T1.colour FROM colour AS T1 JOIN superhero AS T2 ON T1.id = T2.eye_colour_id WHERE T2.superhero_name = 'Blackwulf'
SELECT sp.power_name FROM superpower AS sp JOIN hero_power AS hp ON sp.id = hp.power_id JOIN superhero AS s ON hp.hero_id = s.id WHERE s.height_cm > (SELECT AVG(height_cm) * 0.8 FROM superhero); 
SELECT T1.driverRef FROM drivers AS T1 JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 20 ORDER BY T2.q1 DESC LIMIT 5
SELECT T2.surname FROM qualifying AS T1 JOIN drivers AS T2 ON T1.driverid = T2.driverid WHERE T1.q2 IS NOT NULL AND T1.raceid = 19 ORDER BY T1.q2 ASC LIMIT 1
SELECT DISTINCT r.year FROM races r JOIN circuits c ON r.circuitid = c.circuitid WHERE c.location = 'Shanghai'; 
SELECT T1.url FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.name = "Circuit de Barcelona-Catalunya"
SELECT r.name FROM races r JOIN circuits c ON r.circuitid = c.circuitid WHERE c.country = 'Germany'; 
SELECT c.position FROM constructorStandings AS c JOIN constructors AS co ON c.constructorId = co.constructorId WHERE co.name = 'Renault'; 
SELECT COUNT(*) FROM races r JOIN circuits c ON r.circuitid = c.circuitid WHERE r.year = 2010 AND c.country NOT IN ('Asia', 'Europe') AND r.round = 1; 
SELECT r.name FROM races r JOIN circuits c ON r.circuitid = c.circuitid WHERE c.country = 'Spain'; 
SELECT T1.lat, T1.lng FROM circuits AS T1 JOIN races AS T2 ON T1.circuitid = T2.circuitid WHERE T2.name = 'Australian Grand Prix'
SELECT T1.url FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.name = "Sepang International Circuit"
SELECT T1.time FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.name = 'Sepang International Circuit'
SELECT c.lat, c.lng FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.name = 'Abu Dhabi Grand Prix'; 
SELECT c.nationality FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId WHERE cr.points = 1 AND cr.raceId = 24; 
SELECT T2.q1 FROM drivers AS T1 JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Bruno' AND T1.surname = 'Senna' AND T2.raceId = 354
SELECT d.nationality FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.raceId = 355 AND q.q2 = '0:01:40'; 
SELECT T2.number FROM qualifying AS T1 JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.q3 LIKE '0:01:54%' AND T1.raceId = 903; 
SELECT COUNT(*) FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.name = 'Bahrain Grand Prix' AND ra.year = 2007 AND r.time IS NULL; 
SELECT T1.url FROM seasons AS T1 JOIN races AS T2 ON T1.year = T2.year WHERE T2.raceId = 901; 
SELECT COUNT(DISTINCT driverId) AS driver_count FROM results JOIN races ON results.raceId = races.raceId WHERE races.date = '2015-11-29'; 
SELECT d.driverId, d.forename, d.surname, d.dob FROM drivers d JOIN results r ON d.driverId = r.driverId AND r.raceId = 592 WHERE r.time IS NOT NULL ORDER BY d.dob ASC LIMIT 1; 
SELECT d.url FROM drivers d JOIN lapTimes l ON d.driverId = l.driverId WHERE l.lapTime LIKE '0:01:27%' AND l.raceId = 161; 
SELECT d.nationality FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.raceId = 933 AND r.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 933); 
SELECT c.lat, c.lng FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.name = 'Malaysian Grand Prix'; 
SELECT url FROM constructors WHERE constructorId = (SELECT constructorId FROM constructorResults WHERE raceId = 9 ORDER BY points DESC LIMIT 1); 
SELECT q1 FROM qualifying WHERE raceId = 345 AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Lucas' AND surname = 'Di Grassi'); 
SELECT d.nationality FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.q2 = '0:01:15' AND q.raceId = 347; 
SELECT d.code FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.raceId = 45 AND q.q3 LIKE '0:01:33'; 
SELECT      CASE          WHEN r.time LIKE '%:%' THEN r.time          ELSE CONCAT((SELECT t.time FROM results t WHERE t.driverId = d.driverId AND t.raceId = 743 ORDER BY ABS(TIME_TO_SEC(t.time) - TIME_TO_SEC(r.time)) LIMIT 1), '.', SUBSTRING(r.time, INSTR(r.time, '.') + 1))     END AS actual_finish_time FROM      drivers d JOIN      results r ON d.driverId = r.driverId WHERE      d.forename = 'Bruce' AND d.surname = 'McLaren' AND r.raceId = 743; 
SELECT d.forename, d.surname FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.name = 'San Marino Grand Prix' AND ra.year = 2006 AND r.position = 2; 
SELECT T1.url FROM seasons AS T1 JOIN races AS T2 ON T1.year = T2.year WHERE T2.raceId = 901
SELECT COUNT(*) FROM results WHERE raceId = (SELECT raceId FROM races WHERE date = '2015-11-29') AND time IS NULL; 
SELECT d.driverId, d.forename, d.surname, d.dob FROM drivers d JOIN results r ON d.driverId = r.driverId AND r.raceId = 872 WHERE r.time IS NOT NULL ORDER BY d.dob DESC LIMIT 1; 
SELECT d.forename, d.surname FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE lt.raceId = 348 ORDER BY lt.time ASC LIMIT 1; 
SELECT d.nationality FROM drivers d JOIN results r ON d.driverId = r.driverId ORDER BY CAST(REPLACE(r.fastestLapSpeed, ',', '') AS FLOAT) DESC LIMIT 1; 
SELECT ((CAST((SELECT fastestLapSpeed FROM results WHERE raceId = 853 AND driverId IN (SELECT driverId FROM drivers WHERE forename = 'Paul' AND surname = 'di Resta')) AS FLOAT) - CAST((SELECT fastestLapSpeed FROM results WHERE raceId = 854 AND driverId IN (SELECT driverId FROM drivers WHERE forename = 'Paul' AND surname = 'di Resta')) AS FLOAT))) / CAST((SELECT fastestLapSpeed FROM results WHERE raceId = 853 AND driverId IN (SELECT driverId FROM drivers WHERE forename = 'Paul' AND surname = 'di Resta')) AS FLOAT)) * 100 AS percentage_faster; 
SELECT CAST(SUM(CASE WHEN T1.time IS NOT NULL THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(T1.driverId) AS percentage FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.date = '1983-07-16'; 
SELECT MIN(year) AS first_singapore_grand_prix_year FROM races WHERE name = 'Singapore Grand Prix'; 
SELECT COUNT(*) AS total_races, name FROM races WHERE year = 2005 ORDER BY name DESC; 
SELECT name FROM races WHERE YEAR(date) = (SELECT MIN(YEAR(date)) FROM races) AND MONTH(date) = (SELECT MIN(MONTH(date)) FROM races); 
SELECT name, date FROM races WHERE year = 1999 AND round = (SELECT MAX(round) FROM races WHERE year = 1999); 
SELECT year FROM races GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT name FROM races WHERE year = 2017 AND name NOT IN (SELECT name FROM races WHERE year = 2000); 
SELECT c.country, c.name AS circuit_name, c.location FROM circuits c JOIN races r ON c.circuitid = r.circuitid WHERE r.name LIKE '%European%' ORDER BY r.year ASC LIMIT 1; 
SELECT MAX(races.year) AS last_season FROM races JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Brands Hatch' AND races.name = 'British Grand Prix'; 
SELECT COUNT(*) AS season_count FROM races r JOIN circuits c ON r.circuitid = c.circuitid WHERE c.name = 'Silverstone Circuit' AND r.name LIKE '%British Grand Prix%'; 
SELECT d.forename, d.surname FROM drivers d JOIN driverstandings ds ON d.driverid = ds.driverid JOIN races r ON ds.raceid = r.raceid WHERE r.year = 2010 AND r.name = 'Singapore Grand Prix' ORDER BY ds.position; 
SELECT d.forename, d.surname, ds.points FROM drivers d JOIN driverstandings ds ON d.driverid = ds.driverid ORDER BY ds.points DESC LIMIT 1
SELECT d.forename, d.surname, ds.points FROM drivers d JOIN driverstandings ds ON d.driverid = ds.driverid JOIN races r ON ds.raceid = r.raceid WHERE r.year = 2017 AND r.name = 'Chinese Grand Prix' ORDER BY ds.points DESC LIMIT 3; 
SELECT d.forename, d.surname, r.name, lt.milliseconds AS best_lap_time FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId JOIN races r ON lt.raceId = r.raceId WHERE lt.milliseconds = (SELECT MIN(milliseconds) FROM lapTimes); 
SELECT AVG(T3.milliseconds) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN laptimes AS T3 ON T1.driverid = T3.driverid JOIN races AS T4 ON T2.raceid = T4.raceid WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T4.name = 'Malaysian Grand Prix' AND T4.year = 2009
SELECT CAST(SUM(CASE WHEN d.surname = 'Hamilton' AND ds.position > 1 THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(ds.driverId) FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId WHERE ds.year >= 2010; 
SELECT d.forename, d.surname, d.nationality, MAX(cs.points) AS max_points FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId JOIN constructorStandings cs ON d.driverId = cs.driverId WHERE ds.wins > 0 GROUP BY d.driverId ORDER BY max_points DESC LIMIT 1; 
SELECT CONCAT(forename, ' ', surname) AS name, (YEAR(CURRENT_TIMESTAMP) - YEAR(dob)) AS age FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1; 
SELECT c.name FROM circuits c JOIN races r ON c.circuitid = r.circuitid WHERE EXTRACT(YEAR FROM r.date) BETWEEN 1990 AND 2000 GROUP BY c.name HAVING COUNT(r.raceid) = 4; 
SELECT c.name AS circuit_name, c.location, r.name AS race_name FROM circuits c JOIN races r ON c.circuitid = r.circuitid WHERE c.country = 'USA' AND r.year = 2006; 
SELECT r.name AS race_name, c.name AS circuit_name, c.location AS circuit_location FROM races r JOIN circuits c ON r.circuitid = c.circuitid WHERE EXTRACT(MONTH FROM r.date) = 9 AND EXTRACT(YEAR FROM r.date) = 2005; 
SELECT r.name FROM races r JOIN results res ON r.raceId = res.raceId JOIN drivers d ON res.driverId = d.driverId WHERE d.forename = 'Alex' AND d.surname = 'Yoong' AND res.position < 20; 
SELECT COUNT(*)  FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId JOIN races r ON ds.raceId = r.raceId JOIN circuits c ON r.circuitId = c.circuitId WHERE d.forename = 'Michael' AND d.surname = 'Schumacher' AND c.name = 'Sepang International Circuit'; 
SELECT r.name, r.year FROM races r JOIN lapTimes lt ON r.raceId = lt.raceId JOIN drivers d ON lt.driverId = d.driverId WHERE d.forename = 'Michael' AND d.surname = 'Schumacher' ORDER BY lt.milliseconds ASC LIMIT 1; 
SELECT AVG(driverStandings.points) FROM driverStandings JOIN drivers ON driverStandings.driverId = drivers.driverId JOIN races ON driverStandings.raceId = races.raceId WHERE drivers.forename = 'Eddie' AND drivers.surname = 'Irvine' AND races.year = 2000;
SELECT r.name AS race_name, ds.points AS points FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId JOIN races r ON ds.raceId = r.raceId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' ORDER BY r.year ASC LIMIT 1; 
SELECT r.name, c.country  FROM races r  JOIN circuits c ON r.circuitid = c.circuitid  WHERE r.year = 2017  ORDER BY r.date; 
SELECT r.name AS race_name, r.year, c.location AS circuit_location, MAX(l.lap) AS max_laps FROM races r JOIN lapTimes l ON r.raceId = l.raceId JOIN circuits c ON r.circuitId = c.circuitId GROUP BY r.raceId, r.name, r.year, c.location ORDER BY max_laps DESC LIMIT 1; 
SELECT      (COUNT(CASE WHEN c.country = 'Germany' THEN 1 ELSE NULL END) * 100.0 / COUNT(*)) AS percentage FROM      races r JOIN      circuits c ON r.circuitid = c.circuitid WHERE      r.name = 'European Grand Prix'; 
SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'; 
SELECT name FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY lat DESC LIMIT 1; 
SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'; 
SELECT country FROM circuits ORDER BY alt DESC LIMIT 1
SELECT COUNT(*) FROM drivers WHERE code IS NULL; 
SELECT nationality FROM drivers ORDER BY dob ASC LIMIT 1; 
SELECT surname FROM drivers WHERE nationality = 'Italian'; 
SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson';
SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton';
SELECT circuits.name FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix'; 
SELECT DISTINCT r.year FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Silverstone Circuit'; 
SELECT r.url FROM races r JOIN circuits c ON r.circuitid = c.circuitid WHERE c.name = 'Silverstone Circuit'; 
SELECT T1.time FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T1.year = 2010 AND T2.name = 'Abu Dhabi Grand Prix'; 
SELECT COUNT(*) FROM races WHERE circuitId IN (SELECT circuitId FROM circuits WHERE country = 'Italy'); 
SELECT date FROM races WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Circuit de Barcelona-Catalunya'); 
SELECT c.url FROM circuits c JOIN races r ON c.circuitid = r.circuitid WHERE r.name = 'Spanish Grand Prix' AND r.year = 2009; 
SELECT MIN(fastestLapTime) AS fastest_lap_time_ever FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'; 
SELECT d.forename, d.surname FROM drivers d JOIN results r ON d.driverId = r.driverId ORDER BY CAST(REPLACE(r.fastestLapSpeed, ',', '') AS FLOAT) DESC LIMIT 1
SELECT T1.driverRef FROM drivers AS T1 JOIN results AS T2 ON T1.driverId = T2.driverId JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.name = 'Canadian Grand Prix' AND T3.year = 2007 AND T2.position = 1
SELECT r.name FROM races r JOIN results res ON r.raceId = res.raceId JOIN drivers d ON res.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton'; 
SELECT T3.name FROM drivers AS T1 JOIN results AS T2 ON T1.driverId = T2.driverId JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' ORDER BY T2.rank ASC LIMIT 1
SELECT MAX(T1.fastestLapSpeed) AS MaxFastestLapSpeed FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'; 
SELECT DISTINCT r.year FROM drivers d JOIN results res ON d.driverId = res.driverId JOIN races r ON res.raceId = r.raceId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton'
SELECT r.positionOrder FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races ra ON r.raceId = ra.raceId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' AND ra.name = 'Chinese Grand Prix' AND ra.year = 2008; 
SELECT d.forename, d.surname FROM drivers d JOIN results r ON d.driverid = r.driverid JOIN races ra ON r.raceid = ra.raceid WHERE ra.year = 1989 AND ra.name = 'Australian Grand Prix' AND r.grid = 4; 
SELECT COUNT(*) FROM results r JOIN races rr ON r.raceId = rr.raceId WHERE rr.year = 2008 AND rr.name = 'Australian Grand Prix' AND r.time IS NOT NULL; 
SELECT r.fastestLap FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races ra ON r.raceId = ra.raceId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' AND ra.year = 2008 AND ra.name = 'Australian Grand Prix'
SELECT T2.time FROM races AS T1 JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.year = 2008 AND T1.name = 'AustChineseralian Grand Prix' AND T2.rank = 2
SELECT d.forename, d.surname, d.url FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 2008 AND ra.name = 'Australian Grand Prix' AND r.time LIKE '__:%'; 
SELECT COUNT(*)  FROM drivers  JOIN results ON drivers.driverId = results.driverId  JOIN races ON results.raceId = races.raceId  WHERE drivers.nationality = 'British' AND races.name = 'Australian Grand Prix' AND races.year = 2008; 
SELECT COUNT(DISTINCT T1.driverId) FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Chinese Grand Prix' AND T2.year = 2008 AND T1.time IS NOT NULL
SELECT SUM(points) AS total_points FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE forename = 'Lewis' AND surname = 'Hamilton'; 
SELECT AVG(REPLACE(SUBSTRING_INDEX(results.fastestLapTime, ':', -1), '.', '')) AS averageFastestLapTimeInSeconds FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'; 
SELECT CAST(SUM(CASE WHEN T1.time IS NOT NULL THEN 1 ELSE 0 END) AS FLOAT) / COUNT(T1.resultId) AS completion_rate FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2008 AND T2.name = 'Australian Grand Prix'; 
SELECT ((CAST(SUBSTR(time, 4) AS REAL) - CAST(SUBSTR((SELECT time FROM results WHERE raceId IN (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008) ORDER BY positionOrder LIMIT 1), 4) AS REAL)) / CAST(SUBSTR((SELECT time FROM results WHERE raceId IN (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008) ORDER BY positionOrder LIMIT 1), 4) AS REAL)) * 100 AS percentage_faster; 
SELECT COUNT(*) FROM circuits WHERE country = 'Australia' AND location = 'Melbourne'; 
SELECT lat, lng FROM circuits WHERE country = 'USA'; 
SELECT COUNT(*) FROM drivers WHERE nationality = 'British' AND YEAR(dob) > 1980; 
SELECT MAX(points) FROM constructors WHERE nationality = 'British'; 
SELECT c.name FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId ORDER BY cs.points DESC LIMIT 1; 
SELECT c.name FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId WHERE cs.raceId = 291 AND cs.points = 0; 
SELECT COUNT(*) FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructors.nationality = 'Japanese' AND constructorStandings.points = 0; 
SELECT c.name FROM constructors c JOIN results r ON c.constructorId = r.constructorId WHERE r.rank = 1; 
SELECT COUNT(*) FROM constructors AS c JOIN results AS r ON c.constructorId = r.constructorId WHERE c.nationality = 'French' AND r.laps > 50; 
SELECT CAST(SUM(CASE WHEN T2.time IS NOT NULL THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(T1.driverId) AS Percentage FROM drivers AS T1 JOIN results AS T2 ON T1.driverId = T2.driverId JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T1.nationality = 'Japanese' AND T3.year BETWEEN 2007 AND 2009; 
SELECT AVG(UNIX_TIMESTAMP(SUBSTRING_INDEX(time, '.', -1)) / 1000) AS avg_time_seconds, YEAR FROM results WHERE time IS NOT NULL AND SUBSTRING_INDEX(time, ':', -1) != '+' AND YEAR < 1975 GROUP BY YEAR
SELECT d.forename, d.surname FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE YEAR(d.dob) > 1975 AND r.rank = 2; 
SELECT COUNT(*) FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE d.nationality = 'Italian' AND r.time IS NULL; 
SELECT d.forename, d.surname FROM drivers d JOIN (     SELECT MIN(fastestLapTime) AS min_time     FROM results ) r ON d.driverId = r.driverId; 
SELECT T1.fastestLap FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2009 AND T1.time LIKE '%:%'; 
SELECT AVG(CAST(fastestLapSpeed AS FLOAT)) AS averageFastestLapSpeed FROM results JOIN races ON results.raceId = races.raceId WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009; 
SELECT r.name, rs.year FROM results res JOIN races r ON res.raceId = r.raceId JOIN (     SELECT MIN(milliseconds) AS min_milliseconds     FROM results     WHERE milliseconds IS NOT NULL ) min_res ON res.milliseconds = min_res.min_milliseconds; 
SELECT CAST(SUM(CASE WHEN YEAR(r.dob) < 1985 AND r.laps > 50 THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(r.driverId) AS percentage FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE YEAR(r.raceId BETWEEN 2000 AND 2005); 
SELECT COUNT(*) FROM drivers AS d JOIN lapTimes AS l ON d.driverId = l.driverId WHERE d.nationality = 'French' AND l.time < '02:00.00'; 
SELECT code FROM drivers WHERE nationality = 'America'; 
SELECT raceId FROM races WHERE year = 2009; 
SELECT COUNT(*) FROM driverStandings WHERE raceId = 18; 
SELECT COUNT(*) AS netherlandic_drivers FROM (     SELECT *     FROM drivers     WHERE nationality = 'Dutch'     ORDER BY dob DESC     LIMIT 3 ) AS youngest_dutch_drivers; 
SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica';
SELECT COUNT(*) FROM drivers WHERE nationality = 'British' AND YEAR(dob) = 1980; 
SELECT d.driverId, MIN(p.time) AS earliest_time FROM drivers d JOIN pitStops p ON d.driverId = p.driverId WHERE d.nationality = 'German' AND EXTRACT(YEAR FROM d.dob) BETWEEN 1980 AND 1990 GROUP BY d.driverId ORDER BY earliest_time ASC LIMIT 3; 
SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY dob ASC LIMIT 1
SELECT d.driverId, d.code FROM drivers d JOIN (     SELECT driverId, MIN(fastestLapTime) AS minFastestLapTime     FROM results     GROUP BY driverId ) r ON d.driverId = r.driverId AND d.dob LIKE '1971%' WHERE r.minFastestLapTime IS NOT NULL; 
SELECT d.driverId, d.dob, d.nationality, MAX(ps.time) AS latest_lap_time FROM drivers d JOIN pitStops ps ON d.driverId = ps.driverId WHERE d.nationality = 'Spanish' AND YEAR(d.dob) < 1982 GROUP BY d.driverId, d.dob, d.nationality ORDER BY latest_lap_time DESC LIMIT 10; 
SELECT r.year FROM races r JOIN results res ON r.raceId = res.raceId ORDER BY res.fastestLapTime ASC LIMIT 1; 
SELECT r.year FROM races r JOIN lapTimes lt ON r.raceId = lt.raceId ORDER BY lt.time DESC LIMIT 1; 
SELECT driverId FROM lapTimes WHERE lap = 1 ORDER BY time ASC LIMIT 5; 
SELECT COUNT(*) FROM results WHERE raceId BETWEEN 50 AND 100 AND statusId = 2 AND time IS NOT NULL; 
SELECT COUNT(*), location, lat, lng FROM circuits WHERE country = 'Austria'; 
SELECT raceId FROM results WHERE time IS NOT NULL GROUP BY raceId ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT d.driverRef, d.nationality, d.dob FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.raceId = 23 AND q.q2 IS NOT NULL; 
SELECT MIN(races.date), races.name, races.time FROM drivers JOIN qualifying ON drivers.driverId = qualifying.driverId JOIN races ON qualifying.raceId = races.raceId ORDER BY drivers.dob DESC LIMIT 1
SELECT COUNT(*) FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN status s ON r.statusId = s.statusId WHERE d.nationality = 'American' AND s.status = 'Puncture'; 
SELECT c.url, MAX(cs.points) AS max_points FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId WHERE c.nationality = 'Italian' GROUP BY c.constructorId, c.url; 
SELECT url FROM constructors WHERE constructorId = (SELECT constructorId FROM constructorStandings ORDER BY wins DESC LIMIT 1); 
SELECT d.name FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId JOIN races r ON lt.raceId = r.raceId WHERE r.name = 'French Grand Prix' AND lt.lap = 3 ORDER BY lt.time DESC LIMIT 1
SELECT r.raceId, MIN(l.milliseconds) AS fastest_lap_time_in_milliseconds FROM lapTimes l JOIN races r ON l.raceId = r.raceId WHERE l.lap = 1 GROUP BY r.raceId; 
SELECT AVG(fastestLapTime) AS avgFastestLapTime FROM results JOIN races ON results.raceId = races.raceId WHERE races.year = 2006 AND races.name = 'United States Grand Prix' AND results.rank <= 10; 
SELECT d.forename, d.surname FROM drivers AS d JOIN pitstops AS p ON d.driverid = p.driverid WHERE YEAR(d.dob) BETWEEN 1980 AND 1985 GROUP BY d.driverid ORDER BY AVG(p.duration) ASC LIMIT 3
SELECT r.driverid, r.time FROM results r JOIN races ra ON r.raceid = ra.raceid WHERE ra.name = 'Canadian Grand Prix' AND ra.year = 2008 AND r.time LIKE '%:%'; 
SELECT c.constructorRef, c.url FROM constructors c JOIN results r ON c.constructorId = r.constructorId JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 2009 AND ra.name = 'Singapore Grand Prix' AND r.time LIKE '%:%' ORDER BY r.time DESC LIMIT 1; 
SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND EXTRACT(YEAR FROM dob) BETWEEN 1981 AND 1991; 
SELECT forename || ' ' || surname AS full_name, url, dob FROM drivers WHERE nationality = 'German' AND EXTRACT(YEAR FROM dob) BETWEEN 1971 AND 1985 ORDER BY dob DESC; 
SELECT country, lat, lng FROM circuits WHERE name = 'Hungaroring'
SELECT c.points, co.name, co.nationality FROM constructorResults c JOIN constructors co ON c.constructorId = co.constructorId JOIN races r ON c.raceId = r.raceId WHERE r.name = 'Monaco Grand Prix' AND r.year BETWEEN 1980 AND 2010 ORDER BY c.points DESC LIMIT 1; 
SELECT AVG(points) FROM driverStandings WHERE driverId IN (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') AND raceId IN (SELECT raceId FROM races WHERE name = 'Turkish Grand Prix')
SELECT AVG(COUNT(*)) AS avg_races_per_year FROM (     SELECT COUNT(*) AS race_count     FROM races     WHERE date BETWEEN '2000-01-01' AND '2010-12-31'     GROUP BY YEAR(date) ) AS yearly_race_counts; 
SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT wins FROM driverStandings WHERE points = 91; 
SELECT r.name FROM races r JOIN results res ON r.raceId = res.raceId ORDER BY CAST(SUBSTRING_INDEX(res.fastestLapTime, ':', 1) AS UNSIGNED) * 60 + CAST(SUBSTRING_INDEX(SUBSTRING_INDEX(res.fastestLapTime, ':', -1), '.', 1) AS UNSIGNED) ASC LIMIT 1; 
SELECT c.location || ', ' || c.country AS full_location FROM circuits c JOIN races r ON c.circuitid = r.circuitid ORDER BY r.date DESC LIMIT 1; 
SELECT d.forename, d.surname FROM drivers d JOIN qualifying q ON d.driverId = q.driverId JOIN races r ON q.driverId = r.driverId JOIN circuits c ON r.circuitId = c.circuitId WHERE r.year = 2008 AND c.name = 'Marina Bay Street Circuit' AND q.q3 IS NOT NULL ORDER BY q.q3 ASC LIMIT 1; 
SELECT d.forename || ' ' || d.surname AS fullName, d.nationality, r.name AS raceName FROM drivers d JOIN driverstandings ds ON d.driverid = ds.driverid JOIN races r ON ds.raceid = r.raceid WHERE d.dob = (SELECT MIN(dob) FROM drivers); 
SELECT COUNT(*)  FROM results r  JOIN status s ON r.statusId = s.statusId  JOIN races ra ON r.raceId = ra.raceId  WHERE s.statusId = 3 AND ra.name = 'Canadian Grand Prix'; 
SELECT d.forename, d.surname, COUNT(ds.wins) AS total_wins FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId WHERE d.dob = (SELECT MIN(dob) FROM drivers) GROUP BY d.forename, d.surname; 
SELECT MAX(CAST(duration AS FLOAT)) AS longest_pit_stop_duration FROM pitStops; 
SELECT MIN(time) AS fastest_lap_time FROM lapTimes;
SELECT MAX(T1.duration) FROM pitStops AS T1 JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'
SELECT p.lap FROM pitStops p JOIN drivers d ON p.driverId = d.driverId JOIN races r ON p.raceId = r.raceId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' AND r.year = 2011 AND r.name = 'Australian Grand Prix'; 
SELECT p.duration FROM pitStops p JOIN races r ON p.raceId = r.raceId WHERE r.year = 2011 AND r.name = 'Australian Grand Prix'; 
SELECT MIN(time) AS lap_record FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'; 
SELECT T1.forename, T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY TIME LIMIT 1
SELECT l.position FROM lapTimes l JOIN drivers d ON l.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' ORDER BY l.time ASC LIMIT 1; 
SELECT MIN(fastestLapTime) AS lap_record FROM results JOIN races ON results.raceId = races.raceId WHERE races.name = 'Austrian Grand Prix'; 
SELECT r.time FROM results r JOIN races ra ON r.raceId = ra.raceId JOIN circuits c ON ra.circuitId = c.circuitId WHERE c.country = 'Italy'; 
SELECT r.name AS race_name FROM races r JOIN circuits c ON r.circuitid = c.circuitid WHERE c.name = 'Austrian Grand Prix Circuit'; 
SELECT p.duration FROM pitStops p JOIN results r ON p.driverId = r.driverId AND p.raceId = r.raceId JOIN races ra ON p.raceId = ra.raceId WHERE ra.name = 'Austrian Grand Prix' AND p.duration = (     SELECT MIN(p2.duration)     FROM pitStops p2     JOIN results r2 ON p2.driverId = r2.driverId AND p2.raceId = r2.raceId     JOIN races ra2 ON p2.raceId = ra2.raceId     WHERE ra2.name = 'Austrian Grand Prix' ); 
SELECT c.lat, c.lng FROM circuits c JOIN lapTimes lt ON c.circuitId = lt.circuitId WHERE lt.time = '1:29.488'
SELECT AVG(pitStops.milliseconds) AS average_time_ms FROM pitStops JOIN drivers ON pitStops.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'; 
SELECT AVG(lapTimes.milliseconds) AS average_lap_time FROM lapTimes JOIN races ON lapTimes.raceId = races.raceId JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Italy'; 
SELECT player_api_id FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1
SELECT player_name, height FROM Player ORDER BY height DESC LIMIT 1; 
SELECT preferred_foot FROM Player_Attributes ORDER BY potential ASC LIMIT 1
SELECT COUNT(*) FROM Player_Attributes WHERE overall_rating BETWEEN 60 AND 65 AND defensive_work_rate = 'low';
SELECT id FROM Player_Attributes ORDER BY crossing DESC LIMIT 5; 
;
SELECT home_team FROM match_data WHERE season = '2015/2016' AND home_team_goal < away_team_goal GROUP BY home_team ORDER BY COUNT(*) ASC LIMIT 1; 
SELECT player_name FROM players ORDER BY penalties DESC LIMIT 10; 
SELECT T1.team_long_name  FROM Team AS T1  JOIN Match AS T2 ON T1.team_api_id = T2.away_team_api_id  JOIN League AS T3 ON T2.league_id = T3.id  WHERE T3.name = 'Scotland Premier League' AND T2.season = '2009/2010' AND T2.away_team_goal > T2.home_team_goal; 
SELECT teamName, buildUpPlaySpeed FROM teams ORDER BY buildUpPlaySpeed DESC LIMIT 4; 
;
SELECT player_id, (strftime('%Y-%m-%d %H:%M:%S', 'now') - strftime('%Y-%m-%d %H:%M:%S', birthday)) / 365 AS age FROM Player WHERE sprint_speed >= 97 AND date BETWEEN '2013-01-01' AND '2015-12-31'; 
SELECT league_name, COUNT(match_id) AS match_count FROM leagues JOIN matches ON leagues.league_id = matches.league_id GROUP BY league_name ORDER BY match_count DESC LIMIT 1; 
SELECT AVG(height) FROM Player WHERE birthday BETWEEN '1990-01-01 00:00:00' AND '1995-12-31 23:59:59'; 
SELECT player_api_id FROM Player_Attributes WHERE date LIKE '2010%' AND overall_rating > (SELECT AVG(overall_rating) FROM Player_Attributes WHERE date LIKE '2010%') ORDER BY overall_rating DESC LIMIT 1; 
SELECT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60; 
SELECT team_long_name FROM table_name WHERE strftime('%Y', date) = '2012' AND buildUpPlayPassing > (SELECT AVG(buildUpPlayPassing) FROM table_name WHERE strftime('%Y', date) = '2012' AND buildUpPlayPassing IS NOT NULL); 
SELECT CAST(SUM(CASE WHEN preferred_foot = 'left' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(player_fifa_api_id) AS percentage_left_foot_players FROM player_attributes WHERE YEAR(birthday) BETWEEN 1987 AND 1992; 
SELECT league_name, SUM(home_team_goal + away_team_goal) AS total_goals FROM matches GROUP BY league_name ORDER BY total_goals ASC LIMIT 5; 
SELECT AVG(long_shots) AS average_long_shot FROM Player_Attributes WHERE player_name = 'Ahmed Samir Farag'; 
SELECT P.player_name, AVG(H.heading_accuracy) AS avg_heading_accuracy FROM Player P JOIN Player_Statistics H ON P.player_fifa_api_id = H.player_fifa_api_id WHERE P.height > 180 GROUP BY P.player_name ORDER BY avg_heading_accuracy DESC LIMIT 10; 
SELECT team_long_name FROM your_table_name WHERE buildUpPlayDribblingClass = 'Normal' AND date >= '2014-01-01 00:00:00' AND date <= '2014-01-31 00:00:00' GROUP BY team_long_name HAVING AVG(chanceCreationPassing) > SUM(chanceCreationPassing) ORDER BY SUM(chanceCreationPassing) DESC; 
SELECT L.name FROM League AS L JOIN Match AS M ON L.id = M.league_id WHERE M.season = '2009/2010' AND AVG(M.home_team_goal) > AVG(M.away_team_goal); 
SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'; 
SELECT player_name FROM Player WHERE SUBSTR(birthday, 1, 7) = '1970-10'; 
SELECT attacking_work_rate FROM players WHERE name = 'Franco Zennaro'; 
SELECT buildUpPlayPositioningClass FROM match_events WHERE team_long_name = 'ADO Den Haag' AND (minute BETWEEN 0 AND 45 OR minute BETWEEN 90 AND 135); 
SELECT heading_accuracy  FROM match_events  WHERE player_name = 'Francois Affolter'  AND event_type = 'Header'  AND date = '2014-09-18 00:00:00'; 
SELECT AVG(rating) AS overall_rating FROM player_stats WHERE player_name = 'Gabriel Tamas' AND strftime('%Y', date) = '2011'; 
SELECT COUNT(*)  FROM Match  JOIN Season ON Match.season_id = Season.id  JOIN League ON Match.league_id = League.id  WHERE Season.year = '2015/2016' AND League.name = 'Scotland Premier League'; 
SELECT preferred_foot FROM players ORDER BY birthday DESC LIMIT 1; 
SELECT * FROM Player_Attributes WHERE potential = (SELECT MAX(potential) FROM Player_Attributes); 
SELECT COUNT(*) FROM players WHERE weight < 130 AND preferred_foot = 'left'; 
SELECT team_short_name  FROM football_teams  WHERE chanceCreationPassingClass = 'Risky'; 
SELECT defensive_work_rate FROM players WHERE name = 'David Wilson'; 
SELECT birthday  FROM players  WHERE overall_rating = (SELECT MAX(overall_rating) FROM players); 
SELECT League.name  FROM League  JOIN Country ON League.country_id = Country.id  WHERE Country.name = 'Netherlands'; 
SELECT AVG(home_team_goal) AS average_home_team_goal FROM match JOIN league ON match.league_id = league.id JOIN country ON league.country_id = country.id WHERE country.name = 'Poland' AND match.season = '2010/2011'; 
SELECT P.player_name, AVG(PA.finishing) AS avg_finishing_rate FROM Player AS P JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.height = (SELECT MAX(height) FROM Player) OR P.height = (SELECT MIN(height) FROM Player) GROUP BY P.player_name ORDER BY avg_finishing_rate DESC LIMIT 1; 
SELECT player_name FROM Player WHERE height > 180; 
SELECT COUNT(*) FROM Player WHERE strftime('%Y', birthday) > '1990'; 
SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Adam%' AND weight > 170; 
SELECT player_name  FROM player_stats  WHERE overall_rating > 80  AND strftime('%Y', date) BETWEEN '2008' AND '2010'; 
SELECT potential FROM players WHERE name = 'Aaron Doran'; 
SELECT * FROM players WHERE preferred_foot = 'left'; 
SELECT team_long_name FROM teams WHERE buildUpPlaySpeedClass = 'Fast'; 
SELECT buildUpPlayPassingClass  FROM match_detail  WHERE team_short_name = 'CLB'; 
SELECT team_short_name FROM your_table_name WHERE buildUpPlayPassing > 70; 
SELECT AVG(t2.overall_rating)  FROM Player AS t1  JOIN Performance AS t2 ON t1.id = t2.player_id  WHERE strftime('%Y', t2.date) BETWEEN '2010' AND '2015' AND t1.height > 170; 
SELECT name FROM players ORDER BY height ASC LIMIT 1; 
SELECT Country.name FROM Country JOIN League ON Country.id = League.country_id WHERE League.name = 'Italy Serie A'; 
SELECT team_short_name  FROM teams  WHERE buildUpPlaySpeed = 31 AND buildUpPlayDribbling = 53 AND buildUpPlayPassing = 32; 
SELECT AVG(overall_rating) AS average_overall_rating FROM players WHERE name = 'Aaron Doran'; 
SELECT COUNT(*)  FROM Match  JOIN League ON Match.league_id = League.id  WHERE League.name = 'Germany 1. Bundesliga'  AND strftime('%Y-%m', Match.date) BETWEEN '2008-08' AND '2008-10'; 
SELECT team_short_name FROM matches WHERE home_team_goal = 10; 
SELECT name FROM players WHERE balance = (SELECT MAX(balance) FROM players) AND potential = 61; 
SELECT      (SUM(CASE WHEN player_name = 'Abdou Diallo' THEN ball_control ELSE 0 END) / COUNT(CASE WHEN player_name = 'Abdou Diallo' THEN id ELSE NULL END)) -      (SUM(CASE WHEN player_name = 'Aaron Appindangoye' THEN ball_control ELSE 0 END) / COUNT(CASE WHEN player_name = 'Aaron Appindangoye' THEN id ELSE NULL END)) AS difference_of_average_ball_control FROM      your_table_name; 
SELECT team_long_name FROM Team WHERE team_short_name = 'GEN'; 
SELECT      CASE          WHEN birthday < (SELECT birthday FROM Player WHERE player_name = 'Abdelaziz Barrada') THEN 'Aaron Lennon'         ELSE 'Abdelaziz Barrada'     END AS older_player FROM      Player WHERE      player_name = 'Aaron Lennon'; 
SELECT player_name FROM Player ORDER BY height DESC LIMIT 1; 
SELECT COUNT(*) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low'; 
SELECT Country.name FROM Country JOIN League ON Country.id = League.country_id WHERE League.name = 'Belgium Jupiler League'; 
SELECT l.name FROM League l JOIN Country c ON l.country_id = c.id WHERE c.name = 'Germany'; 
SELECT player_name FROM players ORDER BY overall_rating DESC LIMIT 1; 
SELECT COUNT(DISTINCT player_id) FROM players WHERE strftime('%Y', birthday) < '1986' AND defensive_work_rate = 'high'; 
SELECT name FROM players WHERE name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY crossing DESC LIMIT 1; 
SELECT heading_accuracy FROM users WHERE name = 'Ariel Borysiuk'; 
SELECT COUNT(*) FROM players WHERE height > 180 AND volleys > 70; 
SELECT name FROM players WHERE volleys > 70 AND dribbling > 70; 
SELECT COUNT(*)  FROM Match  JOIN Season ON Match.season_id = Season.id  JOIN Country ON Match.country_id = Country.id  WHERE Season.year = '2008/2009' AND Country.name = 'Belgium'; 
SELECT MAX(long_passing) AS longest_passing_score FROM players ORDER BY birthday ASC LIMIT 1; 
SELECT COUNT(*)  FROM Match  JOIN League ON Match.league_id = League.id  WHERE League.name = 'Belgium Jupiler League' AND SUBSTR(`date`, 1, 7) = '2009-04'; 
;
SELECT AVG(overall_rating) FROM player WHERE strftime('%Y', birthday) < '1986'; 
SELECT      ((SUM(CASE WHEN player_name = 'Ariel Borysiuk' THEN overall_rating ELSE 0 END) - SUM(CASE WHEN player_name = 'Paulin Puel' THEN overall_rating ELSE 0 END)) / SUM(CASE WHEN player_name = 'Paulin Puel' THEN overall_rating ELSE 0 END)) * 100 AS percentage_increase; 
SELECT AVG(buildUpPlaySpeed) AS avg_build_up_play_speed FROM performance_data WHERE team_long_name = 'Heart of Midlothian'; 
SELECT AVG(T1.overall_rating) AS average_overall_rating  FROM players AS T1  WHERE T1.player_name = 'Pietro Marino'; 
SELECT SUM(T1.crossing) AS total_crossing_score FROM player_stats AS T1 JOIN players AS T2 ON T1.player_id = T2.player_id WHERE T2.player_name = 'Aaron Lennox'; 
SELECT MAX(chanceCreationPassing) AS HighestChanceCreationPassingScore, chanceCreationPassingClass  FROM your_table_name  WHERE team_long_name = 'Ajax'; 
SELECT preferred_foot FROM players WHERE player_name = 'Abdou Diallo'; 
SELECT MAX(T1.overall_rating) AS highest_overall_rating FROM player_stats AS T1 JOIN players AS T2 ON T1.player_id = T2.player_id WHERE T2.player_name = 'Dorlan Pabon'; 
SELECT AVG(T2.away_team_goal) AS average_goals FROM Team AS T1 JOIN Match AS T2 ON T1.id = T2.away_team_id JOIN Country AS T3 ON T3.id = T2.country_id WHERE T1.team_long_name = 'Parma' AND T3.name = 'Italy'; 
SELECT name  FROM players  WHERE overall_rating = 77 AND date LIKE '2016-06-23%'  ORDER BY birthday ASC  LIMIT 1; 
SELECT AVG(rating) AS overall_rating FROM match_ratings WHERE player_name = 'Aaron Mooy' AND date LIKE '2016-02-04%'; 
SELECT potential FROM players WHERE player_name = 'Francesco Parravicini' AND date = '2010-08-30 00:00:00'; 
SELECT attack_work_rate FROM match_data WHERE player_name = 'Francesco Migliore' AND date LIKE '2015-05-01%'; 
SELECT defensive_work_rate  FROM player_stats  WHERE player_name = 'Kevin Berigaud' AND date = '2013-02-22 00:00:00'; 
SELECT date FROM Player_Attributes WHERE player_name = 'Kevin Constant' ORDER BY crossing DESC LIMIT 1
SELECT build_up_play_speed_class  FROM match_details  WHERE team_long_name = 'Willem II' AND date = '2012-02-22'; 
SELECT build_up_play_dribbling_class  FROM match_data  WHERE team_short_name = 'LEI' AND date = '2015-09-10 00:00:00'; 
SELECT build_up_play_passing_class FROM match_data WHERE team_long_name = 'FC Lorient' AND date LIKE '2010-02-22%'; 
SELECT T2.chance_creation_passing_class FROM match_events AS T1 JOIN match_details AS T2 ON T1.match_id = T2.match_id WHERE T2.team_long_name = 'PEC Zwolle' AND T1.date = '2013-09-20 00:00:00'; 
SELECT chance_creation_crossing_class FROM match_data WHERE team_long_name = 'Hull City' AND date = '2010-02-22 00:00:00'; 
SELECT T1.defence_aggression_class  FROM match_stats AS T1  JOIN teams AS T2 ON T1.team_id = T2.team_id  WHERE T2.team_long_name = 'Hannover 96' AND T1.date LIKE '2015-09-10%'; 
SELECT AVG(overall_rating) AS average_overall_rating FROM player_stats WHERE player_name = 'Marko Arnautovic' AND date BETWEEN '2007-02-22' AND '2016-04-21'; 
SELECT      (CAST((SELECT overall_rating FROM players WHERE player_name = 'Landon Donovan' AND date = '2013-07-12') -            (SELECT overall_rating FROM players WHERE player_name = 'Jordan Bowery' AND date = '2013-07-12') AS REAL)) * 100 /      (SELECT overall_rating FROM players WHERE player_name = 'Landon Donovan' AND date = '2013-07-12') AS percentage; 
;
SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 10
SELECT player_name FROM Player WHERE strftime('%J', 'now') - strftime('%J', birthday) >= 34;
SELECT COUNT(home_team_goals) AS total_home_team_goals FROM match_data WHERE player_name = 'Aaron Lennon'; 
SELECT SUM(goals) AS total_away_goals FROM match_data WHERE (player_name = 'Daan Smith' OR player_name = 'Filipe Ferreira') AND team_type = 'away'; 
SELECT SUM(home_team_goals) FROM Player WHERE strftime('%Y', 'now') - strftime('%Y', birthday) <= 30; 
;
SELECT name FROM players WHERE potential = (SELECT MAX(potential) FROM players); 
SELECT player_name  FROM players  WHERE attacking_work_rate = 'high'; 
SELECT name FROM players WHERE finishing = 1 ORDER BY datetime(CURRENT_TIMESTAMP, 'localtime') - datetime(birthday) DESC LIMIT 1; 
SELECT player_name FROM players WHERE country = 'Belgium'; 
SELECT country FROM players WHERE vision > 89; 
SELECT country, AVG(weight) AS avg_weight FROM players GROUP BY country ORDER BY avg_weight DESC LIMIT 1; 
SELECT team_long_name FROM teams WHERE buildUpPlaySpeedClass = 'Slow'; 
SELECT team_short_name FROM your_table_name WHERE chanceCreationPassingClass = 'Safe'; 
SELECT AVG(Player.height)  FROM Player  JOIN Match ON Player.match_id = Match.id  JOIN Country ON Match.country_id = Country.id  WHERE Country.name = 'Italy'; 
SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name LIMIT 3; 
SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Aaron%' AND birthday > '1990'; 
SELECT (SELECT jumping FROM players WHERE id = 6) - (SELECT jumping FROM players WHERE id = 23) AS score_difference; 
;
SELECT COUNT(*) FROM Player_Attributes WHERE crossing = (SELECT MAX(crossing) FROM Player_Attributes) AND preferred_foot = 'left'; 
SELECT CAST(COUNT(*) AS FLOAT) * 100 / ( SELECT COUNT(*) FROM Player_Attributes ) AS Percentage  FROM Player_Attributes  WHERE stamina > 80 AND strength > 80; 
SELECT C.name AS country_name FROM League L JOIN Country C ON L.country_id = C.id WHERE L.name = 'Poland Ekstraklasa'; 
SELECT home_team_goal, away_team_goal FROM Match JOIN League ON Match.league_id = League.id WHERE Date LIKE '2008-09-24%' AND League.name = 'Belgium Jupiler League'; 
SELECT p.sprint_speed, p.agility, p.acceleration FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.player_name = 'Alexis Blin'; 
SELECT buildUpPlaySpeedClass FROM teams WHERE team_long_name = 'KSV Cercle Brugge'; 
SELECT COUNT(*) FROM matches WHERE season = '2015/2016' AND competition = 'Serie A'; 
SELECT MAX(home_team_goal) AS highest_score_of_home_team FROM matches WHERE league = 'Netherlands Eredivisie'; 
SELECT p.finishing, p.curve FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.weight = (SELECT MAX(weight) FROM Player); 
;
SELECT t1.team_long_name FROM teams AS t1 JOIN matches AS m ON t1.team_api_id = m.away_team_api_id ORDER BY SUM(m.away_team_goal) DESC LIMIT 1; 
SELECT player_name FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);
SELECT CAST(SUM(CASE WHEN height < 180 AND overall_rating > 70 THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(id) AS percentage FROM players; 
SELECT      SUM(CASE WHEN SEX = 'M' AND Admission = '+' THEN 1 ELSE 0 END) * 100.0 /      SUM(CASE WHEN SEX = 'M' AND Admission = '-' THEN 1 ELSE 0 END) AS deviation_percentage FROM      Patient; 
SELECT CAST(SUM(CASE WHEN YEAR(Birthday) > '1930' AND SEX = 'F' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(SEX) FROM Patient WHERE SEX = 'F'; 
SELECT      (COUNT(CASE WHEN Admission = '+' THEN 1 END) / COUNT(*)) * 100 AS InpatientPercentage FROM      Patient WHERE      YEAR(Birthday) BETWEEN 1930 AND 1940; 
SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS FLOAT) / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) AS Ratio FROM Patient WHERE Diagnosis = 'SLE'; 
SELECT T1.Diagnosis, T2.Date FROM Patient AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 30609; 
SELECT P.SEX, P.Birthday, E.`Examination Date`, E.Symptoms FROM Patient AS P JOIN Examination AS E ON P.ID = E.ID WHERE P.ID = '163109'; 
SELECT P.ID, P.SEX, P.Birthday FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.LDH > 500; 
SELECT P.ID, TIMESTAMPDIFF(YEAR, P.Birthday, CURRENT_TIMESTAMP) AS Age FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.RVVT = '+'; 
SELECT P.ID, P.SEX, E.Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.Thrombosis = 2; 
SELECT P.ID, P.Birthday, L.`T-CHO` FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE YEAR(P.Birthday) = 1937 AND L.`T-CHO` >= 250; 
SELECT P.ID, P.SEX, P.Diagnosis FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE L.ALB < 3.5 AND L.ALB IS NOT NULL; 
SELECT CAST(SUM(CASE WHEN P.SEX = 'F' AND (L.TP IS NOT NULL AND (CAST(L.TP AS REAL) < 6.0 OR CAST(L.TP AS REAL) > 8.5)) THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(P.ID) AS Percentage FROM Patient P LEFT JOIN Laboratory L ON P.ID = L.ID; 
SELECT AVG(aCL_IgG) AS Average_Anti_Cardiolipin_IgG FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE P.Admission = '+' AND TIMESTAMPDIFF(YEAR, P.Birthday, CURRENT_TIMESTAMP) >= 50; 
SELECT COUNT(*)  FROM Patient  WHERE SEX = 'F'    AND YEAR(Description) = '1997'    AND Admission = '-'; 
SELECT MIN(DATEDIFF(YEAR(Patient.Birthday, Patient.`First Date`))) AS YoungestAge FROM Patient WHERE Patient.`First Date` IS NOT NULL; 
SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.SEX = 'F' AND Examination.Thrombosis = 1 AND strftime('%Y', Examination.`Examination Date`) = '1997'; 
SELECT MAX(EXTRACT(YEAR FROM Birthday)) - MIN(EXTRACT(YEAR FROM Birthday)) AS AgeGap FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE TG >= 200)
SELECT e.Symptoms, e.Diagnosis  FROM Examination e  JOIN Patient p ON e.ID = p.ID  WHERE p.Birthday = (SELECT MAX(Birthday) FROM Patient) AND e.Symptoms IS NOT NULL; 
SELECT AVG(COUNT(Laboratory.ID)) AS Average_Male_Patients_Per_Month FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.Date BETWEEN '1998-01-01' AND '1998-12-31' GROUP BY EXTRACT(MONTH FROM Laboratory.Date); 
SELECT      L.Date AS Lab_Completion_Date,     TIMESTAMPDIFF(YEAR, P.Birthday, P.`First Date`) AS Age_At_Arrival FROM      Patient P JOIN      Laboratory L ON P.ID = L.ID WHERE      P.Diagnosis LIKE '%SJS%' ORDER BY      P.Birthday ASC LIMIT 1; 
SELECT      SUM(CASE WHEN P.SEX = 'M' AND L.UA <= 8.0 THEN 1 ELSE 0 END) /      SUM(CASE WHEN P.SEX = 'F' AND L.UA <= 6.5 THEN 1 ELSE 0 END) AS Ratio FROM      Patient P JOIN      Laboratory L ON P.ID = L.ID; 
SELECT COUNT(DISTINCT p.ID) AS PatientsWithoutExam FROM Patient p LEFT JOIN Examination e ON p.ID = e.ID AND DATEDIFF(e.`Examination Date`, p.`First Date`) >= 365 WHERE p.`Admission` = '+' AND e.ID IS NULL; 
SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE YEAR(P.Birthday) + 18 <= YEAR(E.`Examination Date`) AND YEAR(E.`Examination Date`) BETWEEN 1990 AND 1993; 
SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.`T-BIL` >= 2.0; 
SELECT Diagnosis, COUNT(*) AS Count FROM Examination WHERE `Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY Diagnosis ORDER BY Count DESC LIMIT 1; 
SELECT AVG(1999 - EXTRACT(YEAR FROM Birthday)) AS AverageAge FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.Date BETWEEN '1991-10-01' AND '1991-10-30'; 
SELECT TIMESTAMPDIFF(YEAR, Patient.Birthday, Laboratory.Date) AS Age, Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID ORDER BY Laboratory.HGB DESC LIMIT 1; 
SELECT ANA FROM Examination WHERE ID = 3605340 AND `Examination Date` = '1996-12-02'; 
SELECT CASE WHEN T-CHO < 250 THEN 'Normal' ELSE 'Abnormal' END AS Cholesterol_Status FROM Laboratory WHERE ID = 2927464 AND Date = '1995-09-04'; 
SELECT SEX FROM Patient WHERE Diagnosis LIKE '%AORTITIS%' ORDER BY First_Date ASC LIMIT 1; 
SELECT T2.aCL_IgM FROM Patient AS T1 JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Description = '1994-02-19' AND T1.Diagnosis = 'SLE' AND T2.Examination_Date = '1993-11-12'; 
SELECT P.SEX FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.Date = '1992-06-12' AND L.GPT = 9; 
SELECT TIMESTAMPDIFF(YEAR, p.Birthday, l.Date) AS Age FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.UA = '8.4' AND l.Date = '1991-10-21'; 
SELECT COUNT(Laboratory.ID)  FROM Patient  JOIN Laboratory ON Patient.ID = Laboratory.ID  WHERE Patient.`First Date` = '1991-06-13' AND Patient.Diagnosis = 'SJS' AND YEAR(Laboratory.Date) = 1995; 
SELECT p.Diagnosis AS Original_Diagnose FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.Examination_Date = '1997-01-27' AND p.Diagnosis LIKE '%SLE%' ORDER BY p.First_Date ASC LIMIT 1; 
SELECT E.Symptoms FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE P.Birthday = '1959-03-01' AND E.`Examination Date` = '1993-09-27'; 
SELECT      (SUM(CASE WHEN Birthday = '1959-02-18' AND Date LIKE '1981-11-%' THEN `T-CHO` ELSE 0 END) -       SUM(CASE WHEN Birthday = '1959-02-18' AND Date LIKE '1981-12-%' THEN `T-CHO` ELSE 0 END)) /      SUM(CASE WHEN Birthday = '1959-02-18' AND Date LIKE '1981-11-%' THEN 1 ELSE 0 END) * 100 AS DecreaseRate FROM      Laboratory JOIN      Patient ON Laboratory.ID = Patient.ID; 
SELECT DISTINCT ID FROM Examination WHERE Diagnosis LIKE '%Behcet%' AND Examination_Date BETWEEN '1997-01-01' AND '1997-12-31'; 
SELECT DISTINCT ID FROM Laboratory WHERE Date BETWEEN '1987-07-06' AND '1996-01-31' AND GPT > 30 AND ALB < 4; 
SELECT ID FROM Patient WHERE YEAR(Birthday) = 1964 AND SEX = 'F' AND Admission = '+' ORDER BY ID; 
SELECT COUNT(*) FROM Examination WHERE Thrombosis = 2 AND ANA_Pattern = 'S' AND `aCL IgM` > (AVG(`aCL IgM`) * 1.2); 
SELECT CAST(SUM(CASE WHEN UA <= 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN `U-PRO` > 0 AND `U-PRO` < 30 THEN 1 ELSE 0 END) AS percentage FROM Laboratory; 
SELECT ROUND((SUM(CASE WHEN DIAGNOSIS = 'BEHCET' THEN 1 ELSE 0 END) / COUNT(*)) * 100, 2) AS Percentage FROM Patient WHERE YEAR(`First Date`) = '1981' AND SEX = 'M'; 
SELECT DISTINCT P.ID FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.Admission = '-' AND L.Date LIKE '1991-10%' AND L.T_BIL IS NOT NULL AND L.T_BIL < 2.0; 
SELECT COUNT(*)  FROM Patient  JOIN Examination ON Patient.ID = Examination.ID  WHERE Examination.`ANA Pattern` != 'P' AND Patient.SEX = 'F' AND EXTRACT(YEAR FROM Patient.Birthday) BETWEEN 1980 AND 1989; 
SELECT P.SEX FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE E.Diagnosis = 'PSS' AND L.CRP = '2+' AND L.CRE = '1' AND L.LDH = '123'; 
SELECT AVG(L.ALB) AS AverageAlbuminLevel FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE P.SEX = 'F' AND P.Diagnosis = 'SLE' AND L.PLT > 400; 
SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT "First Date", "Diagnosis" FROM Patient WHERE ID = 48473; 
SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS'; 
SELECT COUNT(DISTINCT ID) FROM Laboratory WHERE YEAR(Date) = '1997' AND (ALB IS NULL OR ALB NOT BETWEEN 3.5 AND 5.5); 
SELECT CAST(SUM(CASE WHEN DIAGNOSIS LIKE '%ITP%' THEN 1 ELSE 0 END) AS FLOAT) * 100 / SUM(CASE WHEN DIAGNOSIS LIKE '%SLE%' THEN 1 ELSE 0 END) AS Proportion FROM Examination; 
SELECT CAST(SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(SEX) FROM Patient WHERE EXTRACT(YEAR FROM Birthday) = 1980 AND Diagnosis = 'RA'; 
SELECT COUNT(DISTINCT p.ID)  FROM Patient p  JOIN Examination e ON p.ID = e.ID  WHERE p.SEX = 'M'  AND e.`Examination Date` BETWEEN '1995-01-01' AND '1997-12-31'  AND e.Diagnosis LIKE '%Behcet%'  AND p.Admission = '-'; 
SELECT COUNT(*) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'F' AND L.WBC < 3.5; 
SELECT DATEDIFF(e.`Examination Date`, p.`First Date`) AS DaysUntilEvaluation FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.ID = 821298
SELECT CASE WHEN UA IS NOT NULL THEN             CASE WHEN SEX = 'M' AND UA > 8.0 OR SEX = 'F' AND UA > 6.5 THEN 'Yes' ELSE 'No' END         ELSE 'NA' END AS NormalRange  FROM Patient p  JOIN Laboratory l ON p.ID = l.ID  WHERE p.ID = 57266; 
SELECT Date FROM Laboratory WHERE ID = '48473' AND GOT >= 60; 
SELECT P.ID, P.SEX, P.Birthday FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE L.Date BETWEEN '1994-01-01' AND '1994-12-31' AND L.GOT IS NOT NULL AND L.GOT < 60; 
SELECT P.ID FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.GPT >= 60; 
SELECT P.Diagnosis FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.GPT > 60 ORDER BY P.Birthday ASC; 
SELECT AVG(LDH) AS Average_LDH FROM Laboratory WHERE LDH IS NOT NULL AND LDH < 500; 
SELECT P.ID, YEAR(CURRENT_TIMESTAMP) - YEAR(P.Birthday) AS Age FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.LDH BETWEEN 600 AND 800; 
SELECT P.Admission FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE L.ALP < 300; 
SELECT p.ID, l.ALP FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Birthday = '1982-04-01' AND l.ALP IS NOT NULL AND l.ALP < 300; 
SELECT P.ID, P.SEX, P.Birthday FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.TP IS NOT NULL AND CAST(REPLACE(L.TP, ',', '') AS REAL) < 6.0; 
SELECT TP - 8.5 AS Deviation FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE SEX = 'F' AND TP > 8.5; 
SELECT P.ID, P.Birthday FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND (L.ALB <= 3.5 OR L.ALB >= 5.5) ORDER BY P.Birthday DESC; 
SELECT p.ID, (CASE WHEN l.ALB BETWEEN 3.5 AND 5.5 THEN 'Yes' ELSE 'No' END) AS AlbuminWithinRange FROM Patient p LEFT JOIN Laboratory l ON p.ID = l.ID WHERE YEAR(p.Birthday) = 1982; 
SELECT CAST(SUM(CASE WHEN UA > 8.0 AND SEX = 'M' OR UA > 6.5 AND SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.SEX = 'F'; 
SELECT AVG(L.UA) AS Average_UA FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE (P.SEX = 'M' AND L.UA < 8.0) OR (P.SEX = 'F' AND L.UA < 6.5); 
SELECT P.ID, P.SEX, P.Birthday FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.UN = 29; 
SELECT P.ID, P.SEX, P.Birthday FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.Diagnosis = 'RA' AND (L.UN IS NULL OR L.UN < 30); 
SELECT COUNT(*) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.CRE >= 1.5; 
SELECT CASE WHEN SUM(CASE WHEN T2.CRE >= 1.5 THEN 1 ELSE 0 END) * SUM(CASE WHEN T1.SEX = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN T2.CRE >= 1.5 THEN 1 ELSE 0 END) * SUM(CASE WHEN T1.SEX = 'F' THEN 1 ELSE 0 END) THEN 'True' ELSE 'False' END AS result FROM Patient AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID; 
SELECT P.ID, P.SEX, P.Birthday, L.T_BIL AS Highest_T_BIL FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.T_BIL = (SELECT MAX(T_BIL) FROM Laboratory); 
SELECT GROUP_CONCAT(DISTINCT P.ID), P.SEX FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE L.T_BIL >= 2.0 GROUP BY P.SEX; 
SELECT p.ID, l.T_cho FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.T_cho = (SELECT MAX(T_cho) FROM Laboratory) ORDER BY p.Birthday ASC LIMIT 1; 
SELECT AVG(DIVIDE(TIMESTAMPDIFF(YEAR, Birthday, NOW()), 1)) AS AverageAge FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE SEX = 'M' AND `T-CHO` >= 250; 
SELECT P.ID, P.Diagnosis, L.TG FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.TG > 300; 
SELECT COUNT(DISTINCT P.ID) AS NumberOfPatients FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.TG >= 200 AND TIMESTAMPDIFF(YEAR, P.Birthday, CURRENT_TIMESTAMP) > 50; 
SELECT DISTINCT L.ID FROM Laboratory AS L JOIN Patient AS P ON L.ID = P.ID WHERE P.Admission = '-' AND L.CPK < 250; 
SELECT COUNT(DISTINCT L.ID) AS MalePatientsWithCPKBeyondNormalRange FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.Birthday BETWEEN '1936-01-01' AND '1956-12-31' AND P.SEX = 'M' AND L.CPK >= 250; 
SELECT P.ID, P.SEX, TIMESTAMPDIFF(YEAR, P.Birthday, CURRENT_TIMESTAMP) AS Age FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.GLU >= 180 AND L.`T-CHO` < 250; 
SELECT P.ID, L.GLU FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE YEAR(P.`First Date`) = 1991 AND L.GLU < 180; 
SELECT P.ID, P.SEX, P.Birthday FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE L.WBC <= 3.5 OR L.WBC >= 9.0 GROUP BY P.SEX, P.Age ORDER BY P.Age ASC; 
SELECT P.ID, P.Birthday, P.Diagnosis, (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) AS Age FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.RBC < 3.5; 
SELECT P.ID, P.SEX, P.Birthday, L.RBC, P.Admission FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'F' AND (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) >= 50 AND (L.RBC <= 3.5 OR L.RBC >= 6.0); 
SELECT DISTINCT p.ID, p.SEX FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Admission = '-' AND l.HGB < 10; 
SELECT P.ID, P.SEX FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.Diagnosis = 'SLE' AND L.HGB BETWEEN 10 AND 17 ORDER BY P.Birthday ASC LIMIT 1; 
SELECT p.ID, (EXTRACT(YEAR FROM AGE(NOW(), p.Birthday))) AS Age FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.HCT >= 52 GROUP BY p.ID, p.Birthday HAVING COUNT(l.ID) >= 2; 
SELECT AVG(HCT) AS Average_Hematocrit FROM Laboratory WHERE Date LIKE '1991%' AND HCT < 29; 
SELECT (SUM(CASE WHEN PLT < 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN PLT > 400 THEN 1 ELSE 0 END)) AS difference FROM Laboratory WHERE PLT <= 100 OR PLT >= 400; 
SELECT DISTINCT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE YEAR(l.Date) = '1984' AND (YEAR(CURDATE()) - YEAR(p.Birthday)) < 50 AND l.PLT BETWEEN 100 AND 400; 
SELECT CAST(SUM(CASE WHEN T2.PT >= 14 AND T1.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.PT >= 14 THEN 1 ELSE 0 END) AS percentage FROM Patient AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE strftime('%Y', 'now') - strftime('%Y', T1.Birthday) > 55; 
SELECT P.ID FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE YEAR(P.`First Date`) > 1992 AND L.PT < 14; 
SELECT COUNT(*) FROM Laboratory WHERE Date > '1997-01-01' AND APTT >= 45; 
SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.APTT > 45 AND Examination.Thrombosis = 0; 
SELECT COUNT(DISTINCT L.ID) AS Abnormal_Fibrinogen_Male_Patients FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE P.SEX = 'M' AND L.WBC BETWEEN 3.5 AND 9.0 AND (L.FG <= 150 OR L.FG >= 450); 
SELECT COUNT(DISTINCT p.ID) AS AbnormalFibrinogenPatients FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Birthday > '1980-01-01' AND (l.FG IS NULL OR l.FG < 150 OR l.FG > 450); 
SELECT P.Diagnosis FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE L.`U-PRO` >= 30; 
SELECT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Diagnosis = 'SLE' AND l.`U-PRO` BETWEEN 0 AND 30; 
SELECT COUNT(DISTINCT ID) FROM Laboratory WHERE IGG >= 2000
SELECT COUNT(DISTINCT E.Patient_ID) FROM Examination AS E JOIN Laboratory AS L ON E.Patient_ID = L.Patient_ID WHERE L.IGG BETWEEN 900 AND 2000 AND E.Symptoms IS NOT NULL; 
SELECT Diagnosis FROM Patients WHERE IGA = (SELECT MAX(IGA) FROM Patients WHERE IGA BETWEEN 80 AND 500); 
SELECT COUNT(DISTINCT p.ID) AS PatientCount FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.IGA BETWEEN 80 AND 500 AND YEAR(p.`First Date`) >= 1990; 
SELECT Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE IGM <= 40 OR IGM >= 400 GROUP BY Diagnosis ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT COUNT(*) FROM Patient WHERE CRP = '+' AND Description IS NULL
SELECT COUNT(DISTINCT p.ID) AS NumberOfPatients FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.CRE >= 1.5 AND TIMESTAMPDIFF(YEAR, p.Birthday, CURDATE()) < 70; 
SELECT COUNT(DISTINCT p.ID) AS NumberOfPatients FROM Patient p JOIN Laboratory l ON p.ID = l.Patient_ID JOIN Examination e ON p.ID = e.Patient_ID WHERE l.RA IN ('-', '+-') AND e.KCT = '+'; 
SELECT DISTINCT T2.Diagnosis  FROM Patient AS T1  JOIN Examination AS T2 ON T1.ID = T2.ID  WHERE YEAR(T1.Birthday) >= 1985 AND T2.RA IN ('-', '+-'); 
SELECT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.RF LIKE '<20%' AND TIMESTAMPDIFF(YEAR, p.Birthday, CURDATE()) > 60; 
SELECT COUNT(DISTINCT L.ID) AS PatientCount FROM Laboratory L JOIN Examination E ON L.ID = E.ID WHERE L.RF LIKE '<20%' AND E.Thrombosis = 0; 
SELECT COUNT(DISTINCT L.ID) AS NumberOfPatients FROM Laboratory L JOIN Examination E ON L.ID = E.ID WHERE L.C3 > 35 AND E.ANA_Pattern = 'P'; 
SELECT P.ID FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.HCT NOT BETWEEN 29 AND 52 ORDER BY E.`aCL IgA` DESC LIMIT 1; 
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Diagnosis LIKE '%APS%' AND l.C4 > 10; 
SELECT COUNT(DISTINCT P.ID) AS Normal_RNP_Admitted_Patients FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE (L.RNP = '-' OR L.RNP = '+-') AND P.Admission = '+'; 
SELECT Birthday FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE RNP NOT IN ('-', '+-')) ORDER BY Birthday DESC LIMIT 1; 
SELECT COUNT(*) FROM Patient AS P JOIN Examination AS E ON P.ID = E.ID WHERE P.SM IN ('-', '+-') AND E.Thrombosis = 0; 
SELECT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.SM NOT IN ('negative', '0') ORDER BY p.Birthday DESC LIMIT 3; 
SELECT P.ID FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE L.Date > '1997-01-01' AND L.SC170 IN ('negative', '0'); 
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P JOIN Examination AS E ON P.ID = E.ID WHERE P.SEX = 'F' AND P.Description IS NOT NULL AND P.First_Date IS NOT NULL AND P.Admission IN ('+', '-') AND P.Diagnosis != '' AND E.SC170 IN ('negative', '0') AND E.Symptoms IS NULL
SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.`First Date` < '2000-01-01' AND Examination.SSA IN ('-', '+'); 
SELECT P.ID FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE L.SSA NOT IN ('negative', '0') ORDER BY P.`First Date` ASC LIMIT 1; 
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE (L.SSB IN ('-', '+-') OR L.SSB IN ('negative', '0')) AND P.Diagnosis = 'SLE'; 
SELECT COUNT(DISTINCT E.ID) FROM Laboratory L JOIN Examination E ON L.ID = E.ID WHERE L.SSB IN ('negative', '0') AND E.Symptoms IS NOT NULL; 
SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.CENTROMEA IN ('-', '+-') AND L.SSB IN ('-', '+-'); 
SELECT P.Diagnosis FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE L.DNA >= 8; 
SELECT COUNT(DISTINCT p.ID) AS NormalAntiDNAPatients FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Description IS NULL AND l.DNA < 8; 
SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE IGG BETWEEN 900 AND 2000 AND Admission = '+'
SELECT CAST(SUM(CASE WHEN T2.GOT >= 60 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.ID) FROM Patient AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE'; 
SELECT COUNT(*) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.GOT < 60; 
SELECT MIN(Birthday) AS Youngest_Birthdate FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE GOT >= 60; 
SELECT P.Birthday FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.GPT < 60 ORDER BY L.GPT DESC LIMIT 3; 
SELECT COUNT(*) FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GOT < 60 AND P.SEX = 'M'; 
SELECT MIN(P.First_Date) AS First_Recorded_Date FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.LDH < 500; 
SELECT p.First_Date FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.LDH >= 500 ORDER BY p.First_Date DESC LIMIT 1; 
SELECT COUNT(DISTINCT p.ID) AS AdmittedPatientsWithAbnormalALP FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.ALP >= 300 AND p.Admission = '+'; 
SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Admission = '-' AND Laboratory.ALP < 300; 
SELECT P.Diagnosis FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.TP IS NOT NULL AND CAST(L.TP AS REAL) < 6.0; 
SELECT COUNT(*) FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Diagnosis = 'SJS' AND L.TP BETWEEN 6.0 AND 8.5; 
SELECT Date FROM Laboratory WHERE ALB IS NOT NULL AND ALB > 3.5 AND ALB < 5.5 ORDER BY ALB DESC LIMIT 1; 
SELECT COUNT(*) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.ALB BETWEEN 3.5 AND 5.5 AND L.TP BETWEEN 6.0 AND 8.5; 
SELECT e.aCL_IgG, e.aCL_IgM, e.aCL_IgA FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE p.SEX = 'F' AND e.aCL_IgG IS NOT NULL AND e.aCL_IgM IS NOT NULL AND e.aCL_IgA IS NOT NULL ORDER BY e.UA DESC LIMIT 1; 
SELECT MAX(e.ANA) AS Highest_ANA FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE l.CRE < 1.5; 
SELECT L.ID FROM Laboratory L JOIN Examination E ON L.ID = E.ID WHERE L.CRE < 1.5 AND E.aCL_IgA = (SELECT MAX(aCL_IgA) FROM Examination); 
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID JOIN Examination e ON p.ID = e.ID WHERE l.`T-BIL` >= 2.0 AND e.`ANA Pattern` LIKE '%P%'; 
SELECT MAX(T2.ANA) AS Max_ANA FROM Laboratory AS T1 JOIN Examination AS T2 ON T1.Patient_ID = T2.Patient_ID WHERE T1.`T-BIL` < 2.0; 
SELECT COUNT(DISTINCT P.ID) AS NegativeCoagulationCount FROM Patient P JOIN Laboratory L ON P.ID = L.ID JOIN Examination E ON P.ID = E.ID WHERE L.T_CHO >= 250 AND E.KCT = '-'; 
SELECT COUNT(DISTINCT E.Patient_ID) AS Patient_Count FROM Examination E JOIN Laboratory L ON E.Patient_ID = L.Patient_ID WHERE L.T_cho < 250 AND E.ANA_Pattern = 'P'; 
SELECT COUNT(DISTINCT E.ID) AS NumberOfPatients FROM Laboratory L JOIN Examination E ON L.ID = E.ID WHERE L.TG < 200 AND E.Symptoms IS NOT NULL; 
SELECT E.Diagnosis FROM Examination E JOIN Laboratory L ON E.ID = L.ID WHERE L.TG < 200 ORDER BY L.TG DESC LIMIT 1; 
SELECT L.ID FROM Laboratory L JOIN Examination E ON L.ID = E.ID WHERE E.Thrombosis = 0 AND L.CPK < 250; 
SELECT COUNT(DISTINCT p.ID) AS PositiveCoagulationCount FROM Patient p JOIN Laboratory l ON p.ID = l.Patient_ID JOIN Examination e ON p.ID = e.Patient_ID WHERE l.CPK < 250 AND (e.KCT = '+' OR e.RVVT = '+' OR e.LAC = '+'); 
SELECT p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.GLU > 180 ORDER BY p.Birthday ASC LIMIT 1; 
SELECT COUNT(DISTINCT p.ID) AS PatientCount FROM Patient p JOIN Laboratory l ON p.ID = l.ID JOIN Examination e ON p.ID = e.ID WHERE l.GLU < 180 AND e.Thrombosis = 0; 
SELECT COUNT(DISTINCT P.ID) AS Normal_WBC_Patients FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.Admission = '+' AND L.WBC BETWEEN 3.5 AND 9.0; 
SELECT COUNT(DISTINCT p.ID) AS Normal_WBC_SLE_Patients FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Diagnosis = 'SLE' AND l.WBC BETWEEN 3.5 AND 9.0; 
SELECT P.ID FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE (L.RBC <= 3.5 OR L.RBC >= 6.0) AND P.Admission = '-'
SELECT COUNT(DISTINCT p.ID) AS PatientCount FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.PLT BETWEEN 100 AND 400 AND p.Diagnosis IS NOT NULL; 
SELECT L.PLT FROM Laboratory AS L JOIN Patient AS P ON L.ID = P.ID WHERE L.PLT BETWEEN 100 AND 400 AND P.Diagnosis = 'MCTD'; 
SELECT AVG(PT) AS AverageProthrombinTime FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.PT < 14; 
SELECT COUNT(DISTINCT p.ID) AS PatientCount FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE e.Thrombosis IN (1, 2) AND l.PT < 14; 
SELECT m.major_name FROM member mem JOIN major m ON mem.link_to_major = m.major_id WHERE mem.first_name = 'Angela' AND mem.last_name = 'Sanders'; 
SELECT COUNT(*) FROM member m JOIN major j ON m.link_to_major = j.major_id WHERE j.college = 'College of Engineering'; 
SELECT m.first_name || ' ' || m.last_name AS full_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.department = 'Art and Design Department'; 
SELECT COUNT(*) FROM attendance  JOIN event ON attendance.link_to_event = event.event_id  WHERE event.event_name = 'Women''s Soccer'; 
SELECT m.phone  FROM member m  JOIN attendance a ON m.member_id = a.link_to_member  JOIN event e ON a.link_to_event = e.event_id  WHERE e.event_name = 'Women''s Soccer'; 
SELECT COUNT(*)  FROM attendance AS a  JOIN member AS m ON a.link_to_member = m.member_id  JOIN event AS e ON a.link_to_event = e.event_id  WHERE e.event_name = 'Women''s Soccer' AND m.t_shirt_size = 'Medium'; 
SELECT e.event_name  FROM event e  JOIN attendance a ON e.event_id = a.link_to_event  GROUP BY e.event_name  ORDER BY COUNT(a.link_to_event) DESC  LIMIT 1; 
SELECT T1.college FROM major AS T1 JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Vice President'; 
SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.first_name = 'Maya' AND m.last_name = 'Mclean'; 
SELECT COUNT(*) AS event_count FROM attendance JOIN member ON attendance.link_to_member = member.member_id JOIN event ON attendance.link_to_event = event.event_id WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison' AND YEAR(event.event_date) = 2019; 
SELECT COUNT(DISTINCT e.event_id) FROM event e JOIN attendance a ON e.event_id = a.link_to_event WHERE e.type = 'Meeting' GROUP BY e.event_id HAVING COUNT(a.link_to_event) > 10; 
SELECT event_name FROM event WHERE event_id IN ( SELECT link_to_event FROM attendance GROUP BY link_to_event HAVING COUNT(link_to_event) > 20 ) AND type != 'Fundraiser'
SELECT AVG(COUNT(event_id)) / COUNT(DISTINCT event_name) FROM event JOIN attendance ON event.event_id = attendance.link_to_event WHERE type = 'Meeting' AND strftime('%Y', event_date) = '2020'
SELECT expense_description, MAX(cost) AS max_cost FROM expense WHERE expense_description LIKE '%club events%' ORDER BY max_cost DESC LIMIT 1; 
SELECT COUNT(*) FROM member AS m JOIN major AS mj ON m.link_to_major = mj.major_id WHERE mj.major_name = 'Environmental Engineering'; 
SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Laugh Out Loud'; 
SELECT last_name FROM member WHERE link_to_major IN ( SELECT major_id FROM major WHERE major_name = 'Law and Constitutional Studies' )
SELECT z.county FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.first_name = 'Sherri' AND m.last_name = 'Ramsey'; 
SELECT m.college FROM major AS m JOIN member AS mem ON m.major_id = mem.link_to_major WHERE mem.first_name = 'Tyler' AND mem.last_name = 'Hewitt'; 
SELECT SUM(amount)  FROM income  JOIN member ON income.link_to_member = member.member_id  WHERE member.position = 'Vice President'; 
SELECT SUM(b.spent)  FROM budget b  JOIN event e ON b.link_to_event = e.event_id  WHERE b.category = 'Food' AND e.event_name = 'September Meeting'; 
SELECT z.city, z.state FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.position = 'President'; 
SELECT m.first_name || ' ' || m.last_name AS full_name FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE z.state = 'Illinois'; 
SELECT SUM(b.spent) AS total_spent_on_advertisement FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE b.category = 'Advertisement' AND e.event_name = 'September Meeting'; 
SELECT m.department FROM major m JOIN member mem ON m.major_id = mem.link_to_major WHERE mem.last_name IN ('Pierce', 'Guidi'); 
SELECT SUM(b.amount) AS total_budgeted_amount FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'October Speaker'; 
SELECT e.approved FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id WHERE ev.event_name = 'October Meeting' AND ev.event_date = '2019-10-08'; 
SELECT AVG(e.cost) AS average_cost FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.first_name = 'Elijah' AND m.last_name = 'Allen' AND (SUBSTR(e.expense_date, 6, 2) = '09' OR SUBSTR(e.expense_date, 6, 2) = '10'); 
SELECT SUM(CASE WHEN strftime('%Y', T1.event_date) = '2019' THEN T2.spent ELSE 0 END) -         SUM(CASE WHEN strftime('%Y', T1.event_date) = '2020' THEN T2.spent ELSE 0 END) AS difference FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event; 
SELECT location FROM event WHERE event_name = 'Spring Budget Review'; 
SELECT cost FROM expense WHERE expense_description LIKE '%Posters%' AND expense_date = '2019-09-04'; 
SELECT remaining FROM budget WHERE category = 'Food' AND amount = (SELECT MAX(amount) FROM budget WHERE category = 'Food'); 
SELECT notes FROM income WHERE date_received = '2019-09-14' AND source = 'Fundraising'; 
SELECT COUNT(*) FROM major WHERE college = 'College of Humanities and Social Sciences'; 
SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs'; 
SELECT T2.county FROM member AS T1 JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Adela' AND T1.last_name = 'O''Gallagher'; 
SELECT COUNT(*) FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'November Meeting' AND budget.remaining < 0; 
SELECT SUM(amount) AS total_budget_amount FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event_name = 'September Speaker'; 
SELECT b.event_status FROM budget b JOIN expense e ON b.budget_id = e.link_to_budget WHERE e.expense_description = 'Post Cards, Posters' AND e.expense_date = '2019-08-20'; 
SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Brent' AND member.last_name = 'Thomason'; 
SELECT COUNT(*) FROM member WHERE position != 'Inactive' AND t_shirt_size = 'Medium' AND link_to_major IN ( SELECT major_id FROM major WHERE major_name = 'Business' )
SELECT z.type FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.first_name = 'Christof' AND m.last_name = 'Nielson'; 
SELECT T2.major_name  FROM member AS T1  JOIN major AS T2 ON T1.link_to_major = T2.major_id  WHERE T1.position = 'Vice President'; 
SELECT T2.state FROM member AS T1 JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'; 
SELECT m.department  FROM major m  JOIN member mem ON m.major_id = mem.link_to_major  WHERE mem.position = 'President'; 
SELECT i.date_received FROM income AS i JOIN member AS m ON i.link_to_member = m.member_id WHERE m.first_name = 'Connor' AND m.last_name = 'Hilton' AND i.source = 'Dues'; 
SELECT T1.first_name, T1.last_name FROM member AS T1 JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.source = 'Dues' ORDER BY T2.date_received ASC LIMIT 1
SELECT      (SUM(CASE WHEN e.event_name = 'Yearly Kickoff' THEN b.amount ELSE 0 END) /       SUM(CASE WHEN e.event_name = 'October Meeting' THEN b.amount ELSE 0 END)) AS ratio FROM      budget b JOIN      event e ON b.link_to_event = e.event_id WHERE      b.category = 'Advertisement'; 
SELECT (SUM(CASE WHEN b.category = 'Parking' AND e.event_name = 'November Speaker' THEN b.amount ELSE 0 END) / COUNT(CASE WHEN e.event_name = 'November Speaker' THEN 1 END)) * 100 AS percentage; 
SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza'; 
SELECT COUNT(city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia'; 
SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences'; 
SELECT z.city, z.county, z.state FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.first_name = 'Amy' AND m.last_name = 'Firth'; 
SELECT e.expense_description FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id WHERE b.remaining = (SELECT MIN(remaining) FROM budget); 
SELECT M.* FROM member AS M JOIN attendance AS A ON M.member_id = A.link_to_member JOIN event AS E ON A.link_to_event = E.event_id WHERE E.event_name = 'October Meeting'; 
SELECT major.college  FROM member  JOIN major ON member.link_to_major = major.major_id  GROUP BY major.college  ORDER BY COUNT(major.college) DESC  LIMIT 1; 
SELECT T2.major_name FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.phone = '809-555-3360'; 
SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event ORDER BY b.amount DESC LIMIT 1; 
SELECT e.expense_description  FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.position = 'Vice President'; 
SELECT COUNT(*)  FROM attendance  JOIN event ON attendance.link_to_event = event.event_id  WHERE event.event_name = 'Women''s Soccer'; 
SELECT T1.date_received FROM income AS T1 JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Casey' AND T2.last_name = 'Mason'; 
SELECT COUNT(*) FROM member AS m JOIN zip_code AS z ON m.zip = z.zip_code WHERE z.state = 'Maryland'; 
SELECT COUNT(DISTINCT a.link_to_event) FROM attendance a JOIN member m ON a.link_to_member = m.member_id WHERE m.phone = '954-555-6240'; 
SELECT m.first_name, m.last_name FROM member m JOIN major j ON m.link_to_major = j.major_id WHERE j.department = 'School of Applied Sciences, Technology and Education'; 
SELECT e.event_name, (b.spent / b.amount) AS spend_to_budget_ratio FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.status = 'Closed' ORDER BY spend_to_budget_ratio DESC LIMIT 1; 
SELECT COUNT(*) FROM member WHERE position = 'President'; 
SELECT MAX(spent) AS highest_budget_spend FROM budget; 
SELECT COUNT(*) FROM event WHERE type = 'Meeting' AND YEAR(event_date) = 2020; 
SELECT SUM(spent) FROM budget WHERE category = 'Food'; 
SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member GROUP BY m.member_id HAVING COUNT(a.link_to_event) > 7; 
SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id JOIN major ma ON m.link_to_major = ma.major_id WHERE e.event_name = 'Community Theater' AND ma.major_name = 'Interior Design'; 
SELECT m.first_name, m.last_name FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE z.city = 'Georgetown' AND z.state = 'South Carolina'; 
SELECT SUM(income.amount) AS total_income FROM income JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Grant' AND member.last_name = 'Gilmour'; 
SELECT m.first_name, m.last_name FROM member m JOIN income i ON m.member_id = i.link_to_member WHERE i.amount > 40; 
SELECT SUM(expense.cost) AS total_expense FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'Yearly Kickoff'; 
SELECT m.first_name, m.last_name FROM member m JOIN expense e ON m.member_id = e.link_to_member JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id WHERE ev.event_name = 'Yearly Kickoff'; 
SELECT m.first_name, m.last_name, i.source, MAX(i.amount) AS max_income FROM member m JOIN income i ON m.member_id = i.link_to_member GROUP BY m.first_name, m.last_name, i.source; 
SELECT T1.event_name FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget ORDER BY T3.cost ASC LIMIT 1
SELECT (SUM(CASE WHEN e.event_name = 'Yearly Kickoff' THEN ex.cost ELSE 0 END) / SUM(ex.cost)) * 100 AS percentage FROM event e JOIN expense ex ON e.event_id = ex.link_to_budget; 
SELECT CAST(SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) AS FLOAT) / SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END) AS finance_to_physics_ratio FROM major; 
SELECT source  FROM income  WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30'  ORDER BY SUM(amount) DESC  LIMIT 1; 
SELECT first_name, last_name, email FROM member WHERE position = 'Treasurer'; 
SELECT COUNT(*)  FROM member m JOIN major j ON m.link_to_major = j.major_id WHERE j.major_name = 'Physics Teaching'; 
SELECT COUNT(DISTINCT link_to_member) AS member_count FROM attendance JOIN event ON attendance.link_to_event = event.event_id WHERE event_name = 'Community Theater' AND EXTRACT(YEAR FROM event_date::TIMESTAMP) = 2019; 
SELECT COUNT(a.link_to_event) AS event_count, m.major_name FROM attendance a JOIN member me ON a.link_to_member = me.member_id JOIN major m ON me.link_to_major = m.major_id WHERE me.first_name = 'Luisa' AND me.last_name = 'Guidi'; 
SELECT AVG(spent) FROM budget WHERE category = 'Food' AND event_status = 'Closed';
SELECT e.event_name FROM event AS e JOIN budget AS b ON e.event_id = b.link_to_event WHERE b.category = 'Advertisement' ORDER BY b.spent DESC LIMIT 1; 
SELECT EXISTS (     SELECT 1     FROM attendance a     JOIN member m ON a.link_to_member = m.member_id     JOIN event e ON a.link_to_event = e.event_id     WHERE m.first_name = 'Maya' AND m.last_name = 'Mclean' AND e.event_name = 'Women''s Soccer' ); 
SELECT (SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) / COUNT(event_id)) * 100 AS percentage FROM event WHERE event_date BETWEEN '2019-01-01' AND '2019-12-31'; 
SELECT e.cost FROM expense AS e JOIN budget AS b ON e.link_to_budget = b.budget_id JOIN event AS ev ON b.link_to_event = ev.event_id WHERE e.expense_description = 'Posters' AND ev.event_name = 'September Speaker'; 
SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE e.event_status = 'Closed' AND b.remaining < 0 ORDER BY b.remaining ASC LIMIT 1; 
SELECT e.type, SUM(exp.cost) AS total_value FROM expense exp JOIN budget b ON exp.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id WHERE ev.event_name = 'October Meeting' GROUP BY e.type; 
SELECT category, SUM(amount) AS total_amount_budgeted FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event_name = 'April Speaker' GROUP BY category ORDER BY total_amount_budgeted ASC; 
SELECT budget_id, amount FROM budget WHERE category = 'Food' ORDER BY amount DESC LIMIT 1; 
SELECT budget_id, category, amount FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3; 
SELECT SUM(cost) AS total_cost FROM expense WHERE expense_description = 'Parking'; 
SELECT SUM(cost) AS total_expense FROM expense WHERE expense_date = '2019-08-20'; 
SELECT m.first_name || ' ' || m.last_name AS full_name, SUM(e.cost) AS total_cost FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE m.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY m.first_name, m.last_name; 
SELECT expense_description FROM expense WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Sacha' AND last_name = 'Harrison'); 
SELECT e.expense_description  FROM expense e  JOIN member m ON e.link_to_member = m.member_id  WHERE m.t_shirt_size = 'X-Large'; 
SELECT T2.zip  FROM expense AS T1  JOIN member AS T2 ON T1.link_to_member = T2.member_id  WHERE T1.cost < 50; 
SELECT m.major_name FROM member AS mb JOIN major AS m ON mb.link_to_major = m.major_id WHERE mb.first_name = 'Phillip' AND mb.last_name = 'Cullen'; 
SELECT m.position  FROM member m  JOIN major j ON m.link_to_major = j.major_id  WHERE j.major_name = 'Business'; 
SELECT COUNT(*) FROM member m JOIN major j ON m.link_to_major = j.major_id WHERE j.major_name = 'Business' AND m.t_shirt_size = 'Medium'; 
SELECT e.type FROM event AS e JOIN budget AS b ON e.event_id = b.link_to_event WHERE b.remaining > 30; 
SELECT DISTINCT b.category  FROM budget b  JOIN event e ON b.link_to_event = e.event_id  WHERE e.location = 'MU 215'; 
SELECT b.category  FROM budget b  JOIN event e ON b.link_to_event = e.event_id  WHERE e.event_date = '2020-03-24T12:00:00'; 
SELECT T1.major_name FROM major AS T1 JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Vice President'; 
SELECT CAST(SUM(CASE WHEN T1.position = 'Member' AND T2.major_name = 'Business' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.member_id) FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id
SELECT DISTINCT b.category FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.location = 'MU 215'; 
SELECT COUNT(*) FROM income WHERE amount = 50; 
SELECT COUNT(*) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large'; 
SELECT COUNT(*) FROM major WHERE college = 'College of Agriculture and Applied Sciences' AND department = 'School of Applied Sciences, Technology and Education'; 
SELECT m.last_name, maj.department, maj.college FROM member m JOIN major maj ON m.link_to_major = maj.major_id WHERE maj.major_name = 'Environmental Engineering'; 
SELECT b.category FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.location = 'MU 215' AND e.type = 'Guest Speaker' AND b.spent = 0; 
SELECT z.city, z.state FROM member m JOIN zip_code z ON m.zip = z.zip_code JOIN major j ON m.link_to_major = j.major_id WHERE j.department = 'Electrical and Computer Engineering Department' AND m.position = 'Member'; 
SELECT e.event_name  FROM event e  JOIN attendance a ON e.event_id = a.link_to_event  JOIN member m ON a.link_to_member = m.member_id  WHERE e.type = 'Social' AND e.location = '900 E. Washington St.' AND m.position = 'Vice President'; 
SELECT m.last_name, m.position FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.expense_date = '2019-09-10' AND e.expense_description = 'Pizza'; 
SELECT m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Women\'s Soccer' AND m.position = 'Member'; 
SELECT CAST(SUM(CASE WHEN T1.amount = 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM income AS T1 JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.t_shirt_size = 'Medium'; 
SELECT DISTINCT county FROM zip_code WHERE type = 'PO Box'; 
SELECT zip_code FROM zip_code WHERE type = 'PO Box' AND county = 'San Juan Municipio' AND state = 'Puerto Rico'; 
SELECT event_name FROM event WHERE type = 'Game' AND status = 'Closed' AND event_date BETWEEN '2019-03-15' AND '2020-03-20'; 
SELECT DISTINCT T1.link_to_event  FROM attendance AS T1  JOIN expense AS T2 ON T1.link_to_member = T2.link_to_member  WHERE T2.cost > 50; 
SELECT      m.member_id,     m.name AS member_name,     a.link_to_event FROM      expense e JOIN      member m ON e.link_to_member = m.member_id JOIN      attendance a ON m.member_id = a.link_to_member WHERE      e.approved = 'true'      AND e.expense_date BETWEEN '2019-01-10' AND '2019-11-19'; 
SELECT m.college FROM major m JOIN member mb ON m.major_id = mb.link_to_major WHERE mb.first_name = 'Katy' AND mb.link_to_major = 'rec1N0upiVLy5esTO'; 
SELECT m.phone  FROM member m JOIN major mj ON m.link_to_major = mj.major_id WHERE mj.college = 'College of Agriculture and Applied Sciences' AND mj.major_name = 'Business'; 
SELECT T1.email FROM member AS T1 JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.expense_date BETWEEN '2019-09-10' AND '2019-11-19' AND T2.cost > 20;
SELECT COUNT(*) FROM member  JOIN major ON member.link_to_major = major.major_id  WHERE major.major_name = 'Education' AND major.college = 'College of Education & Human Services'; 
SELECT (SUM(CASE WHEN remaining < 0 THEN 1 ELSE 0 END) / COUNT(budget_id)) * 100 AS percentage_over_budget FROM budget; 
SELECT event_id, location, status FROM event WHERE event_date BETWEEN '2019-11-01' AND '2020-03-31'; 
SELECT expense_description  FROM expense  GROUP BY expense_description  HAVING AVG(cost) > 50; 
SELECT first_name || ' ' || last_name AS full_name FROM member WHERE t_shirt_size = 'X-Large'; 
SELECT (CAST(COUNT(CASE WHEN type = 'PO Box' THEN 1 ELSE NULL END) AS FLOAT) / COUNT(zip_code)) * 100 AS percentage_of_po_boxes FROM zip_code; 
SELECT e.event_name, e.location FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.remaining > 0; 
SELECT e.event_name, e.event_date FROM event e JOIN budget b ON e.event_id = b.link_to_event JOIN expense exp ON b.budget_id = exp.link_to_budget WHERE exp.expense_description = 'Pizza' AND exp.cost > 50 AND exp.cost < 100; 
SELECT m.first_name, m.last_name, ma.major_name FROM member m JOIN expense e ON m.member_id = e.link_to_member JOIN major ma ON m.link_to_major = ma.major_id WHERE e.cost > 100; 
SELECT z.city, z.county  FROM zip_code z  JOIN member m ON z.zip_code = m.zip  JOIN income i ON m.member_id = i.link_to_member  GROUP BY z.city, z.county  HAVING COUNT(i.amount) > 40; 
SELECT m.member_id, SUM(e.cost) AS total_spent FROM member m JOIN expense e ON m.member_id = e.link_to_member GROUP BY m.member_id HAVING COUNT(DISTINCT e.link_to_event) > 1 ORDER BY total_spent DESC LIMIT 1; 
SELECT AVG(expense.cost) AS average_amount_paid FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE member.position != 'Member'; 
SELECT e.event_name FROM event AS e JOIN expense AS ex ON e.event_id = ex.link_to_budget JOIN budget AS b ON ex.link_to_budget = b.budget_id WHERE b.category = 'Parking' AND ex.cost < ( SELECT AVG(cost) FROM expense WHERE link_to_budget IN ( SELECT budget_id FROM budget WHERE category = 'Parking' ) )
SELECT (SUM(CASE WHEN type = 'Meeting' THEN cost ELSE 0 END) / COUNT(event_id)) * 100 AS percentage FROM event JOIN expense ON event.event_id = expense.link_to_event; 
SELECT T1.link_to_budget FROM budget AS T1 JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T2.expense_description = 'Water, Chips, Cookies' ORDER BY T2.cost DESC LIMIT 1; 
SELECT m.first_name, m.last_name, SUM(e.cost) AS total_spent FROM member m JOIN expense e ON m.member_id = e.link_to_member GROUP BY m.member_id ORDER BY total_spent DESC LIMIT 5; 
SELECT m.first_name, m.last_name, m.phone FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.cost > (SELECT AVG(cost) FROM expense); 
SELECT (SUM(CASE WHEN z.state = 'New Jersey' THEN 1 ELSE 0 END) * 100.0 / COUNT(m.position)) - (SUM(CASE WHEN z.state = 'Vermont' THEN 1 ELSE 0 END) * 100.0 / COUNT(m.position)) AS diff_percentage FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.position = 'Member'; 
SELECT m.major_name, d.department FROM member mem JOIN major m ON mem.link_to_major = m.major_id WHERE mem.first_name = 'Garrett' AND mem.last_name = 'Gerke'; 
SELECT m.first_name, m.last_name, SUM(e.cost) AS total_cost FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE e.expense_description = 'Water, Veggie tray, supplies' GROUP BY m.first_name, m.last_name; 
SELECT m.last_name, m.phone FROM member m JOIN major mj ON m.link_to_major = mj.major_id WHERE mj.major_name = 'Elementary Education'; 
SELECT b.category, b.amount FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'January Speaker'; 
SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.category = 'Food'; 
SELECT m.first_name, m.last_name, i.amount FROM member m JOIN income i ON m.member_id = i.link_to_member WHERE i.date_received = '2019-09-09'; 
SELECT b.category FROM budget AS b JOIN expense AS e ON b.budget_id = e.link_to_budget WHERE e.expense_description = 'Posters'; 
SELECT m.first_name || ' ' || m.last_name AS full_name, maj.college FROM member m JOIN major maj ON m.link_to_major = maj.major_id WHERE m.position = 'Secretary'; 
SELECT SUM(b.spent), e.event_name  FROM budget b  JOIN event e ON b.link_to_event = e.event_id  WHERE b.category = 'Speaker Gifts'; 
SELECT z.city FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.first_name = 'Garrett' AND m.last_name = 'Gerke'; 
SELECT m.first_name, m.last_name, m.position FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE z.city = 'Lincolnton' AND z.state = 'North Carolina'; 
SELECT COUNT(*) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium'; 
SELECT CAST(SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END) AS Ratio FROM customers; 
SELECT c.CustomerID, c.Segment, y.Consumption FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE c.Segment = 'LAM' AND y.YearMonth BETWEEN 201201 AND 201212 ORDER BY y.Consumption ASC LIMIT 1; 
SELECT AVG(Consumption) / 12 AS AvgMonthlyConsumption FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Segment = 'SME' AND yearmonth.Date BETWEEN '201301' AND '201312'; 
SELECT c.CustomerID, SUM(y.Consumption) AS TotalConsumption FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE c.Currency = 'CZK' AND y.Date BETWEEN '201101' AND '201112' GROUP BY c.CustomerID ORDER BY TotalConsumption DESC; 
SELECT COUNT(DISTINCT c.CustomerID)  FROM customers c  JOIN yearmonth ym ON c.CustomerID = ym.CustomerID  WHERE c.Segment = 'KAM' AND ym.Date BETWEEN '201201' AND '201212' AND ym.Consumption < 30000; 
SELECT      (SUM(CASE WHEN c.Currency = 'CZK' THEN y.Consumption ELSE 0 END) -       SUM(CASE WHEN c.Currency = 'EUR' THEN y.Consumption ELSE 0 END)) AS ConsumptionDifference FROM      yearmonth y JOIN      customers c ON y.CustomerID = c.CustomerID WHERE      y.Date BETWEEN '201201' AND '201212'; 
SELECT ym.Date, SUM(ym.Consumption) AS TotalConsumption FROM yearmonth ym JOIN customers c ON ym.CustomerID = c.CustomerID WHERE c.Currency = 'EUR' GROUP BY ym.Date ORDER BY TotalConsumption DESC LIMIT 1; 
SELECT Segment FROM customers AS c JOIN (SELECT CustomerID, MIN(Consumption) AS MinConsumption FROM yearmonth GROUP BY CustomerID) AS ym ON c.CustomerID = ym.CustomerID; 
SELECT Date, SUM(Consumption) AS Total_Consumption FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE Currency = 'CZK' GROUP BY Date ORDER BY Total_Consumption DESC LIMIT 1; 
SELECT MAX(Consumption) AS PeakConsumption FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Segment = 'SME' AND yearmonth.Date BETWEEN '201301' AND '201312'; 
WITH LowestConsumption AS (     SELECT          Segment,         MIN(Consumption) AS MinConsumption     FROM          yearmonth     WHERE          Date BETWEEN '201301' AND '201312'     GROUP BY          Segment ), AnnualAverage AS (     SELECT          Segment,         SUM(Consumption) / COUNT(CustomerID) AS AvgConsumption     FROM          yearmonth     JOIN          (SELECT CustomerID FROM LowestConsumption) AS lc ON yearmonth.CustomerID = lc.CustomerID     WHERE          Date BETWEEN '201301' AND '201312'     GROUP BY          Segment ) SELECT      AVG(AvgConsumption) - LAG(AVG(AvgConsumption)) OVER (ORDER BY Segment) AS Difference FROM      AnnualAverage; 
WITH consumption_2012 AS (     SELECT          c.Segment,         SUM(y.Consumption) AS TotalConsumption2012     FROM          customers c     JOIN          yearmonth y ON c.CustomerID = y.CustomerID     WHERE          y.Date LIKE '2012%'     GROUP BY          c.Segment ), consumption_2013 AS (     SELECT          c.Segment,         SUM(y.Consumption) AS TotalConsumption2013     FROM          customers c     JOIN          yearmonth y ON c.CustomerID = y.CustomerID     WHERE          y.Date LIKE '2013%'     GROUP BY          c.Segment ) SELECT      c.Segment,     ((c.TotalConsumption2013 - c.TotalConsumption2012) / c.TotalConsumption2013) * 100 AS PercentageChange FROM      consumption_2012 c JOIN      consumption_2013 ON c.Segment = consumption_2013.Segment ORDER BY      PercentageChange DESC; 
SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311'; 
SELECT      (SELECT COUNT(*) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Discount') -     (SELECT COUNT(*) FROM gasstations WHERE Country = 'SVK' AND Segment = 'Discount') AS DiscountDifference; 
SELECT (SELECT Consumption FROM yearmonth WHERE CustomerID = 7 AND Date = '201304') -         (SELECT Consumption FROM yearmonth WHERE CustomerID = 5 AND Date = '201304') AS Difference; 
SELECT      (SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END) - SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END)) AS Difference FROM      customers WHERE      Segment = 'SME'; 
SELECT c.CustomerID FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE c.Segment = 'LAM' AND c.Currency = 'EUR' AND ym.Date = '201310' ORDER BY ym.Consumption DESC LIMIT 1; 
SELECT c.CustomerID, MAX(y.Consumption) AS MaxConsumption FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE c.Segment = 'KAM'; 
SELECT SUM(t2.Consumption) AS TotalConsumption FROM customers t1 JOIN yearmonth t2 ON t1.CustomerID = t2.CustomerID WHERE t1.Segment = 'KAM' AND t2.Date = '201305'; 
SELECT      ((COUNT(CASE WHEN T1.Consumption > 46.73 THEN 1 END) / COUNT(T1.CustomerID)) * 100) AS percentage FROM      yearmonth AS T1 JOIN      customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE      T2.Segment = 'LAM'; 
SELECT Country, COUNT(*) AS ValueForMoneyCount FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country; 
SELECT      (COUNT(CASE WHEN Segment = 'KAM' AND Currency = 'EUR' THEN 1 END) / COUNT(CASE WHEN Segment = 'KAM' THEN 1 END)) * 100 AS Percentage FROM      customers; 
SELECT (COUNT(CASE WHEN Consumption > 528.3 THEN 1 ELSE NULL END) / COUNT(CustomerID)) * 100 AS Percentage FROM yearmonth WHERE Date = '201202'; 
SELECT ((SUM(CASE WHEN Segment = 'Premium' THEN 1 ELSE 0 END) / COUNT(*)) * 100) AS PremiumPercentage FROM gasstations WHERE Country = 'SVK'; 
SELECT CustomerID FROM yearmonth WHERE Date = '201309' ORDER BY Consumption DESC LIMIT 1; 
SELECT c.Segment, SUM(y.Consumption) AS TotalConsumption FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE y.Date = '201309' GROUP BY c.Segment ORDER BY TotalConsumption ASC LIMIT 1; 
SELECT c.CustomerID, MIN(y.Consumption) AS LeastConsumption FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE c.Segment = 'SME' AND y.Date = '201206'; 
SELECT MAX(Consumption) AS HighestMonthlyConsumption FROM yearmonth WHERE Date LIKE '2012%'; 
SELECT MAX(SUM(Consumption) / 12) AS BiggestMonthlyConsumption FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Currency = 'EUR'; 
SELECT p.Description FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID JOIN yearmonth ym ON t.CustomerID = ym.CustomerID AND SUBSTRING(ym.Date, 1, 6) = '201309'; 
SELECT DISTINCT g.Country FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID JOIN yearmonth ym ON t.Date LIKE CONCAT(LEFT(ym.Date, 4), '06%') WHERE ym.Date LIKE '201306%' 
SELECT DISTINCT g.ChainID FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'EUR'; 
SELECT p.Description FROM products p JOIN transactions_1k t ON p.ProductID = t.ProductID JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'EUR'; 
SELECT AVG(Amount) AS AverageTotalPrice FROM transactions_1k WHERE Date LIKE '2012-01%'; 
SELECT COUNT(DISTINCT c.CustomerID) AS NumberOfCustomers FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE c.Currency = 'EUR' AND ym.Consumption > 1000; 
SELECT p.Description FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID JOIN products p ON t.ProductID = p.ProductID WHERE g.Country = 'CZE'; 
SELECT DISTINCT t.Time FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.ChainID = 11; 
SELECT COUNT(*) FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.Country = 'CZE' AND t.Price > 1000; 
SELECT COUNT(*)  FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.Country = 'CZE' AND t.Date > '2012-01-01'; 
SELECT AVG(t.Price * t.Amount) AS AverageTotalPrice FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.Country = 'CZE'; 
SELECT AVG(t.Price) AS AverageTotalPrice FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'EUR'; 
SELECT CustomerID, SUM(Price) AS TotalSpent FROM transactions_1k WHERE Date = '2012-08-25' GROUP BY CustomerID ORDER BY TotalSpent DESC LIMIT 1; 
SELECT g.Country FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.Date = '2012-08-25' ORDER BY t.Time ASC LIMIT 1; 
SELECT c.Currency FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Date = '2012-08-24' AND t.Time = '16:25:00'; 
SELECT c.Segment FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.TransactionDate = '2012-08-23 21:20:00'; 
SELECT COUNT(*) FROM transactions_1k WHERE Date = '2012-08-26' AND Time < '13:00:00' AND Currency = 'CZK'; 
SELECT Segment FROM customers WHERE CustomerID = (SELECT MIN(CustomerID) FROM customers); 
SELECT T2.Country  FROM transactions_1k AS T1  JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID  WHERE T1.Date = '2012-08-24' AND T1.Time = '12:42:00'; 
SELECT T1.ProductID FROM transactions_1k AS T1 JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00'; 
SELECT t.Consumption, t.Date, t.Expenses FROM yearmonth t JOIN transactions_1k tr ON t.CustomerID = tr.CustomerID AND t.Date LIKE '201201%' WHERE tr.Price = 124.05 AND tr.Date = '2012-08-24'; 
SELECT COUNT(t.TransactionID) FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.Date = '2012-08-26' AND t.Time BETWEEN '08:00:00' AND '09:00:00' AND g.Country = 'CZE'; 
SELECT c.Currency  FROM customers c  JOIN yearmonth ym ON c.CustomerID = ym.CustomerID  WHERE ym.Date LIKE '%201306%' AND ym.Consumption = 214582.17; 
SELECT g.Country FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.CardID = 667467; 
SELECT g.Country FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.Date = '2012-08-24' AND t.Price = 548.4; 
SELECT      (COUNT(CASE WHEN c.Currency = 'EUR' THEN 1 END) / COUNT(c.CustomerID)) * 100 AS Percentage_EUR_Customers FROM      customers c JOIN      transactions_1k t ON c.CustomerID = t.CustomerID WHERE      t.Date = '2012-08-25'; 
SELECT      (y2.Consumption - y1.Consumption) / y2.Consumption AS ConsumptionDecreaseRate FROM      yearmonth y1 JOIN      yearmonth y2 ON      y1.CustomerID = y2.CustomerID WHERE      y1.Date = '201208' AND y1.Consumption = (         SELECT              SUM(Price * Consumption)         FROM              transactions_1k         JOIN              yearmonth ON transactions_1k.Date = yearmonth.Date         WHERE              Date = '2012-08-25'     ) AND      y2.Date = '201308'; 
SELECT GasStationID, SUM(Price) AS Revenue FROM transactions_1k GROUP BY GasStationID ORDER BY Revenue DESC LIMIT 1; 
SELECT (SUM(CASE WHEN T1.Segment = 'Premium' THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS PremiumPercentage FROM gasstations AS T1 JOIN transactions_1k AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Country = 'SVK'; 
SELECT SUM(t.Price) AS TotalSpentByCustomer FROM transactions_1k t WHERE t.CustomerID = 38508;  SELECT SUM(t.Price) AS TotalSpentInJanuary2012 FROM transactions_1k t JOIN yearmonth ym ON t.Date LIKE CONCAT(ym.Date, '%') WHERE t.CustomerID = 38508 AND ym.Date = '201201'; 
SELECT p.Description  FROM products p  JOIN transactions_1k t ON p.ProductID = t.ProductID  GROUP BY p.ProductID  ORDER BY SUM(t.Amount) DESC  LIMIT 5; 
SELECT c.CustomerID, AVG(t.Price) AS AvgPricePerItem, c.Currency FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID GROUP BY c.CustomerID, c.Currency ORDER BY SUM(t.Amount * t.Price) DESC LIMIT 1; 
SELECT g.Country FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID WHERE t.ProductID = 2 AND t.Price = (SELECT MAX(Price) FROM transactions_1k WHERE ProductID = 2); 
SELECT y.Consumption FROM transactions_1k t JOIN yearmonth y ON t.CustomerID = y.CustomerID AND y.Date LIKE '201208%' WHERE t.ProductID = 5 AND t.Price / t.Amount > 29.00; 
